package com.yeespec.microscope.master.activity;import android.app.ActivityManager;import android.app.PendingIntent;import android.bluetooth.BluetoothAdapter;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.hardware.usb.UsbDevice;import android.hardware.usb.UsbDeviceConnection;import android.hardware.usb.UsbInterface;import android.hardware.usb.UsbManager;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.util.Log;import android.view.KeyEvent;import android.view.MotionEvent;import android.view.WindowManager;import android.widget.Toast;import com.orhanobut.hawk.Hawk;import com.yeespec.R;import com.yeespec.libuvccamera.usart.usbserial.driver.UsbSerialDriver;import com.yeespec.libuvccamera.usart.usbserial.driver.UsbSerialPort;import com.yeespec.libuvccamera.usart.usbserial.driver.UsbSerialProber;import com.yeespec.libuvccamera.usb.UVCCamera;import com.yeespec.libuvccamera.uvccamera.glutils.JniUtils;import com.yeespec.microscope.master.BaseActivity;import com.yeespec.microscope.master.application.BaseApplication;import com.yeespec.microscope.utils.ConstantUtil;import com.yeespec.microscope.utils.FileUtils;import com.yeespec.microscope.utils.MDateUtils;import com.yeespec.microscope.utils.NetworkUtils;import com.yeespec.microscope.utils.UIUtil;import java.io.File;import java.nio.ByteBuffer;import java.nio.CharBuffer;import java.nio.charset.Charset;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Timer;import java.util.TimerTask;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class SplashActivity extends BaseActivity {    private BluetoothAdapter bluetoothAdapter;  /*  public static final ExecutorService EXECUTOR_SERVICE = Executors.newSingleThreadExecutor();    private PendingIntent mPermissionIntent;*/    private Handler handler = new Handler() {        public void handleMessage(android.os.Message msg) {            switch (msg.what) {                case -1:                    if (ConstantUtil.OBJECTIVES[0] == 0) {//如果加载失败再加载                        initConstant();                    }                    Intent intent = new Intent(SplashActivity.this, MasterActivity.class);                    startActivity(intent);                    handler.removeMessages(-1);                    finish();                    break;                case 1:                    //跳转桌面                    if (ConstantUtil.isV820Pad)                        startBeskpop();                    break;            }        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        TAG = "application";        super.onCreate(savedInstanceState);        if (!isWorked(this, "com.yeespec.microscope.master.service.MasterIntentService")) {            FileUtils.writeFileToLogFolder("-----------------------!isWorked------------------------");            setContentView(R.layout.activity_splash);            //初始化物镜个数和使用倍数 初始化激发块个数            initConstant();          //  Hawk.put("exception_count", false);           // Log.w("cameraclient","exception=========1");            closeBluetooth();        } else {            FileUtils.writeFileToLogFolder("-----------------------isWorked------------------------");            Intent intent = new Intent(SplashActivity.this, MasterActivity.class);            startActivity(intent);            finish();        }       // JniUtils.fillOnePixelBitmap(BITMAP);    }   // public static Bitmap BITMAP = Bitmap.createBitmap(UVCCamera.DEFAULT_PREVIEW_WIDTH, UVCCamera.DEFAULT_PREVIEW_HEIGHT, Bitmap.Config.ARGB_8888);//RGB565    private int constantCount = 0;//重新加载次数    private void initConstant() {        BaseApplication.getInstance().setAutoPhoto_views(1);        File filedir = Environment.getExternalStorageDirectory().getAbsoluteFile();        String s = FileUtils.getFileString(filedir + "", "developerset.txt").trim();        File filedir1 = Environment.getExternalStorageDirectory().getAbsoluteFile();        String gm = FileUtils.getFileString(filedir1 + "", "developerset_gamma.txt");        if(gm != null && !gm.trim().equals("")){            ConstantUtil.M_GAMMA  = Integer.valueOf(gm.toString().trim());        }//        Log.e("SplashActivity", "s =" + s);        if (s != null && !s.trim().equals("")) {            String[] split = s.split("\n");            Log.e("SplashActivity", "split.size =" + split.length);            ConstantUtil.LIGHTTYPE = split[0].trim();            ConstantUtil.OBJECTSTRING = split[1].trim();            if (split.length > 2) {                String[] tranlates = split[2].trim().split(",");                ConstantUtil.tranlateX = Integer.valueOf(tranlates[0].trim());                ConstantUtil.tranlateY = Integer.valueOf(tranlates[1].trim());            }            if (split.length > 3) {                String rockerState = split[3].trim();                ConstantUtil.rockerState = rockerState;            }            if (split.length > 4) {                ConstantUtil.remoteUserName = split[4].split("&")[0];                ConstantUtil.remotePassword = split[4].split("&")[1];            }            String[] strings = ConstantUtil.LIGHTTYPE.split(",");            ConstantUtil.LIGHTSCOUNT = strings.length;            if (split.length > 1) {                String[] mtimes = split[1].trim().split(",");                ConstantUtil.OBJECTIVES = new int[mtimes.length];                if (mtimes.length > 1) {                    for (int i = 0; i < mtimes.length; i++) {                        int times = Integer.valueOf(mtimes[i]);                        ConstantUtil.OBJECTIVES[i] = times;                    }                    if (ConstantUtil.OBJECTIVES[0] == 0 && constantCount < 10) {                        constantCount++;                        initConstant();                        return;                    }                    Arrays.sort(ConstantUtil.OBJECTIVES);                    BaseApplication.getInstance().setContrast(ConstantUtil.OBJECTIVES[0]);                    Boolean hawkException = Hawk.get("port_exception", false);                    int second =0;                    if(hawkException){                        Hawk.put("port_exception", false);                        second = 30*1000;                    }                    if (ConstantUtil.isV820Pad) {                        handler.sendMessageDelayed(handler.obtainMessage(1), 2500);                        handler.sendMessageDelayed(handler.obtainMessage(-1), second+2700);                    } else {                        handler.sendMessageDelayed(handler.obtainMessage(1), 7500);                        handler.sendMessageDelayed(handler.obtainMessage(-1), second+7700);                    }                }            }        } else {            //默认设置            ConstantUtil.tranlateX = 0;            ConstantUtil.tranlateY = 9;            ConstantUtil.LIGHTTYPE = "1,2,3,4";            ConstantUtil.LIGHTSCOUNT = 4;            ConstantUtil.OBJECTSTRING = "5,20";            BaseApplication.getInstance().setContrast(ConstantUtil.OBJECTIVES[0]);            if (ConstantUtil.isV820Pad) {                handler.sendMessageDelayed(handler.obtainMessage(1), 2500);                handler.sendMessageDelayed(handler.obtainMessage(-1), 2700);            } else {                handler.sendMessageDelayed(handler.obtainMessage(1), 7500);                handler.sendMessageDelayed(handler.obtainMessage(-1), 7700);            }        }    }    private void closeBluetooth(){        bluetoothAdapter  = BluetoothAdapter.getDefaultAdapter();        bluetoothAdapter.disable();    }    //跳转桌面    private void startBeskpop() {        Intent intent = new Intent(Intent.ACTION_MAIN);        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); //如果是服务里调用，必须加入new task标识        intent.addCategory(Intent.CATEGORY_HOME);        startActivity(intent);    }    @Override    protected void onDestroy() {        super.onDestroy();    }    @Override    public boolean onTouchEvent(MotionEvent event) {       /* if (event.getAction() == MotionEvent.ACTION_UP) {            handler.sendMessage(handler.obtainMessage(-1));            finish();        }*/        return super.onTouchEvent(event);    }    private boolean isBackground(Context context) {        ActivityManager activityManager = (ActivityManager) context                .getSystemService(Context.ACTIVITY_SERVICE);        List<ActivityManager.RunningAppProcessInfo> appProcesses = activityManager                .getRunningAppProcesses();        for (ActivityManager.RunningAppProcessInfo appProcess : appProcesses) {            if (appProcess.processName.equals(context.getPackageName())) {                if (appProcess.importance != ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {                    Log.i(context.getPackageName(), "处于后台"                            + appProcess.processName);                    return true;                } else {                    Log.i(context.getPackageName(), "处于前台"                            + appProcess.processName);                    return false;                }            }        }        return false;    }}