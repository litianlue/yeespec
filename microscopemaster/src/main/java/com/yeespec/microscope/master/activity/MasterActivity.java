package com.yeespec.microscope.master.activity;import android.app.ActivityManager;import android.app.AlarmManager;import android.app.AlertDialog;import android.app.Dialog;import android.app.Service;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.bluetooth.BluetoothSocket;import android.content.BroadcastReceiver;import android.content.ComponentName;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.ServiceConnection;import android.content.SharedPreferences;import android.content.pm.ActivityInfo;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Color;import android.graphics.drawable.AnimationDrawable;import android.graphics.drawable.BitmapDrawable;import android.media.AudioManager;import android.media.MediaPlayer;import android.net.TrafficStats;import android.net.Uri;import android.os.BatteryManager;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.os.IBinder;import android.os.Message;import android.os.PowerManager;import android.os.Process;import android.os.SystemClock;import android.preference.CheckBoxPreference;import android.text.format.DateUtils;import android.util.DisplayMetrics;import android.util.Log;import android.view.Display;import android.view.GestureDetector;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.Button;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.EditText;import android.widget.GridView;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.PopupWindow;import android.widget.ProgressBar;import android.widget.RelativeLayout;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import com.facebook.drawee.drawable.ProgressBarDrawable;import com.facebook.drawee.generic.GenericDraweeHierarchy;import com.facebook.drawee.generic.GenericDraweeHierarchyBuilder;import com.facebook.drawee.view.SimpleDraweeView;import com.google.android.gms.appindexing.Action;import com.google.android.gms.appindexing.Thing;import com.orhanobut.hawk.Hawk;import com.yeespec.R;import com.yeespec.libuvccamera.uvccamera.service.CameraServerHandler;import com.yeespec.libuvccamera.uvccamera.serviceclient.CameraClient;import com.yeespec.libuvccamera.uvccamera.widget.CameraViewInterface;import com.yeespec.microscope.master.BaseActivity;import com.yeespec.microscope.master.adapter.Contrack_Set_Adapter;import com.yeespec.microscope.master.adapter.MySpinnerAdapter;import com.yeespec.microscope.master.adapter.SaturationLightAdapter;import com.yeespec.microscope.master.application.BaseApplication;import com.yeespec.microscope.master.service.ClientLoginCallback;import com.yeespec.microscope.master.service.MasterIntentService;import com.yeespec.microscope.master.service.power.PowerService;import com.yeespec.microscope.utils.ConstantUtil;import com.yeespec.microscope.utils.FileUtil;import com.yeespec.microscope.utils.FileUtils;import com.yeespec.microscope.utils.GrothRateDialog;import com.yeespec.microscope.utils.PictureUtils;import com.yeespec.microscope.utils.SPHelper;import com.yeespec.microscope.utils.SPUtils;import com.yeespec.microscope.utils.SystemConfigUtil;import com.yeespec.microscope.utils.UIUtil;import com.yeespec.microscope.utils.bluetooth.BlueUtil;import com.yeespec.microscope.utils.bluetooth.DataUtil;import com.yeespec.microscope.utils.fresco.tool.FrescoTool;import com.yeespec.microscope.utils.log.Logger;import com.yeespec.microscope.utils.wifidirect.WifiDirectUtils;import com.yeespec.microscope.widget.ExplosionView;import com.yeespec.microscope.widget.raymenu.RayMenu;import com.yeespec.microscope.widget.rocker.CircularSeekBar;import com.yeespec.microscope.widget.rocker.RockerView;import java.io.BufferedReader;import java.io.DataOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStreamReader;import java.lang.ref.WeakReference;import java.lang.reflect.Method;import java.security.NoSuchAlgorithmException;import java.util.ArrayList;import java.util.Arrays;import java.util.Calendar;import java.util.Collections;import java.util.Comparator;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Set;import java.util.TimeZone;import java.util.Timer;import java.util.TimerTask;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.TimeUnit;import javax.net.ssl.HttpsURLConnection;import javax.net.ssl.SSLContext;import io.vov.vitamio.utils.CPU;import static com.yeespec.microscope.master.service.MasterIntentService.AUTOCAMER_SERVICE_SCHEDULED;import static com.yeespec.microscope.master.service.MasterIntentService.EXECUTOR_SERVICE;import static com.yeespec.microscope.master.service.MasterIntentService.EXECUTOR_SERVICE_SCHEDULED;import static com.yeespec.microscope.utils.ConstantUtil.ConvergenceNumber;/** * 拍摄主页面 */public class MasterActivity extends BaseActivity implements View.OnClickListener {    private RelativeLayout layoutTounEnvent;    private boolean THIS_RENAME_FILE = true;//是否开启文件重命名 true为开启    private boolean isRename_File = false;    private boolean isReplaceUser = false;//是否切换用户标志    private boolean isSartAutoCamare = false;//是否正在自动拍照标记    private boolean isRestartApp = false;//是否重启APP    //成品发布注释码 :    private static final boolean ISSUANCE_PRODUCT_SWITCH = true;    private GestureDetector mGestureDetector;    private View mISOBrightnessLayout;    private ImageView mOperationBg;    private TextView mOperationPercent;    //    public ImageView mRecordView;    private View mRecordButton;    private View recordIconView;    private View mStillCaptureButton;    //private View mStillAutoCaptureButton;    private View captureIconView;    private ImageView btn_photo_album;    private View timeView;    private TextView stepTimeTV;    private ImageView mButtonCaptureButton;    private LinearLayout serviceProgress;    //2016.05.23新增 :    private TextView mShowClarity;    private TextView mShowClarityValue;    private TextView mShowFocus;    private TextView mShowFocusValue;    private LinearLayout mLayoutShowValue;    private Bitmap mBitmap = null;    //private volatile UVCCamera mUVCCamera;      //volatile指令关键字，确保本条指令不会因编译器的优化而省略    //2016.05.30 :    private LinearLayout mShowStateValues;    private TextView mShowIOSValue;    private TextView mShowGamaValue;    private TextView mShowBrigthnessValue;    private ImageView mLocationPoint;  //获取用于计算绝对坐标系统 , 最大坐标值的view :    //  设置标尺的单位数值 :    private TextView mScaleplateValueTextView;    //2016.09.26 : 新增 : 用于显示当前拍照数量 :    private TextView mPhotoCountValueTextView;    private ImageView mPhotoCountValueColor;    private ImageView mFocusButtonDownMax;    private ImageView mFocusButtonDownMid;    private ImageView mFocusButtonDownMin;    private ImageView mFocusButtonUpMax;    private ImageView mFocusButtonUpMid;    private ImageView mFocusButtonUpMin;    private ImageView mISO_buttonDown, mISO_buttonUp;    private LinearLayout mISO_SetUp;    private ImageView mBrightness_Up_max, mBrightness_Up_mid, mBrightness_Up_min;    private ImageView mBrightness_Down_max, mBrightness_Down_mid, mBrightness_Down_min;    private RelativeLayout mBright_SetUp;    private LinearLayout mFocusButtonLayout;    //2017.02.20    private Intent start, bindIntent;    private MySpinnerAdapter sAdapter = null;    //2017.01.07 : 新增 :    private RockerView mRockerView;    //==========================================    private ExplosionView exv1;    private AnimationDrawable exa1;    //2016.08.03 : 新增 : 添加用于显示对焦图标动画的布局面    private LinearLayout mLinearLayout;    private MasterActivity activity;    private boolean mStartScroll = false;    private BaseApplication application;    private RelativeLayout masterlayout;    private CameraViewInterface mCameraView;    private boolean isCanOperation  = false;    //创建一个可重用固定线程数的线程池    //public static final ExecutorService EXECUTOR_SERVICE = Executors.newSingleThreadExecutor();    //创建一个可重用固定线程数的延时线程池    // public static final ScheduledExecutorService EXECUTOR_SERVICE_SCHEDULED = Executors.newScheduledThreadPool(4);    // public static final ScheduledExecutorService MLODINGFILE_SCHEDULED = Executors.newScheduledThreadPool(1);    // public static final ScheduledExecutorService SHODI0LOG_DELAY_SCHEDULED = Executors.newScheduledThreadPool(1);    public final int FLAG_HOMEKEY_DISPATCHED = 0x80000000; //需要自己定义标志    //2016.07.17 新增 : 用于标识当前硬件用到的物镜倍数 :    // 5 x 与 20 x物镜 :   /* public  final int OBJECTIVE_VALUE_A = 5;    //值10物镜A 的倍数 :    public  final int OBJECTIVE_VALUE_B = 20;   //值20物镜B 的倍数 :    public static final int OBJECTIVE_VALUE_C = 20;   //值20物镜C 的倍数 :    public static int[] OBJECTIVES = {OBJECTIVE_VALUE_A, OBJECTIVE_VALUE_B};*/    private WifiDirectUtils wifiDirectUtils;    private MasterIntentService.MasterActivityBinder mMasterIntentServiceBinder;    //定义一个ServiceConnection对象 :    private ServiceConnection conn = new ServiceConnection() {        //当Activity与service连接成功时 , 回调该方法:        @Override        public void onServiceConnected(ComponentName name, final IBinder service) {            //客户端：通过绑定指定的服务来获取服务端的Binder对象，然后调用IBinder接口类中的transact方法进行 远程调用。 远程通信 .            if (service != null) {                //不同进程间 , 不能直接通信 ;                mMasterIntentServiceBinder = (MasterIntentService.MasterActivityBinder) service;                mMasterIntentServiceBinder.setActivity(activity);                mMasterIntentServiceBinder.setLoginLinstness(loginCallback);            }            //     service.transact();            runOnUiThread(new Runnable() {                @Override                public void run() {                    //注册蓝牙广播                    EXECUTOR_SERVICE_SCHEDULED.schedule(new Runnable() {                        @Override                        public void run() {                            runOnUiThread(new Runnable() {                                @Override                                public void run() {                                    if (ConstantUtil.unDisplay) {                                        wifiDirectUtils = new WifiDirectUtils(MasterActivity.this);                                        wifiDirectUtils.startWifiDirect();                                        FileUtils.writeFileToLogFolder("open wifi direct");                                    }                                    if (ConstantUtil.rockerState.equals("yes"))                                        InitBlueBroacatReceive();                                }                            });                        }                    }, 3000, TimeUnit.MILLISECONDS);                }            });            //2016.09.13 :　添加开机初始化正确状态 ;            EXECUTOR_SERVICE_SCHEDULED.schedule(new Runnable() {                @Override                public void run() {                    if (mMasterIntentServiceBinder != null) {                        if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                            UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                            return;                        }                    } else {                        // UIUtil.toast(activity, "正在加载中 ! . . .", true);                        return;                    }                    mMasterIntentServiceBinder.setRocKerState(ConstantUtil.rockerState);                    int maxBrighness = mMasterIntentServiceBinder.getMaxBrighness();                    int maxISO = mMasterIntentServiceBinder.getMaxNuberType(2);                    mMaxBrightness = maxBrighness;                    mMaxISO = maxISO;                    if (mMasterIntentServiceBinder != null) {                        FileUtils.writeFileToLogFolder("设置XY偏移量、初始化激发快、物镜，复位对焦电机");                        //设置X Y 的偏移量                        mMasterIntentServiceBinder.setTranlateXY(ConstantUtil.tranlateX, ConstantUtil.tranlateY);                        //初始化激发块                        mMasterIntentServiceBinder.resetSaturationState();                        EXECUTOR_SERVICE_SCHEDULED.schedule(new Runnable() {                            @Override                            public void run() {                                //初始化物镜                                mMasterIntentServiceBinder.resetContrastState();                                EXECUTOR_SERVICE_SCHEDULED.schedule(new Runnable() {                                    @Override                                    public void run() {                                        runOnUiThread(new Runnable() {                                            @Override                                            public void run() {                                                //UIUtil.toast(activity, "获取MasterIntentService服务成功!", false);                                                //复位焦点电机                                                mMasterIntentServiceBinder.resetFocus();                                                //设置系统时间                                                if (lodingDialog.isShowing()) {                                                    lodingDialog.dismiss();                                                    lodingDialog = null;                                                }                                                if (isHaveUser()) {                                                    //选择用户                                                    selectUseUser();                                                } else {                                                    //创建用户                                                    creadUser();                                                }                                                runOnUiThread(new Runnable() {                                                    @Override                                                    public void run() {                                                        getProcessName();                                                        checkTakePhoto();                                                    }                                                });                                                AUTOCAMER_SERVICE_SCHEDULED.schedule(new Runnable() {                                                    @Override                                                    public void run() {                                                        isCanOperation = true;                                                    }                                                },8000,TimeUnit.MILLISECONDS);                                                EXECUTOR_SERVICE_SCHEDULED.schedule(new Runnable() {                                                    @Override                                                    public void run() {                                                        mMasterIntentServiceBinder.getObjectiveSwithState(true);                                                        mMasterIntentServiceBinder.sendStringToUart("4A504C591200000000000000");                                                    }                                                }, 600, TimeUnit.MILLISECONDS);                                            }                                        });                                    }                                }, 2600, TimeUnit.MILLISECONDS);                            }                        }, 600, TimeUnit.MILLISECONDS);                        //20170511                        mMasterIntentServiceBinder.sendToBackgroundProgram("autophotoview", "gone");                        //startRestartTimer();                        startTimerTask();//                    }                }            }, 3000, TimeUnit.MILLISECONDS);     // 3S后执行 , 等待后台服务连接上相机 ;        }        //当Activity与service断开连接时 , 回调该该方法 :        @Override        public void onServiceDisconnected(ComponentName name) {            //2017.02.21            if (mMasterIntentServiceBinder != null) {                mMasterIntentServiceBinder = null;            }            FileUtils.writeFileToLogFolder("远端服务已断开");            runOnUiThread(new Runnable() {                @Override                public void run() {                    UIUtil.toast(activity, "远端服务已断开", false);                }            });        }    };    /**     * ATTENTION: This was auto-generated to implement the App Indexing API.     * See https://g.co/AppIndexing/AndroidStudio for more information.     */    //private GoogleApiClient mClient;    private ProgressBar exitAppProgressBar;    private ImageView mScreenScale;    private CircularSeekBar auto_photo_SeekBar;    private TextView autoPhotoTimer, autoPhotoCNumber;    private RelativeLayout photoNumberLayout;    private ListView sateListView;    public CameraViewInterface getCameraViewInterface() {        return mCameraView;    }    public Handler getActivityAsyncShowHandler() {        return mMyHanlder;    }    private int mMaxX = 0;          //当前屏幕的最大X坐标值 ;    private int mMaxY = 0;          //当前屏幕的最大Y坐标值 ;    private float mScaleX = 0;    private float mScaleY = 0;    private Timer stTimer;    private TimerTask stTTask;    private boolean unregistWifiDirect = false;    private int delaynumer = 0;    private void displayBriefMemory() {        final ActivityManager activityManager = (ActivityManager) getSystemService(ACTIVITY_SERVICE);        ActivityManager.MemoryInfo info = new ActivityManager.MemoryInfo();        activityManager.getMemoryInfo(info);        Log.i(TAG, "系统剩余内存:" + (info.availMem >> 10) + "k");        FileUtils.writeFileToLogFolder("系统剩余内存:" + (info.availMem >> 10) + "k");        FileUtils.writeFileToLogFolder("CPU使用率:" + getTotalCpuRate());        Log.i(TAG, "系统是否处于低内存运行：" + info.lowMemory);        Log.i(TAG, "当系统剩余内存低于" + info.threshold + "时就看成低内存运行");    }    private void getMaxMemoryInfo() {        Runtime rt = Runtime.getRuntime();        long maxMemory =                rt.maxMemory();        Log.e("MaxMemory:", Long.toString(maxMemory / (1024 * 1024)));        ActivityManager activityManager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);        Log.e("MemoryClass:", Long.toString(activityManager.getMemoryClass()));        Log.e("LargeMemoryClass:", Long.toString(activityManager.getLargeMemoryClass()));    }    private float CpuRate = 0;    /**     * 获取总的CPU使用率    * @return CPU使用率     */    public static float getTotalCpuRate() {        float totalCpuTime1 = getTotalCpuTime();        float totalUsedCpuTime1 = totalCpuTime1 - sStatus.idletime;        try {            Thread.sleep(360);        } catch (InterruptedException e) {            e.printStackTrace();        }        float totalCpuTime2 = getTotalCpuTime();        float totalUsedCpuTime2 = totalCpuTime2 - sStatus.idletime;        float cpuRate = 100 * (totalUsedCpuTime2 - totalUsedCpuTime1) / (totalCpuTime2 - totalCpuTime1);        return cpuRate;    }    static Status sStatus = new Status();    static class Status {        public long usertime;        public long nicetime;        public long systemtime;        public long idletime;        public long iowaittime;        public long irqtime;        public long softirqtime;        public long getTotalTime() {            return (usertime + nicetime + systemtime + idletime + iowaittime                    + irqtime + softirqtime);        }    }    /**     * 获取系统总CPU使用时间    * @return 系统CPU总的使用时间     */    public static long getTotalCpuTime() {        String[] cpuInfos = null;        try {            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream("/proc/stat")), 1000);            String load = reader.readLine();            reader.close();            cpuInfos = load.split(" ");        } catch (IOException ex) {            ex.printStackTrace();        } //   long totalCpu = Long.parseLong(cpuInfos[2])        //       + Long.parseLong(cpuInfos[3]) + Long.parseLong(cpuInfos[4])        //       + Long.parseLong(cpuInfos[6]) + Long.parseLong(cpuInfos[5])        //       + Long.parseLong(cpuInfos[7]) + Long.parseLong(cpuInfos[8]);        sStatus.usertime = Long.parseLong(cpuInfos[2]);        sStatus.nicetime = Long.parseLong(cpuInfos[3]);        sStatus.systemtime = Long.parseLong(cpuInfos[4]);        sStatus.idletime = Long.parseLong(cpuInfos[5]);        sStatus.iowaittime = Long.parseLong(cpuInfos[6]);        sStatus.irqtime = Long.parseLong(cpuInfos[7]);        sStatus.softirqtime = Long.parseLong(cpuInfos[8]);        return sStatus.getTotalTime();    }    private Timer timer;    private TimerTask timerTask;    private void closeWPS(String packageName) {        try {            ActivityManager m = (ActivityManager) getSystemService(ACTIVITY_SERVICE);            Method method = m.getClass().getMethod("forceStopPackage", String.class);            method.setAccessible(true);            method.invoke(m, packageName);            finish();        } catch (Exception e) {            e.printStackTrace();        }    }    public String getProcessName() {        ActivityManager am = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);        List<ActivityManager.RunningAppProcessInfo> runningApps = am.getRunningAppProcesses();        if (runningApps == null) {            return null;        }        for (ActivityManager.RunningAppProcessInfo procInfo : runningApps) {            if(procInfo.processName.equals("com.yeespec.microscope.master")){                Log.w("mytestprocess", "processname=" + procInfo.processName);                Log.w("mytestprocess", "processid=" + procInfo.pid);                int pid = procInfo.pid;                if(mMasterIntentServiceBinder!=null){                    mMasterIntentServiceBinder.sendToBackgroundProgram("processid",procInfo.pid+"");                }            }        }        return null;    }    private void startRestartTimer() {        timer = new Timer();        timerTask = new TimerTask() {            @Override            public void run() {                if (mMasterIntentServiceBinder != null && !killProcess) {                    int restartState = mMasterIntentServiceBinder.getRestartState();                    //Boolean istake = SPHelper.getInstance().getBoolean("autoflag");                    if (restartState == 2) {                        FileUtils.writeFileToLogFolder("自动拍照异常，将自动重启拍照");                        //SPHelper.getInstance().putBoolean("autoflag", false);                        mMasterIntentServiceBinder.myStopBackProcess();                        try {                            Thread.sleep(2000);                        } catch (InterruptedException e) {                            e.printStackTrace();                        }                        Intent LaunchIntent = getPackageManager().getLaunchIntentForPackage(getApplication().getPackageName());                        LaunchIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                        startActivity(LaunchIntent);                        android.os.Process.killProcess(android.os.Process.myPid());                    }                }            }        };        timer.schedule(timerTask, 1000, 1000);    }    private void startTimerTask() {        stTimer = new Timer();        stTTask = new TimerTask() {            @Override            public void run() {                // displayBriefMemory();               /* float totalCpuRate = getTotalCpuRate();                //cpu使用率过高                if (CpuRate > 98 && totalCpuRate > 98) {                    mMasterIntentServiceBinder.mReStartOpenUVC();                    totalCpuRate = 0;                }                CpuRate = totalCpuRate;*/                // getMaxMemoryInfo();                //20180417                if (mMasterIntentServiceBinder != null) {                    mMasterIntentServiceBinder.isConnectCamera();                }                if (ConstantUtil.unDisplay) {                    if (wifiDirectUtils != null && WifiDirectUtils.wlanConnectSoccel && unregistWifiDirect) {                        wifiDirectUtils.unregistReciver();                        wifiDirectUtils = null;                    } else if (wifiDirectUtils != null && WifiDirectUtils.wlanConnectSoccel) {                        unregistWifiDirect = true;                    }                }                if (delaynumer == 37 && wifiDirectUtils != null) {                    wifiDirectUtils.unregistReciver();                    wifiDirectUtils = null;                    delaynumer = 0;                } else if (wifiDirectUtils != null) {                    delaynumer++;                }            }        };        stTimer.schedule(stTTask, 10000, 8000);    }    private BroadcastReceiver mBatteryReceiver = new BroadcastReceiver() {        @Override        public void onReceive(Context arg0, Intent arg1) {            int voltage = arg1.getIntExtra(BatteryManager.EXTRA_VOLTAGE, 0);            Log.w(TAG, "电压：" + voltage / 1000 + "." + voltage % 1000 + "V");            int temperature = arg1.getIntExtra(BatteryManager.EXTRA_TEMPERATURE, 0);            Log.w(TAG, "温度：" + temperature / 10 + "." + temperature % 10 + "℃");            FileUtils.writeFileToLogFolder("电压：" + voltage / 1000 + "." + voltage % 1000 + "V  " + "温度：" + temperature / 10 + "." + temperature % 10 + "℃");            int level = arg1.getIntExtra(BatteryManager.EXTRA_LEVEL, 0);            int scale = arg1.getIntExtra(BatteryManager.EXTRA_SCALE, 0);            int levelPercent = (int) (((float) level / scale) * 100);            Log.w(TAG, "电量：" + levelPercent + "%");            int status = arg1.getIntExtra(BatteryManager.EXTRA_STATUS, BatteryManager.BATTERY_STATUS_UNKNOWN);            String strStatus = "未知状态";            ;            switch (status) {                case BatteryManager.BATTERY_STATUS_CHARGING:                    strStatus = "充电中……";                    break;                case BatteryManager.BATTERY_STATUS_DISCHARGING:                    strStatus = "放电中……";                    break;                case BatteryManager.BATTERY_STATUS_NOT_CHARGING:                    strStatus = "未充电";                    break;                case BatteryManager.BATTERY_STATUS_FULL:                    strStatus = "充电完成";                    break;            }            Log.w(TAG, "状态：" + strStatus);            int health = arg1.getIntExtra(BatteryManager.EXTRA_HEALTH, BatteryManager.BATTERY_HEALTH_UNKNOWN);            String strHealth = "未知 :(";            ;            switch (status) {                case BatteryManager.BATTERY_HEALTH_GOOD:                    strHealth = "好 :)";                    break;                case BatteryManager.BATTERY_HEALTH_OVERHEAT:                    strHealth = "过热！";                    break;                case BatteryManager.BATTERY_HEALTH_DEAD: // 未充电时就会显示此状态，这是什么鬼？                    strHealth = "良好";                    break;                case BatteryManager.BATTERY_HEALTH_OVER_VOLTAGE:                    strHealth = "电压过高！";                    break;                case BatteryManager.BATTERY_HEALTH_UNSPECIFIED_FAILURE:                    strHealth = "未知 :(";                    break;                case BatteryManager.BATTERY_HEALTH_COLD:                    strHealth = "过冷！";                    break;            }            Log.w(TAG, "健康状态：" + strHealth);        }    };    private BlueBroadcastReceive blueBroadcastReceive;    private class BlueBroadcastReceive extends BroadcastReceiver {        @Override        public void onReceive(Context context, Intent intent) {            final String isconnect = intent.getStringExtra("isconnect");            if (isconnect.equals("stop")) {                ConstantUtil.CONNECT_BLUE_NAME = "";                blueUtil.shutdownClient();            }            if (isconnect.equals("connectblue")) {                String address = intent.getStringExtra("bluaddress");                //Log.i("MasterActivity","address="+address);                blueUtil.connectBluetooth(address);            }        }    }    private void InitBlueBroacatReceive() {        blueUtil = new BlueUtil(this);        blueBroadcastReceive = new BlueBroadcastReceive();        IntentFilter intentFilter = new IntentFilter();        intentFilter.addAction(ConstantUtil.DIS_CONNECT_BLUE_ACTION);        registerReceiver(blueBroadcastReceive, intentFilter);        Object blueaddress = SPUtils.get(this, "blueaddress", null);        if (blueaddress != null) {            String address = (String) blueaddress;            blueUtil.connectBluetooth(address);        } else {            blueUtil.connectBluetooth("");        }    }    private BlueUtil blueUtil;    private PowerManager powerManager = null;    private PowerManager.WakeLock wakeLock = null;    private long[] mHits = new long[3];    //如果拍照异常退出则重新启动拍照    private void checkTakePhoto() {        Boolean autoflag = SPHelper.getInstance().getBoolean("autoflag");        Boolean hawkException = Hawk.get("remote_exception", false);        Log.w("process", "autoflag=" + autoflag);        Log.w("process", "hawkException=" + hawkException);        if (hawkException) {            FileUtils.writeFileToLogFolder("APP重新启动，hawkException=true");            if (selecUserDialog.isShowing())                selecUserDialog.dismiss();            Hawk.put("remote_exception", false);        }        if (autoflag) {            FileUtils.writeFileToLogFolder("APP重新启动，autoflag=true");            if (selecUserDialog.isShowing())                selecUserDialog.dismiss();            Hawk.put("autoflag",false);            SPHelper.getInstance().putBoolean("autoflag", false);        }        if (autoflag && hawkException) {            Log.w("process", "checkTakePhoto=");            FileUtils.writeFileToLogFolder("APP重新启动，自动拍照");            ConstantUtil.isRestart = true;            if (selecUserDialog.isShowing())                selecUserDialog.dismiss();            ConstantUtil.stopAutoPhotoStr = SPHelper.getInstance().getString("stoptimershow");            ConstantUtil.ConvergenceNumber = SPHelper.getInstance().getString("convegence");            String starttime = SPHelper.getInstance().getString("starttime");            String ttime = SPHelper.getInstance().getString("ttime");            String finishtime = SPHelper.getInstance().getString("finishtime");            Log.w("process", "starttime=" + starttime);            Log.w("process", "ttime=" + ttime);            Log.w("process", "finishtime=" + finishtime);            BaseApplication.getInstance().setAutoPhoto_views(2);            BaseApplication.getInstance().setAutoPhoto_startTime(starttime);            BaseApplication.getInstance().setAutoPhoto_tTime(ttime);            BaseApplication.getInstance().setAutoPhoto_finishTime(finishtime);            boolean isautofocus = SPHelper.getInstance().getBoolean("isautofocus");            ConstantUtil.isAutofocus = isautofocus;            String moveX = SPHelper.getInstance().getString("movestatex");            String moveY = SPHelper.getInstance().getString("movestatey");            if (!moveX.equals("") && !moveY.equals("")) {                String[] splitX = moveX.split("&");                String[] splitY = moveY.split("&");                if (splitX.length > 0) {                    for (int i = 0; i < splitX.length; i++) {                        DataUtil.CheckNums[i] = true;                        DataUtil.moveSate[i][0] = Integer.parseInt(splitX[i].trim());                        DataUtil.moveSate[i][1] = Integer.parseInt(splitY[i].trim());                    }                }            }            //Toast.makeText(MasterActivity.this, "开始自动拍照", Toast.LENGTH_SHORT).show();            EXECUTOR_SERVICE_SCHEDULED.schedule(new Runnable() {                @Override                public void run() {                    startAutoTakePhoto();                }            },15*1000,TimeUnit.MILLISECONDS);        }    }    @Override    protected void onCreate(Bundle savedInstanceState) {        TAG = "MasterActivity";        FileUtils.writeFileToLogFolder("-----------------------已启动YEESPEC------------------------");        super.onCreate(savedInstanceState);        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);//设置成全屏模式        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);//强制为横屏        this.getWindow().setFlags(FLAG_HOMEKEY_DISPATCHED, FLAG_HOMEKEY_DISPATCHED);//关键代码,是屏蔽home键        getWindow().setFlags(                WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,                WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);        this.powerManager = (PowerManager) this.getSystemService(Context.POWER_SERVICE);        this.wakeLock = this.powerManager.newWakeLock(PowerManager.FULL_WAKE_LOCK, "My Lock");        setContentView(R.layout.activity_new_master);        activity = this;        if (!isWorked(MasterActivity.this, "com.yeespec.microscope.master.service.MasterIntentService")) {            Log.w(TAG, "tranlatex=" + ConstantUtil.tranlateX + "  tranlatey=" + ConstantUtil.tranlateY);            //连接蓝牙            //connectBluetooth();            //if(!ConstantUtil.unDisplay)            initBroadcast();            initAutofocusdistance();            initView();            showLodingDialog("正在加载中");            FileUtils.writeFileToLogFolder("正在加载中");            EXECUTOR_SERVICE_SCHEDULED.schedule(new Runnable() {                @Override                public void run() {                    startService();//启动服务                }            }, 3000, TimeUnit.MILLISECONDS);//3秒后启动服务            SPHelper.getInstance().init(this);            // this.registerReceiver(this.mBatteryReceiver, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));            //  mClient = new GoogleApiClient.Builder(this).addApi(AppIndex.API).build();        }    }    private void showAllView() {        long time = System.currentTimeMillis();        long timeD = time - lastClickTime;        if (timeD >= 0 && timeD <= 28000) {            lastClickTime = 0;        } else {            lastClickTime = time;            FileUtils.writeFileToLogFolder("showAllView");            Message message = new Message();            message.what = DISMISS_ALL_VIEW;            mMyHanlder.sendMessageDelayed(message, 30 * 1000);            if (rayMenu.getVisibility() == View.GONE) {                mMyHanlder.removeMessages(DISMISS_ALL_VIEW);                if (timeView.getVisibility() == View.VISIBLE) {                    mRecordView.setVisibility(View.VISIBLE);                }                if (autoPhotoTimer.getVisibility() == View.VISIBLE) {                    auto_photo_SeekBar.setVisibility(View.VISIBLE);                    auto_photo_SeekBar.setProgress(ConstantUtil.processBarAutoPhoto);                    mButtonCaptureButton.setVisibility(View.VISIBLE);                }                if (rayMenu.getVisibility() == View.GONE) {                    rayMenu.setVisibility(View.VISIBLE);                }                if (mRecordButton.getVisibility() == View.GONE) {                    mRecordButton.setVisibility(View.VISIBLE);                }                if (mStillCaptureButton.getVisibility() == View.GONE) {                    mStillCaptureButton.setVisibility(View.VISIBLE);                }                if (photoNumberLayout.getVisibility() == View.GONE) {                    photoNumberLayout.setVisibility(View.VISIBLE);                }                if (btn_photo_album.getVisibility() == View.GONE) {                    btn_photo_album.setVisibility(View.VISIBLE);                }                if (mScaleplateValueTextView.getVisibility() == View.GONE) {                    mScaleplateValueTextView.setVisibility(View.VISIBLE);                }                if (mRockerView.getVisibility() == View.GONE && ConstantUtil.rockerState.equals("yes")) {                    mRockerView.setVisibility(View.VISIBLE);                }            } else {                Message message1 = new Message();                message.what = DISMISS_ALL_VIEW;                mMyHanlder.sendMessageDelayed(message1, 30 * 1000);            }        }    }    private void initBroadcast() {        IntentFilter batteryLevelFilter = new IntentFilter(CameraServerHandler.ACTION_STATUS_CHANGED);        batteryLevelFilter.addAction(Intent.ACTION_MEDIA_EJECT);        batteryLevelFilter.addAction(Intent.ACTION_MEDIA_MOUNTED);        batteryLevelFilter.addAction(Intent.ACTION_MEDIA_REMOVED);        batteryLevelFilter.addAction(Intent.ACTION_MEDIA_UNMOUNTED);        batteryLevelFilter.addAction("take_photo_exception");        batteryLevelFilter.addDataScheme("file");        registerReceiver(batteryLevelReceiver, batteryLevelFilter);        initExceptionBC();    }    private void initExceptionBC() {        myBroadCast = new MyBroadCast();        IntentFilter eIntenFilter = new IntentFilter(CameraServerHandler.ACTION_STATUS_CHANGED);        eIntenFilter.addAction(ConstantUtil.EXCEPTION_ACTION_NAME);        registerReceiver(myBroadCast, eIntenFilter);    }    private MyBroadCast myBroadCast;    private class MyBroadCast extends BroadcastReceiver {        @Override        public void onReceive(Context context, Intent intent) {            if (intent.getAction().toString().equals(ConstantUtil.EXCEPTION_ACTION_NAME)) {                FileUtils.writeFileToLogFolder("自动拍照异常，将自动重启拍照");       //         Hawk.put("remote_exception",true);//                killProcess = true;//                ActivityManager am = (ActivityManager) getSystemService(ACTIVITY_SERVICE);//                am.killBackgroundProcesses("com.yeespec.microscope.master:yeespec_uvcservice");//                delayDestroyTimer(); //               destoryMethod();//                System.gc();//                try {//                    Thread.sleep(5000);//                } catch (InterruptedException e) {//                    e.printStackTrace();//                }//                Log.w("mytestprocess","开始重启");//                Intent LaunchIntent = getPackageManager().getLaunchIntentForPackage(getApplication().getPackageName());//                LaunchIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);//                startActivity(LaunchIntent);//                android.os.Process.killProcess(android.os.Process.myPid());//                System.gc();//                System.exit(0);            }        }    }    //配置自动对焦参数    private void initAutofocusdistance() {        File mafDirectory = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);        String autofocusdistance = FileUtils.getFileString(mafDirectory + "", "autofocusdistance.txt");        if (autofocusdistance != null && !autofocusdistance.equals("")) {            String[] autofocuss = autofocusdistance.split(",");            if (autofocuss.length > 4) {                ConstantUtil.CARRIER_STEP = Integer.valueOf(autofocuss[0].trim());//载玻片往上偏移步数                ConstantUtil.PETRIDISH_STEP = Integer.valueOf(autofocuss[1].trim());//培养皿                ConstantUtil.PLATE_STEP = Integer.valueOf(autofocuss[2].trim());//96孔板                ConstantUtil.MOVE_SPEED = Integer.valueOf(autofocuss[3].trim());//偏移速度                ConstantUtil.MAXGAMMA = Integer.valueOf(autofocuss[4].trim());//全程位移            }        }    }    private void startService() {        //在Splash页面启动时 , 启动系统的主服务 : MasterIntentService        bindIntent = new Intent(this, MasterIntentService.class);        //记得设置Intent的Action , 用于在MasterIntentService端进行判断 :        bindIntent.setAction(MasterActivity.class.getName());        //        bindService(bindIntent, conn, Service.BIND_AUTO_CREATE);        bindService(bindIntent, conn, Service.BIND_AUTO_CREATE);        startService(bindIntent);        start = new Intent(this, PowerService.class);        startService(start);        //2016.06.24 初始化self-check自检标识 :        BaseApplication.getInstance().setSelf_check(false);    }    private Boolean isHaveUser() {        Set<String> stringUserNames = getStringUserNames();        if (stringUserNames != null && stringUserNames.size() > 0) {            return true;        } else            return false;    }    //添加保存用户    private void addUerName(String uName) {        Set<String> sets = new HashSet<String>();        Set<String> stringUserName = new HashSet<String>();        stringUserName = getStringUserNames();        SharedPreferences sharedPreferences = getSharedPreferences(ConstantUtil.USEUSERNAMES_DIR, 0);        SharedPreferences.Editor editor = sharedPreferences.edit();        if (stringUserName != null) {            sets.addAll(stringUserName);        }        sets.add(uName);        editor.putStringSet(ConstantUtil.USEUSERNAMES, sets);        editor.commit();    }    //获取全部用户    private Set<String> getStringUserNames() {        Set<String> newUserNames = new HashSet<>();        Set<String> allUserName = BaseApplication.getAllUserName();        Set<String> sets = new HashSet<>();        SharedPreferences sharedPreferences = getSharedPreferences(ConstantUtil.USEUSERNAMES_DIR, 0);        sets = sharedPreferences.getStringSet(ConstantUtil.USEUSERNAMES, null);        if (sets == null || sets.size() == 0) {            return null;        }        //查找保存目录中是否还保存该用户名文件        for (int i = 0; i < allUserName.size(); i++) {            Iterator<String> iterator = allUserName.iterator();            while (iterator.hasNext()) {                String strdir = iterator.next();                Iterator<String> iterator1 = sets.iterator();                while (iterator1.hasNext()) {                    String addName = iterator1.next();                    if (strdir.equals(addName)) {                        newUserNames.add(addName);                        continue;                    }                }            }        }        return newUserNames;    }    //创建用户    private void creadUser() {        final Dialog addUserDialog = new Dialog(activity, R.style.Dialog_Radio);        addUserDialog.setContentView(R.layout.cread_user_alialog);        addUserDialog.setCancelable(false);        addUserDialog.setCanceledOnTouchOutside(false);        Button cancel = (Button) addUserDialog.findViewById(R.id.create_cancel_ad);        final TextView exportUser = (TextView) addUserDialog.findViewById(R.id.exportUser);        final Button determine = (Button) addUserDialog.findViewById(R.id.create_determine_ad);        final EditText userName = (EditText) addUserDialog.findViewById(R.id.create_user_name_ad);        determine.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                final String muser = userName.getText().toString().trim();                if (muser.length() > 50) {                    runOnUiThread(new Runnable() {                        @Override                        public void run() {                            UIUtil.toast(activity, "用户名字符长度不能超过50!", true);                        }                    });                    return;                }                if (muser == null || muser.equals("")) {                    runOnUiThread(new Runnable() {                        @Override                        public void run() {                            UIUtil.toast(activity, "用户名不能为空,请重新输入!", false);                        }                    });                } else if (BaseApplication.isExistancCurrentUser(muser)) {                    runOnUiThread(new Runnable() {                        @Override                        public void run() {                            UIUtil.toast(activity, "该用户已经存在,请重新输入!或者直接导入该用户", false);                        }                    });                } else if (muser != null) {                    addUerName(muser);                    BaseApplication.creatUser(muser);                    // new ConstantUtil(MasterActivity.this).savaCurrentUser(muser.trim());                    setNewestImage();//更新图片                    runOnUiThread(new Runnable() {                        @Override                        public void run() {                            UIUtil.toast(activity, "创建成功!=" + muser, false);                            AlertDialog.Builder builder1 = new AlertDialog.Builder(MasterActivity.this);                            final AlertDialog dialog1 = builder1.create();                            builder1.setCancelable(false);                            builder1.setTitle("创建成功!,是否退出后登录该用户");                            builder1.setNegativeButton("确认", new DialogInterface.OnClickListener() {                                @Override                                public void onClick(DialogInterface dialog, int which) {                                    isRestartApp = true;                                    BaseApplication.DIR_NAME = muser.trim();                                    ConstantUtil.savaCurrentUser(getApplicationContext(), muser.trim());                                    addUserDialog.dismiss();                                    destoryMethod();                                    //                                }                            });                            builder1.setPositiveButton("取消", new DialogInterface.OnClickListener() {                                @Override                                public void onClick(DialogInterface dialog, int which) {                                    // startService();//启动服务                                    dialog1.cancel();                                }                            });                            builder1.show();                        }                    });                    addUserDialog.dismiss();                }            }        });        cancel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                addUserDialog.dismiss();            }        });        exportUser.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String name = userName.getText().toString().trim();                if (BaseApplication.isExistancCurrentUser(name)) {                    addUerName(name);                    runOnUiThread(new Runnable() {                        @Override                        public void run() {                            UIUtil.toast(MasterActivity.this, "导入成功!您可以退出后重新登录该用户", false);                            //Toast.makeText(MasterActivity.this, "导入成功!您可以退出后重新登录该用户!", Toast.LENGTH_SHORT).show();                        }                    });                    //  addUserDialog.dismiss();                } else {                    runOnUiThread(new Runnable() {                        @Override                        public void run() {                            UIUtil.toast(MasterActivity.this, "保存目录下不存在该用户!", false);                        }                    });                }            }        });        addUserDialog.show();    }    private Dialog selecUserDialog;    private Spinner mSpinner;    //选择使用用户    private void selectUseUser() {        selecUserDialog = new Dialog(activity, R.style.Dialog_Radio);        selecUserDialog.setContentView(R.layout.select_use_user_alerlog);        selecUserDialog.setCancelable(false);        selecUserDialog.setCanceledOnTouchOutside(false);        Button determine = (Button) selecUserDialog.findViewById(R.id.select_determine_ad);        mSpinner = (Spinner) selecUserDialog.findViewById(R.id.select_Spinner);        TextView mGotoCreadUser = (TextView) selecUserDialog.findViewById(R.id.select_to_createuser_ad);        TextView deletUser = (TextView) selecUserDialog.findViewById(R.id.delet_user);        initSpinner(mSpinner);//初始化Spinner数据        //保存当前用户名        final String currentUserName = mSpinner.getSelectedItem().toString().trim();        //   new ConstantUtil(MasterActivity.this).savaCurrentUser(currentUserName);        mSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view, final int position, long id) {                String str = parent.getItemAtPosition(position).toString();            }            @Override            public void onNothingSelected(AdapterView<?> parent) {                parent.setVisibility(View.GONE);            }        });        //确认        determine.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //切换用户名为当前选择的用户名                final String currentUserName1 = mSpinner.getSelectedItem().toString().trim();                String getCureentUserName = ConstantUtil.getCurrentUserName(getApplicationContext());                //如果上次登录用户和现在选择是否一样                if (!getCureentUserName.equals(currentUserName1)) {                    AlertDialog.Builder builder1 = new AlertDialog.Builder(MasterActivity.this);                    final AlertDialog dialog1 = builder1.create();                    builder1.setCancelable(false);                    builder1.setTitle("你选择的用户与上次登录不一致,是否退出后登录该用户");                    builder1.setNegativeButton("确认", new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            isReplaceUser = true;                            BaseApplication.DIR_NAME = currentUserName1.trim();                            ConstantUtil.savaCurrentUser(getApplicationContext(), currentUserName1.trim());                            destoryMethod();                            selecUserDialog.dismiss();                        }                    });                    builder1.show();                    selecUserDialog.dismiss();                } else {                    FileUtils.writeFileToLogFolder("用户点击确认" + " showAllView");                    showAllView();                    BaseApplication.DIR_NAME = currentUserName1;                    ConstantUtil.savaCurrentUser(getApplicationContext(), currentUserName1);                    //20170511                    setNewestImage();//确认                    recolor();//更新图片                    selecUserDialog.dismiss();                }            }        });        mGotoCreadUser.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                creadUser();                selecUserDialog.dismiss();            }        });        //删除该用户        deletUser.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                final String selectstr = mSpinner.getSelectedItem().toString();                int count = sAdapter.getCount();                if (count == 1) {                    final AlertDialog.Builder builder = new AlertDialog.Builder(MasterActivity.this);                    builder.setTitle("删除最后一个用户后程序将自动退出!");                    builder.setCancelable(false);                    builder.setNegativeButton("确认", new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            destoryMethod();                            finish();                        }                    });                    builder.setPositiveButton("取消", new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            dialog.dismiss();                            return;                        }                    });                    builder.create().show();                }                Set<String> strings = new HashSet<String>();                Iterator iterator;                Set<String> stringUserNames = getStringUserNames();                for (iterator = stringUserNames.iterator(); iterator.hasNext(); ) {                    String str = (String) iterator.next();                    if (str.equals(selectstr)) {                        stringUserNames.remove(str);                        //  sAdapter.remove(str);                        strings.remove(str);                        runOnUiThread(new Runnable() {                            @Override                            public void run() {                                UIUtil.toast(MasterActivity.this, "删除了:" + selectstr, false);                            }                        });                        break;                    }                }                strings = stringUserNames;                SharedPreferences sharedPreferences = getSharedPreferences(ConstantUtil.USEUSERNAMES_DIR, 0);                SharedPreferences.Editor editor = sharedPreferences.edit();                editor.clear();                editor.putStringSet(ConstantUtil.USEUSERNAMES, strings);                editor.commit();                sAdapter.notifyDataSetChanged();                initSpinner(mSpinner);                if (sAdapter.isEmpty()) {                    selecUserDialog.dismiss();                }            }        });        selecUserDialog.show();    }    //初始化Spinner方法    private void initSpinner(Spinner spinner) {        ArrayList<String> strings = new ArrayList<String>();        Set<String> stringUserNames = getStringUserNames();        if (stringUserNames == null) {            return;        }        if (stringUserNames.size() > 0) {            Iterator iterator;            for (iterator = stringUserNames.iterator(); iterator.hasNext(); ) {                String str = (String) iterator.next();                if (str.equals("") || str == null) {                    break;                } else                    strings.add(str);            }        }        sAdapter = new MySpinnerAdapter(getApplicationContext(), strings);        spinner.setAdapter(sAdapter);        //设置spinner初值        String userName = ConstantUtil.getCurrentUserName(getApplicationContext());        if (userName == null) {            return;        }        Set<String> strs = getStringUserNames();        if (strs.size() > 0) {            Iterator iterator = strs.iterator();            int k = 0;            while (iterator.hasNext()) {                String currentName = (String) iterator.next();                if (currentName.equals(userName)) {                    spinner.setSelection(k, true);                    break;                }                k++;            }        }    }    private Dialog exporFileUserDialog;    //选择需要导出的用户    void exportSelectUser() {        exporFileUserDialog = new Dialog(activity, R.style.Dialog_Radio);        exporFileUserDialog.setContentView(R.layout.select_user_alerlog);        exporFileUserDialog.setCancelable(true);        exporFileUserDialog.setCanceledOnTouchOutside(false);        Button cancel = (Button) exporFileUserDialog.findViewById(R.id.export_cancel_ad);        Button determine = (Button) exporFileUserDialog.findViewById(R.id.export_determine_ad);        final Spinner spinner = (Spinner) exporFileUserDialog.findViewById(R.id.export_Spinner);        initSpinner(spinner);        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {            }            @Override            public void onNothingSelected(AdapterView<?> parent) {            }        });        cancel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                exporFileUserDialog.dismiss();            }        });        //确认导出文件        determine.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String userName = spinner.getSelectedItem().toString();                ConstantUtil.EXPORT_USER_NAME = userName;//获取当前需要导出用户名                FileUtils.writeFileToLogFolder("用户查选择的导出用户为：" + userName);                exporFileUserDialog.dismiss();                exporFileUserDialog = null;                mMasterIntentServiceBinder.addExportFilesItem();            }        });        exporFileUserDialog.show();    }    private void initView() {        mScreenScale = ((ImageView) findViewById(R.id.screenscale));        // 通过SurfaceView显示图像        mCameraView = (CameraViewInterface) findViewById(R.id.camera_view);        //mCameraView.setAspectRatio(UVCCamera.DEFAULT_PREVIEW_WIDTH / UVCCamera.DEFAULT_PREVIEW_HEIGHT);        WindowManager wm = this.getWindowManager();        DisplayMetrics metrics = new DisplayMetrics();        wm.getDefaultDisplay().getRealMetrics(metrics);        //2016.09.12 : 修改 : 不能直接使用 / 做除法运算 ,这是取整 , 要用包装类 ;        mCameraView.setAspectRatio(metrics.widthPixels, metrics.heightPixels); //设置视图方向比例 ;        timeView = findViewById(R.id.time_layout);        stepTimeTV = (TextView) findViewById(R.id.time_text);        //摄像        mRecordView = (ImageView) findViewById(R.id.record_button);        mRecordButton = findViewById(R.id.record_layout);        recordIconView = findViewById(R.id.record_icon);        serviceProgress = (LinearLayout) findViewById(R.id.start_service_progress);        //2016.05.27 新增 :        mLayoutShowValue = (LinearLayout) findViewById(R.id.ly_showValue);        autoPhotoTimer = ((TextView) findViewById(R.id.tv_showautophoto));        autoPhotoCNumber = ((TextView) findViewById(R.id.tv_convergence));        mStillCaptureButton = findViewById(R.id.still_layout);        mStillCaptureButton.setEnabled(true);        //mStillAutoCaptureButton=findViewById(R.id.still_layout_auto);        captureIconView = findViewById(R.id.still_icon);        captureIconView.setEnabled(true);        mButtonCaptureButton = (ImageView) findViewById(R.id.button_photo_auto);        auto_photo_SeekBar = ((CircularSeekBar) findViewById(R.id.photo_auto_SeekBar));        //设置下面的小图窗口，使用外部hierarchy2层次结构        btn_photo_album = (ImageView) findViewById(R.id.btn_photo_album);        photoNumberLayout = ((RelativeLayout) findViewById(R.id.photonumber_layout));        //2016.09.26 : 新增 : 用于显示当前拍照数量 :        mPhotoCountValueTextView = (TextView) findViewById(R.id.text_photo_count);        mPhotoCountValueColor = (ImageView) findViewById(R.id.light_info_color);        mPhotoCountValueColor.setVisibility(View.VISIBLE);        //2016.10.08 : 新增 : 对焦控制按钮 :        mFocusButtonDownMax = (ImageView) findViewById(R.id.focus_button_down_max);        mFocusButtonDownMid = (ImageView) findViewById(R.id.focus_button_down_mid);        mFocusButtonDownMin = (ImageView) findViewById(R.id.focus_button_down_min);        mFocusButtonUpMax = (ImageView) findViewById(R.id.focus_button_up_max);        mFocusButtonUpMid = (ImageView) findViewById(R.id.focus_button_up_mid);        mFocusButtonUpMin = (ImageView) findViewById(R.id.focus_button_up_min);        mFocusButtonLayout = (LinearLayout) findViewById(R.id.focus_button_layout);        //调节ISO按键        mISO_buttonDown = ((ImageView) findViewById(R.id.iso_down));        mISO_buttonUp = ((ImageView) findViewById(R.id.iso_up));        mISO_SetUp = ((LinearLayout) findViewById(R.id.iso_display_setup));        //调节bightness按键        mBright_SetUp = ((RelativeLayout) findViewById(R.id.brightness_setup_btn));        mBrightness_Down_max = ((ImageView) findViewById(R.id.brightness_button_down_max));        mBrightness_Down_mid = ((ImageView) findViewById(R.id.brightness_button_down_mid));        mBrightness_Down_min = ((ImageView) findViewById(R.id.brightness_button_down_min));        mBrightness_Up_max = ((ImageView) findViewById(R.id.brightness_button_up_max));        mBrightness_Up_mid = ((ImageView) findViewById(R.id.brightness_button_up_mid));        mBrightness_Up_min = ((ImageView) findViewById(R.id.brightness_button_up_min));        //焦点图        mLinearLayout = (LinearLayout) findViewById(R.id.focus_layout);        exv1 = new ExplosionView(this);        exv1.setVisibility(View.INVISIBLE);        //        exv1.setBackgroundResource(R.anim.explosion);        exv1.setBackgroundResource(R.drawable.explosion);        exa1 = (AnimationDrawable) exv1.getBackground();        layoutTounEnvent = (RelativeLayout) findViewById(R.id.camera_view_layout);        //        layout.addView(exv1);        mLinearLayout.addView(exv1);        mGestureDetector = new GestureDetector(this, new MyGestureListener());        mISOBrightnessLayout = findViewById(R.id.operation_ios_brightness);        mOperationBg = (ImageView) findViewById(R.id.operation_bg);        mOperationPercent = (TextView) findViewById(R.id.text_content);        //2016.05.23 新增 :        //清晰度值 :        mShowClarity = (TextView) findViewById(R.id.tv_showClarity);        mShowClarityValue = (TextView) findViewById(R.id.tv_showClarityValue);        //自动增减的Focus数值 :        mShowFocus = (TextView) findViewById(R.id.tv_showFocus);        mShowFocusValue = (TextView) findViewById(R.id.tv_showFocusValue);        //2016.05.30 新增 : 用于左下角显示当前状态配置值 :        mShowStateValues = (LinearLayout) findViewById(R.id.layout_showStateValues);        mShowIOSValue = (TextView) findViewById(R.id.tv_showIOSValue);        mShowGamaValue = (TextView) findViewById(R.id.tv_showGamaValue);        mShowBrigthnessValue = (TextView) findViewById(R.id.tv_showBrigthnessValue);        //2016.05.31 : 新增 :    用于获取计算最大坐标值的 定位图标 :        mLocationPoint = (ImageView) findViewById(R.id.im_location_point);        //2016.06.06 : 新增 : 标尺的单位数值 :        mScaleplateValueTextView = (TextView) findViewById(R.id.tv_scaleplateValue);        mScaleplateValueTextView.setOnClickListener(this);        //2017.01.07 : 新增 : 操作杆控件 :        mRockerView = (RockerView) findViewById(R.id.rockerView_rocker);        if (ConstantUtil.rockerState.equals("no")) {            mRockerView.setVisibility(View.GONE);        }        masterlayout = (RelativeLayout) findViewById(R.id.mainlayout);        initSettingButtons();        // TODO: 2016/6/21 : 调试注释        setNewestImage();        initListener();    }    //public final Bitmap BITMAP = Bitmap.createBitmap(UVCCamera.DEFAULT_PREVIEW_WIDTH, UVCCamera.DEFAULT_PREVIEW_HEIGHT, Bitmap.Config.ARGB_8888);//RGB565    //2016.06.13 新增 :    //创建几个HashSet用于判断当前选择的着色值 所连带选择的激发块 ://    //紫光激发块 ://    private Integer[] purpleArray = {0xff0000ff, 0xff0041ff, 0xff00dcff, 0xff00f1ff, 0xff00fcff, 0xff00ffff, 0xff0100ff, 0xff5f00ff, 0xff6500ff, 0xff6d00ff, 0xff7800ff, 0xff7800ff, 0xff7e00ff, 0xff8e00ff, 0xff9f00ff, 0xffad00ff, 0xffb000ff, 0xffb700ff};//    //蓝光激发块 ://    private Integer[] blueArray = {0xff00ff00, 0xff00ff33, 0xff00ff52, 0xff00ff68, 0xff00ff7b, 0xff00ff8b, 0xff00ff9a, 0xff00ffb5, 0xffa5ff00, 0xffb7ff00};//    //蓝光激发块 ://    private Integer[] greenArray = {0xffff0000, 0xffff4200, 0xffff6f00, 0xffff7800, 0xffffa500, 0xffffbf00, 0xffefff00, 0xffffb200, 0xffffcb00, 0xffffdd00, 0xffffe200, 0xffffee00, 0xfffff900, 0xfffffe00, 0xffffff00};//    //白光 ://    private Integer[] whiteArray = {0xffffffff};    //private Set<Integer> mPurpleArraySet = new HashSet<Integer>(Arrays.asList(purpleArray));    // private Set<Integer> mBlueArraySet = new HashSet<Integer>(Arrays.asList(blueArray));    // private Set<Integer> mGreenArraySet = new HashSet<Integer>(Arrays.asList(greenArray));    //private Set<Integer> mWhiteArraySet = new HashSet<Integer>(Arrays.asList(whiteArray));    private void recolor() {        int color = BaseApplication.getInstance().getRecolor();        int preColor = BaseApplication.getInstance().getPreRecolor();        Integer colorInteger = Integer.valueOf(color);        if (mMasterIntentServiceBinder != null) {            if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                return;            }        } else {            // UIUtil.toast(activity, "正在加载中 ! . . .", true);            return;        }        if (mMasterIntentServiceBinder.isCameraClientNotNull()) {            //if color changed            if (preColor != color) {                mMasterIntentServiceBinder.clientColor(color);                //SPUtils.put(activity, "preRecolor", color);                BaseApplication.getInstance().setPreRecolor(color);            }        }    }    // 子按钮标记倍数    private TextView secondSettingMultiple;    // 子按钮标记颜色    private ImageView secondSettingColor;    // 主按钮    private RayMenu rayMenu;    //不开启摇杆    private final int[] SETTING_ITEM_DRAWABLES = {R.mipmap.light, R.mipmap.enlarge, R.mipmap.autofocus, R.mipmap.export, R.mipmap.convergence_rate, R.mipmap.more};    //开启摇杆    private final int[] SETTING_ITEM_DRAWABLES_TWO = {R.mipmap.light, R.mipmap.enlarge, R.mipmap.autofocus, R.mipmap.export, R.mipmap.contrast, R.mipmap.convergence_rate, R.mipmap.more};    //LONZA 没有物镜切换 不开启摇杆    private final int[] SETTING_ITEM_DRAWABLES_TREE = {R.mipmap.light, R.mipmap.autofocus, R.mipmap.export, R.mipmap.convergence_rate, R.mipmap.more};    private void initSettingButtons() {        if (rayMenu == null)            rayMenu = (RayMenu) findViewById(R.id.ray_menu);        rayMenu.setHideAfterClick(false);        int itemCount = 0;        int count = 0;        if (ConstantUtil.LONZA) {            itemCount = SETTING_ITEM_DRAWABLES_TREE.length;        } else {            //如果开启摇杆            if (ConstantUtil.rockerState.equals("yes")) {                itemCount = SETTING_ITEM_DRAWABLES_TWO.length;            } else {                itemCount = SETTING_ITEM_DRAWABLES.length;                count = 1;            }        }        for (int i = 0; i < itemCount; i++) {            final View view = getLayoutInflater().inflate(R.layout.item_setting_button, null);            if (ConstantUtil.LONZA) {                view.findViewById(R.id.image_view).setBackgroundResource(SETTING_ITEM_DRAWABLES_TREE[i]);            } else {                if (ConstantUtil.rockerState.equals("yes")) {                    view.findViewById(R.id.image_view).setBackgroundResource(SETTING_ITEM_DRAWABLES_TWO[i]);                } else {                    view.findViewById(R.id.image_view).setBackgroundResource(SETTING_ITEM_DRAWABLES[i]);                }            }            View extraView = view.findViewById(R.id.extra_layout);            if (i == 3 || i == 4 || i == 2 || i == 5 || i == 6) {                extraView.setVisibility(View.GONE);                //                if (ConstantUtil.LONZA) {                    if (i == 4) {                        rayMenu.addItem(view, new View.OnClickListener() {                            @Override                            public void onClick(View v) {                                if (mMasterIntentServiceBinder != null) {                                    FileUtils.writeFileToLogFolder("用户打开更多的设置页面");                                    mMasterIntentServiceBinder.getObjectiveSwithState(false);//关闭串口动作限制                                    mMasterIntentServiceBinder.addMoreSettingItem();                                    //       startActivity(mMasterIntentServiceBinder.getSettingActivityIntent());                                } else {                                    //  UIUtil.toast(activity, "正在加载中 ! . . .", true);                                    return;                                }                            }                        });// Add a menu item                    } else if (i == 3) {                        // 细胞生长记录                        rayMenu.addItem(view, new View.OnClickListener() {                            @Override                            public void onClick(View v) {                                FileUtils.writeFileToLogFolder("用户查看了细胞汇合率");                                showGrothRate();                            }                        });                    } else {                        rayMenu.addItem(view, new View.OnClickListener() {                            @Override                            public void onClick(View v) {                                if (ConstantUtil.isExport) {                                    UIUtil.toast(activity, "正在导出，请等待完成 ! ", true);                                    return;                                }                                if (mMasterIntentServiceBinder != null) {                                    if (!ConstantUtil.isAutoPhotoFinish) {                                        UIUtil.toast(activity, "请停止自动拍照后再操作 ! ", true);                                        return;                                    }                                    exportSelectUser();                                } else {                                    return;                                }                            }                        });                    }                } else {                    //索引为3 的是导出选项设置 :                    if (i == 3) {                        rayMenu.addItem(view, new View.OnClickListener() {                            @Override                            public void onClick(View v) {                                if (ConstantUtil.isExport) {                                    UIUtil.toast(activity, "正在导出，请等待完成 ! ", true);                                    return;                                }                                if (mMasterIntentServiceBinder != null) {                                    if (!ConstantUtil.isAutoPhotoFinish) {                                        UIUtil.toast(activity, "请停止自动拍照后再操作 ! ", true);                                        return;                                    }                                    exportSelectUser();                                } else {                                    // UIUtil.toast(activity, "正在加载中 ! . . .", true);                                    return;                                }                            }                        });                    } else if (i == (5 - count)) {                        // 细胞生长记录                        rayMenu.addItem(view, new View.OnClickListener() {                            @Override                            public void onClick(View v) {                                FileUtils.writeFileToLogFolder("用户查看了细胞汇合率");                                showGrothRate();                            }                        });                    }                    //索引为4 的是弹出显示更多的 选项设置 :                    else if (i == (6 - count)) {                        rayMenu.addItem(view, new View.OnClickListener() {                            @Override                            public void onClick(View v) {                                if (mMasterIntentServiceBinder != null) {                                    FileUtils.writeFileToLogFolder("用户打开更多的设置页面");                                    mMasterIntentServiceBinder.getObjectiveSwithState(false);//关闭串口动作限制                                    mMasterIntentServiceBinder.addMoreSettingItem();                                    //       startActivity(mMasterIntentServiceBinder.getSettingActivityIntent());                                } else {                                    //  UIUtil.toast(activity, "正在加载中 ! . . .", true);                                    return;                                }                            }                        });// Add a menu item                    }// 索引4为自动拍照对照组定位                    else if (i == (4 - count)) {                        rayMenu.addItem(view, new View.OnClickListener() {                            @Override                            public void onClick(View v) {                                FileUtils.writeFileToLogFolder("用户打开了对照组定位设置");                                showAutoPhotoSateXY(v);                            }                        });                    } else {//自动对焦设置                        rayMenu.addItem(view, new View.OnClickListener() {                            @Override                            public void onClick(View v) {                                if (!ConstantUtil.isAutoPhotoFinish) {                                    UIUtil.toast(activity, "请停止自动拍照后再操作 ! ", true);                                    return;                                }                                showAutoFocusPopupWindow(v);                            }                        });// Add a menu item                    }                }            } else {                extraView.setVisibility(View.VISIBLE);                //索引为1 的是 物镜倍数选择 : 10x / 20x :                if (i == 1) {                    if (ConstantUtil.LONZA) {                        extraView.setVisibility(View.GONE);                        rayMenu.addItem(view, new View.OnClickListener() {                            @Override                            public void onClick(View v) {                                if (!ConstantUtil.isAutoPhotoFinish) {                                    UIUtil.toast(activity, "请停止自动拍照后再操作 ! ", true);                                    return;                                }                                showAutoFocusPopupWindow(v);                            }                        });// Add a menu item                    } else {                        int mul = BaseApplication.getInstance().getContrast();                        boolean isexistmul = false;                        for (int i1 = 0; i1 < ConstantUtil.OBJECTIVES.length; i1++) {                            if (mul == ConstantUtil.OBJECTIVES[i]) {                                isexistmul = true;                                break;                            }                        }                        //如果发生不存在倍数物镜则改为OBJECTIVES[0]                        if (!isexistmul) {                            mul = ConstantUtil.OBJECTIVES[0];                        }                        secondSettingMultiple = (TextView) view.findViewById(R.id.text_multiple);                        secondSettingMultiple.setVisibility(View.VISIBLE);                        secondSettingMultiple.setText(mul + "X");                        rayMenu.getMasterSettingMultiple().setText(mul + "X");                        //2016.11.25 : 新增 : 用于拍照名字记录信息 ;                        BaseApplication.getInstance().setCurrentContrast(mul);                        view.findViewById(R.id.light_info).setVisibility(View.GONE);                        //添加点击事件 :                        rayMenu.addItem(view, new View.OnClickListener() {                            @Override                            public void onClick(View v) {                                if (mMasterIntentServiceBinder != null) {                                    if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                                        UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                                        return;                                    }                                } else {                                    // UIUtil.toast(activity, "正在加载中 ! . . .", true);                                    return;                                }                                //只有两个物镜                                if (ConstantUtil.OBJECTIVES.length == 2) {                                    if(!isCanOperation){                                        UIUtil.toast(activity, "机器正忙中，请稍等 ! ", true);                                        return;                                    }                                    if (mMasterIntentServiceBinder.getObjectiveSwithState(true)) {                                        UIUtil.toast(activity, "机器正忙，请稍等 ! ", true);                                        return;                                    }                                    if (!ConstantUtil.isAutoPhotoFinish) {                                        UIUtil.toast(activity, "请停止自动拍照后再操作 ! ", true);                                        return;                                    }                                    if (!ConstantUtil.isAutoFocusFinish) {                                        UIUtil.toast(activity, "请停止自动对焦后再操作 ! ", true);                                        return;                                    }                                    mMasterIntentServiceBinder.changeContrastState();                                } else {//三个物镜                                    showObjectivePopupWindow(view);                                }                            }                        });// Add a menu item                    }                    // 倍数监听                }                //索引为0 的是激发块和灯光着色选择 :                else {                    secondSettingColor = (ImageView) view.findViewById(R.id.light_info);                    view.findViewById(R.id.text_multiple).setVisibility(View.GONE);                    secondSettingColor.setVisibility(View.VISIBLE);                    int saturation = BaseApplication.getInstance().getSaturation();                    //2016.08.01 修改新增 : 设置激发块灯光的颜色状态 :                    setCurrentSaturationState(saturation);                    // 灯监听                    rayMenu.addItem(view, new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            //2016.10.24 : 新增修改 ：                            showPopupWindow(v);   //多激发块 ;                            //                            mMasterIntentServiceBinder.changeSaturationState(); //2016.12.30 单明场                        }                    });// Add a menu item                }            }        }    }    private PopupWindow satePop;    private Contrack_Set_Adapter contrackAdapter;    private List<Integer> integers = new ArrayList<>();    private GrothRateDialog grothRateDialog;    private String getLastConverGence() {        String intevalAndPercentage = ConstantUtil.intevalAndPercentage;        String spustr = (String) SPUtils.get(this, "percentage", null);        if (intevalAndPercentage == null) {            if (spustr == null) {                return "";            } else {                intevalAndPercentage = spustr;            }        }        String[] strings = intevalAndPercentage.split("&");        if (strings == null) {            return "";        } else {            return "" + strings[strings.length - 1];        }    }    private void showGrothRate() {        integers.clear();        int mInteval = 10;        String intevalAndPercentage = ConstantUtil.intevalAndPercentage;        String spustr = (String) SPUtils.get(this, "percentage", null);        if (intevalAndPercentage == null) {            if (spustr == null) {                UIUtil.toast(MasterActivity.this, "暂无数据！", true);                return;            } else {                intevalAndPercentage = spustr;            }        }        String[] strings = intevalAndPercentage.split("&");        if (strings == null)            return;        for (int i = 0; i < strings.length; i++) {            if (i == 0) {                mInteval = Integer.valueOf(strings[0]);            } else {                int it = Integer.valueOf(strings[i]);                integers.add(it);            }        }        if (grothRateDialog != null) {            if (grothRateDialog.isShowing())                grothRateDialog.dismiss();            grothRateDialog = null;        }        grothRateDialog = new GrothRateDialog(MasterActivity.this, 3, integers, mInteval);        grothRateDialog.setCancelable(true);        grothRateDialog.setCanceledOnTouchOutside(true);        grothRateDialog.show();    }    private void showAutoPhotoSateXY(View v) {        View sateview = LayoutInflater.from(activity).inflate(R.layout.autophoto_pop_sate, null);        sateListView = ((ListView) sateview.findViewById(R.id.sate_listview));        String[] strs = new String[DataUtil.CONTRACKCOUNT];        for (int i = 0; i < strs.length; i++) {            strs[i] = "第" + (i + 1) + "组:";        }        contrackAdapter = new Contrack_Set_Adapter(getApplicationContext(), strs, DataUtil.CheckNums);        sateListView.setAdapter(contrackAdapter);        sateListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                boolean b = contrackAdapter.setSelectPosition(position);                if (mMasterIntentServiceBinder != null) {                    mMasterIntentServiceBinder.sendToBackgroundProgram(DataUtil.CONTRASTKEY, position + "&" + b);                }            }        });        WindowManager windowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);        int xPos = windowManager.getDefaultDisplay().getWidth() / 5;        int yPos = windowManager.getDefaultDisplay().getHeight() / 30 * 6;        satePop = new PopupWindow(sateview,                xPos, yPos, true);        satePop.setTouchable(true);        // 如果不设置PopupWindow的背景，无论是点击外部区域还是Back键都无法dismiss弹框        satePop.setBackgroundDrawable(getResources().getDrawable(                R.drawable.toast_background));        // 设置好参数之后再show        satePop.showAsDropDown(v);    }    private PopupWindow popupWindow;    private View popupWindowView;    private PopupWindow autofocuspopupWindow;    private SaturationLightAdapter mSaturationLightAdapter;    private TextView carrier_tv, petridish_tv, plate_tv;    private PopupWindow objectivepopupWindow;    private ImageView objectiveMid, objectiveMin, objectiveMax;    private TextView oMidTv, oMinTv, oMaxTv;    private void showObjectivePopupWindow(View view) {        // 一个自定义的布局，作为显示的内容        View contentView = LayoutInflater.from(activity).inflate(                R.layout.objectivepop_window, null);        objectiveMax = (ImageView) contentView.findViewById(R.id.objective_max);        objectiveMid = (ImageView) contentView.findViewById(R.id.objective_mid);        objectiveMin = (ImageView) contentView.findViewById(R.id.objective_min);        oMinTv = (TextView) contentView.findViewById(R.id.objective_min_tv);        oMidTv = (TextView) contentView.findViewById(R.id.objective_mid_tv);        oMaxTv = (TextView) contentView.findViewById(R.id.objective_max_tv);        objectiveMid.setBackgroundColor(getResources().getColor(R.color.WHITE));        objectiveMin.setBackgroundColor(getResources().getColor(R.color.WHITE));        objectiveMax.setBackgroundColor(getResources().getColor(R.color.WHITE));        int multiple = BaseApplication.getInstance().getContrast();        boolean isexistmul = false;        for (int i1 = 0; i1 < ConstantUtil.OBJECTIVES.length; i1++) {            if (multiple == ConstantUtil.OBJECTIVES[i1]) {                isexistmul = true;                break;            }        }        //如果发生不存在倍数物镜则改为OBJECTIVES[0]        if (!isexistmul) {            multiple = ConstantUtil.OBJECTIVES[0];        }        if (ConstantUtil.OBJECTIVES.length <= 0) {            return;        }        oMinTv.setText(ConstantUtil.OBJECTIVES[0] + "X");        oMidTv.setText(ConstantUtil.OBJECTIVES[1] + "X");        oMaxTv.setText(ConstantUtil.OBJECTIVES[2] + "X");        //初始化        for (int i = 0; i < ConstantUtil.OBJECTIVES.length; i++) {            if (multiple == ConstantUtil.OBJECTIVES[i]) {                switch (i) {                    case 0:                        objectiveMin.setBackgroundColor(getResources().getColor(R.color.GRAY));                        break;                    case 1:                        objectiveMid.setBackgroundColor(getResources().getColor(R.color.GRAY));                        break;                    case 2:                        objectiveMax.setBackgroundColor(getResources().getColor(R.color.GRAY));                        break;                }            }        }        objectiveMin.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if(!isCanOperation){                    UIUtil.toast(activity, "机器正忙中，请稍等 ! ", true);                    return;                }                if (mMasterIntentServiceBinder.getObjectiveSwithState(true)) {                    UIUtil.toast(activity, "机器正忙，请稍等 ! ", true);                    return;                }                if (!ConstantUtil.isAutoPhotoFinish) {                    UIUtil.toast(activity, "请停止自动拍照后再操作 ! ", true);                    return;                }                if (!ConstantUtil.isAutoFocusFinish) {                    UIUtil.toast(activity, "请停止自动对焦后再操作 ! ", true);                    return;                }                objectiveMid.setBackgroundColor(getResources().getColor(R.color.WHITE));                objectiveMin.setBackgroundColor(getResources().getColor(R.color.GRAY));                objectiveMax.setBackgroundColor(getResources().getColor(R.color.WHITE));                int objective = ConstantUtil.OBJECTIVES[0];                mMasterIntentServiceBinder.msetContrastState(objective);                if (objectivepopupWindow != null) {                    objectivepopupWindow.dismiss();                }            }        });        objectiveMid.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (!ConstantUtil.isAutoPhotoFinish) {                    UIUtil.toast(activity, "请停止自动拍照后再操作 ! ", true);                    return;                }                if (mMasterIntentServiceBinder.getObjectiveSwithState(true)) {                    UIUtil.toast(activity, "机器正忙，请稍等 ! ", true);                    return;                }                objectiveMid.setBackgroundColor(getResources().getColor(R.color.GRAY));                objectiveMin.setBackgroundColor(getResources().getColor(R.color.WHITE));                objectiveMax.setBackgroundColor(getResources().getColor(R.color.WHITE));                int objective = ConstantUtil.OBJECTIVES[1];                mMasterIntentServiceBinder.msetContrastState(objective);                if (objectivepopupWindow != null) {                    objectivepopupWindow.dismiss();                }            }        });        objectiveMax.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (!ConstantUtil.isAutoPhotoFinish) {                    UIUtil.toast(activity, "请停止自动拍照后再操作 ! ", true);                    return;                }                if (mMasterIntentServiceBinder.getObjectiveSwithState(true)) {                    UIUtil.toast(activity, "机器正忙，请稍等 ! ", true);                    return;                }                objectiveMid.setBackgroundColor(getResources().getColor(R.color.WHITE));                objectiveMin.setBackgroundColor(getResources().getColor(R.color.WHITE));                objectiveMax.setBackgroundColor(getResources().getColor(R.color.GRAY));                int objective = ConstantUtil.OBJECTIVES[2];                mMasterIntentServiceBinder.msetContrastState(objective);                if (objectivepopupWindow != null) {                    objectivepopupWindow.dismiss();                }            }        });        WindowManager windowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);        int xPos = windowManager.getDefaultDisplay().getWidth() / 5;        int yPos = windowManager.getDefaultDisplay().getHeight() / 30 * 6;        objectivepopupWindow = new PopupWindow(contentView,                xPos, yPos, true);        objectivepopupWindow.setTouchable(true);        // 如果不设置PopupWindow的背景，无论是点击外部区域还是Back键都无法dismiss弹框        objectivepopupWindow.setBackgroundDrawable(getResources().getDrawable(                R.drawable.toast_background));        // 设置好参数之后再show        objectivepopupWindow.showAsDropDown(view);    }    private void showAutoFocusPopupWindow(View view) {        // 一个自定义的布局，作为显示的内容        View contentView = LayoutInflater.from(activity).inflate(                R.layout.autofocuspop_window, null);        carrier_tv = (TextView) contentView.findViewById(R.id.carrier_tv);        petridish_tv = (TextView) contentView.findViewById(R.id.petridish_tv);        plate_tv = (TextView) contentView.findViewById(R.id.plate_tv);        int checkAutofocus = ConstantUtil.CHECK_AUTOFOCUS;        switch (checkAutofocus) {            case 0://默认为载玻片                carrier_tv.setTextColor(getResources().getColor(R.color.ORANGERED));                break;            case 1:                carrier_tv.setTextColor(getResources().getColor(R.color.ORANGERED));                break;            case 2:                petridish_tv.setTextColor(getResources().getColor(R.color.ORANGERED));                break;            case 3:                plate_tv.setTextColor(getResources().getColor(R.color.ORANGERED));                break;        }        carrier_tv.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                ConstantUtil.CHECK_AUTOFOCUS = 1;                if (mMasterIntentServiceBinder != null)                    mMasterIntentServiceBinder.sendToBackgroundProgram("check_aotufocus_object", ConstantUtil.CHECK_AUTOFOCUS + "");                carrier_tv.setTextColor(getResources().getColor(R.color.ORANGERED));                petridish_tv.setTextColor(getResources().getColor(R.color.BLACK));                plate_tv.setTextColor(getResources().getColor(R.color.BLACK));                if (autofocuspopupWindow != null) {                    autofocuspopupWindow.dismiss();                }            }        });        petridish_tv.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                ConstantUtil.CHECK_AUTOFOCUS = 2;                if (mMasterIntentServiceBinder != null)                    mMasterIntentServiceBinder.sendToBackgroundProgram("check_aotufocus_object", ConstantUtil.CHECK_AUTOFOCUS + "");                carrier_tv.setTextColor(getResources().getColor(R.color.BLACK));                petridish_tv.setTextColor(getResources().getColor(R.color.ORANGERED));                plate_tv.setTextColor(getResources().getColor(R.color.BLACK));                if (autofocuspopupWindow != null) {                    autofocuspopupWindow.dismiss();                }            }        });        plate_tv.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                ConstantUtil.CHECK_AUTOFOCUS = 3;                if (mMasterIntentServiceBinder != null)                    mMasterIntentServiceBinder.sendToBackgroundProgram("check_aotufocus_object", ConstantUtil.CHECK_AUTOFOCUS + "");                carrier_tv.setTextColor(getResources().getColor(R.color.BLACK));                petridish_tv.setTextColor(getResources().getColor(R.color.BLACK));                plate_tv.setTextColor(getResources().getColor(R.color.ORANGERED));                if (autofocuspopupWindow != null) {                    autofocuspopupWindow.dismiss();                }            }        });        FileUtils.writeFileToLogFolder("用户打开了设置自动对焦的方式：" + ConstantUtil.CHECK_AUTOFOCUS + "(1:载玻片 2：培养皿 3：培养板)");        WindowManager windowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);        int xPos = windowManager.getDefaultDisplay().getWidth() / 12 * 4;        int yPos = windowManager.getDefaultDisplay().getHeight() / 6;        autofocuspopupWindow = new PopupWindow(contentView,                xPos, yPos, true);        autofocuspopupWindow.setTouchable(true);        // 如果不设置PopupWindow的背景，无论是点击外部区域还是Back键都无法dismiss弹框        autofocuspopupWindow.setBackgroundDrawable(getResources().getDrawable(                R.drawable.toast_background));        // 设置好参数之后再show        autofocuspopupWindow.showAsDropDown(view);    }    /**     * 显示     *     * @param parent     */    private void showPopupWindow(View parent) {        if (popupWindow == null) {            LayoutInflater layoutInflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);            popupWindowView = layoutInflater.inflate(R.layout.popup_window_saturation_select, null);            GridView gridView = (GridView) popupWindowView.findViewById(R.id.grid_view);            switch (ConstantUtil.LIGHTSCOUNT) {                case 1:                    gridView.setNumColumns(2);                    break;                case 2:                    gridView.setNumColumns(3);                    break;                case 3:                    gridView.setNumColumns(4);                    break;                case 4:                    gridView.setNumColumns(4);                    break;            }            if (mSaturationLightAdapter == null) {                mSaturationLightAdapter = new SaturationLightAdapter(getApplicationContext(), ConstantUtil.LIGHTSCOUNT, ConstantUtil.LIGHTTYPE);            } else if (0 == mSaturationLightAdapter.getCount()) {                mSaturationLightAdapter = new SaturationLightAdapter(getApplicationContext(), ConstantUtil.LIGHTSCOUNT, ConstantUtil.LIGHTTYPE);            }            gridView.setAdapter(mSaturationLightAdapter);            mSaturationLightAdapter.notifyDataSetChanged();            gridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {                @Override                public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                    if(!isCanOperation){                        UIUtil.toast(activity, "机器正忙中，请稍等 ! ", true);                        return;                    }                    if (!ConstantUtil.isAutoPhotoFinish) {                        UIUtil.toast(activity, "请停止自动拍照后再操作 ! ", true);                        return;                    }                    if (mMasterIntentServiceBinder.getObjectiveSwithState(true)) {                        UIUtil.toast(activity, "机器正忙中，请稍等 ! ", true);                        return;                    }                    if (!ConstantUtil.isAutoFocusFinish) {                        UIUtil.toast(activity, "请停止自动对焦后再操作 ! ", true);                        return;                    }                    int saturation = BaseApplication.getInstance().getSaturation();                    int saturationLightSel = mSaturationLightAdapter.getColor(position);                    //如果有显示关灯按键                    if (ConstantUtil.LIGHTSCOUNT < 4) {                        if (saturationLightSel == 5)//5是关灯                            saturationLightSel = 0;                    }                    if (saturation == saturationLightSel) {                        UIUtil.toast(getApplicationContext(), "该激发光当前已选，请选择其他饱和光", true);                        return;                    } else {                        if (mMasterIntentServiceBinder != null) {                            if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                                UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                                return;                            }                        } else {                            //UIUtil.toast(activity, "正在加载中 ! . . .", true);                            return;                        }                        //2016.08.02 : 修改 :                        mMasterIntentServiceBinder.setSaturationState(saturationLightSel);                        BaseApplication.getInstance().setSaturation(saturationLightSel);                        BaseApplication.getInstance().setSaturation_pos(position);                        FileUtils.writeFileToLogFolder("用户选择了激发快为：" + saturationLightSel + "(1:白 2：绿  3：蓝 4 紫)");                    }                    mSaturationLightAdapter.notifyDataSetChanged();                    if (popupWindow != null) {                        popupWindow.dismiss();                    }                }            });            WindowManager windowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);            int xPos = 0;            if (ConstantUtil.LIGHTSCOUNT == 1) {                xPos = windowManager.getDefaultDisplay().getWidth() / 8;            } else if (ConstantUtil.LIGHTSCOUNT == 2) {                xPos = windowManager.getDefaultDisplay().getWidth() / 36 * 7;            } else if (ConstantUtil.LIGHTSCOUNT == 3) {                xPos = windowManager.getDefaultDisplay().getWidth() / 4;            } else                xPos = windowManager.getDefaultDisplay().getWidth() / 4;            int yPos = windowManager.getDefaultDisplay().getHeight() / 6;            // 创建一个PopuWidow对象            popupWindow = new PopupWindow(popupWindowView, xPos, yPos);        }        // 使其聚集        popupWindow.setFocusable(true);        // 设置允许在外点击消失        popupWindow.setOutsideTouchable(true);        // 这个是为了点击"返回Back"也能使其消失，并且并不会影响你的背景        popupWindow.setBackgroundDrawable(new BitmapDrawable());        popupWindow.showAsDropDown(parent, 15, 0);        // popupWindow.showAsDropDown(parent);    }    //2016.08.01 修改新增 : 设置激发块灯光的颜色状态 :    private void setCurrentSaturationState(int saturation) {        switch (saturation) {            //饱和灯光 颜色 : 白色            case MasterIntentService.LIGHT_SATURATION_WHITE:                rayMenu.getMasterSettingMultiple().setTextColor(getResources().getColor(R.color.BLACK));                rayMenu.getMasterSettingColor().setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_white));                secondSettingColor.setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_white));                //2016.11.25 : 新增 : 用于拍照名字记录信息 ;                ConstantUtil.SaturationString = "WhiteLight";                // SPUtils.put(getApplicationContext(), "currentSaturationString", "WhiteLight");                //BaseApplication.getInstance().setCurrentSaturationString("WhiteLight");                break;            //饱和灯光 颜色 : 蓝色            case MasterIntentService.LIGHT_SATURATION_BLUE:                rayMenu.getMasterSettingMultiple().setTextColor(getResources().getColor(R.color.WHITE));                rayMenu.getMasterSettingColor().setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_blue));                secondSettingColor.setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_blue));                //2016.11.25 : 新增 : 用于拍照名字记录信息 ;                ConstantUtil.SaturationString = "BlueLight";                // SPUtils.put(getApplicationContext(), "currentSaturationString", "BlueLight");                //BaseApplication.getInstance().setCurrentSaturationString("BlueLight");                break;            //饱和灯光 颜色 : 黑色            case MasterIntentService.LIGHT_SATURATION_BLACK:                rayMenu.getMasterSettingMultiple().setTextColor(getResources().getColor(R.color.WHITE));                rayMenu.getMasterSettingColor().setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_black));                secondSettingColor.setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_black));                //2016.11.25 : 新增 : 用于拍照名字记录信息 ;                ConstantUtil.SaturationString = "BlackLight";                //SPUtils.put(getApplicationContext(), "currentSaturationString", "BlackLight");                // BaseApplication.getInstance().setCurrentSaturationString("BlackLight");                break;            //饱和灯光 颜色 : 绿色            case MasterIntentService.LIGHT_SATURATION_GREEN:                rayMenu.getMasterSettingMultiple().setTextColor(getResources().getColor(R.color.BLACK));                rayMenu.getMasterSettingColor().setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_raymenu_light_green));                secondSettingColor.setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_raymenu_light_green));                //2016.11.25 : 新增 : 用于拍照名字记录信息 ;                ConstantUtil.SaturationString = "GreenLight";                //SPUtils.put(getApplicationContext(), "currentSaturationString", "GreenLight");                break;            //2016.06.08 : 新增 :            //饱和灯光 颜色 : 紫色            case MasterIntentService.LIGHT_SATURATION_PURPLE:                rayMenu.getMasterSettingMultiple().setTextColor(getResources().getColor(R.color.WHITE));                rayMenu.getMasterSettingColor().setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_purple));                secondSettingColor.setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_purple));                //2016.11.25 : 新增 : 用于拍照名字记录信息 ;                ConstantUtil.SaturationString = "PurpleLight";                //SPUtils.put(getApplicationContext(), "currentSaturationString", "PurpleLight");                break;        }    }    private boolean programSelfCheck = false;    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.create_determine_ad:                break;            case R.id.tv_scaleplateValue: //程序开始自检                if (ConstantUtil.IS_SELF_CHECK) {                    System.arraycopy(mHits, 1, mHits, 0, mHits.length - 1);                    mHits[mHits.length - 1] = SystemClock.uptimeMillis();                    if (mHits[0] >= (SystemClock.uptimeMillis() - 500)) {                        if (mMasterIntentServiceBinder != null) {                            for (int i = 0; i < mHits.length; i++) {                                mHits[i] = 0;                            }                            mMasterIntentServiceBinder.startProgramSelfCheck();                        }                    }                }                break;        }    }    /**     * ATTENTION: This was auto-generated to implement the App Indexing API.     * See https://g.co/AppIndexing/AndroidStudio for more information.     */    public Action getIndexApiAction() {        Thing object = new Thing.Builder()                .setName("Master Page") // TODO: Define a title for the content shown.                // TODO: Make sure this auto-generated URL is correct.                .setUrl(Uri.parse("http://[ENTER-YOUR-URL-HERE]"))                .build();        return new Action.Builder(Action.TYPE_VIEW)                .setObject(object)                .setActionStatus(Action.STATUS_TYPE_COMPLETED)                .build();    }    @Override    public void onStop() {        super.onStop();        // ATTENTION: This was auto-generated to implement the App Indexing API.        // See https://g.co/AppIndexing/AndroidStudio for more information.//        AppIndex.AppIndexApi.end(mClient, getIndexApiAction());//        mClient.disconnect();    }    @Override    protected void onNewIntent(Intent intent) {        super.onNewIntent(intent);        //Object photo_views = SPUtils.get(getBaseContext(), "autoPhoto_views", 0);        if (BaseApplication.getInstance().getAutoPhoto_views() == 2) {            if (mMasterIntentServiceBinder != null)                mMasterIntentServiceBinder.sendToBackgroundProgram("autophotoview", "prepare");        }        //20170511        setNewestImage();        recolor();        showAllView();        FileUtils.writeFileToLogFolder("onNewIntent" + " showAllView");        if (ConstantUtil.UVCServiceConnectStion == 3) {            int saturation = BaseApplication.getInstance().getSaturation();            mMasterIntentServiceBinder.setSaturation(saturation);            EXECUTOR_SERVICE_SCHEDULED.schedule(new Runnable() {                @Override                public void run() {                    ConstantUtil.UVCServiceConnectStion = 1;                    UIUtil.toast(activity, "服务重启成功!", false);                }            }, 1000, TimeUnit.MILLISECONDS);        }        if (ConstantUtil.isStatScreenScale) {            mScreenScale.setVisibility(View.VISIBLE);        } else {            mScreenScale.setVisibility(View.GONE);        }        System.gc();    }    @Override    protected void onStart() {        // TODO: 2016/6/16 : 添加bindService        super.onStart();// ATTENTION: This was auto-generated to implement the App Indexing API.        // See https://g.co/AppIndexing/AndroidStudio for more information.        // mClient.connect();        // AppIndex.AppIndexApi.start(mClient, getIndexApiAction());    }    @Override    public void onResume() {        super.onResume();        this.wakeLock.acquire();    }    @Override    public void onPause() {        super.onPause();    }    private int progressBarProgeress = 0;//记录退出进度    private Dialog exitdialog;//退出等待对话框    private ActivityManager manager;    //更新退出进度条    Handler mHandler = new Handler() {        @Override        public void handleMessage(Message msg) {            super.handleMessage(msg);            switch (msg.what) {                case 1:                    progressBarProgeress++;                    if (exitdialog!=null&&exitdialog.isShowing())                    exitAppProgressBar.setProgress(progressBarProgeress);                    if (progressBarProgeress > 6) {                        if (exitdialog!=null&&exitdialog.isShowing())                            exitdialog.dismiss();                        Boolean aBoolean = Hawk.get("remote_exception", false);                        if (aBoolean) {                            Intent LaunchIntent = getPackageManager().getLaunchIntentForPackage(getApplication().getPackageName());                            LaunchIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                            startActivity(LaunchIntent);                        }                        android.os.Process.killProcess(android.os.Process.myPid());                        System.gc();                        System.exit(0);                    }                    break;            }        }    };    private boolean killProcess = false;    //结束所有进程    private void killAll(Context context) {        //20180417        killProcess = true;        Boolean aBoolean = Hawk.get("remote_exception", false);        if(!aBoolean) {            if (mMasterIntentServiceBinder != null) {                mMasterIntentServiceBinder.myStopBackProcess();            }        }        System.gc();        delayDestroyTimer();    }    private void delayDestroyTimer() {        TimerTask timerTask = new TimerTask() {            @Override            public void run() {                Message message = new Message();                message.what = 1;                mHandler.sendMessage(message);            }        };        Timer timer = new Timer();        timer.schedule(timerTask, 500, 500);    }    //退出等待对话框    private void showexitAppDialog() {        // 初始化对话框        exitdialog = new Dialog(activity, R.style.Dialog_Radio);        exitdialog.setContentView(R.layout.dialog_progress_exitapp);        exitdialog.setCancelable(false);        exitdialog.setCanceledOnTouchOutside(false);        exitAppProgressBar = ((ProgressBar) exitdialog.findViewById(R.id.exit_app_progressbar));        exitdialog.show();    }    private Dialog lodingDialog = null;    //加载等待对话框    private void showLodingDialog(String str) {        // 初始化对话框        if (lodingDialog != null) {            lodingDialog.dismiss();            lodingDialog = null;        }        lodingDialog = new Dialog(activity, R.style.Dialog_Radio);        lodingDialog.setContentView(R.layout.dialog_progress_loding);        lodingDialog.setCancelable(false);        lodingDialog.setCanceledOnTouchOutside(false);        TextView tv = (TextView) lodingDialog.findViewById(R.id.tv_diolog);        tv.setText(str);        lodingDialog.show();    }    @Override    public void onDestroy() {        //Toast.makeText(activity, "MasterActivity Destroy()", Toast.LENGTH_SHORT).show();        destoryMethod();        super.onDestroy();        this.wakeLock.release();        mMyHanlder.removeCallbacksAndMessages(null);        contrackAdapter = null;        sAdapter = null;        mSaturationLightAdapter = null;        // unregisterReceiver(mBatteryReceiver);        if (exitdialog.isShowing()) {            exitdialog.dismiss();        }    }    private void destoryMethod() {        //退出监听wlan直连        if (ConstantUtil.unDisplay) {            if (wifiDirectUtils != null)                wifiDirectUtils.unregistReciver();            FileUtils.writeFileToLogFolder("close wifi direct");        }        showexitAppDialog();        EXECUTOR_SERVICE_SCHEDULED.schedule(new Runnable() {            @Override            public void run() {                BaseApplication.getInstance().setAutoPhoto_views(1);                if (blueBroadcastReceive != null) {                    unregisterReceiver(blueBroadcastReceive);                }                if (timer != null) {                    timer.cancel();                    timer = null;                }                if (stTimer != null) {                    stTimer.cancel();                    stTimer = null;                }                if (myBroadCast != null) {                    unregisterReceiver(myBroadCast);                }                if (batteryLevelReceiver != null) {                    unregisterReceiver(batteryLevelReceiver);                }                if (start != null) {                    stopService(start);                }                if (conn != null) {                    unbindService(conn);                }                if (bindIntent != null) {                    stopService(bindIntent);                }                if (mBitmap != null) {                    mBitmap.recycle();                }                if (BaseApplication.DIR_NAME != null || !BaseApplication.DIR_NAME.equals("")) {                    BaseApplication.DIR_NAME = "";                    BaseApplication.DIR_NAME = null;//释放DIR_NAME                }                // showexitAppDialog();                killAll(getApplicationContext());            }        }, 2000, TimeUnit.MILLISECONDS);       /* BaseApplication.getInstance().setAutoPhoto_views(1);        if (blueBroadcastReceive != null) {            unregisterReceiver(blueBroadcastReceive);        }        if (start != null) {            stopService(start);        }        if (conn != null) {            unbindService(conn);        }        if (bindIntent != null) {            stopService(bindIntent);        }        if (mBitmap != null) {            mBitmap.recycle();        }        //        //        if (BaseApplication.DIR_NAME != null || !BaseApplication.DIR_NAME.equals("")) {            BaseApplication.DIR_NAME = "";            BaseApplication.DIR_NAME = null;//释放DIR_NAME        }       // showexitAppDialog();        killAll(getApplicationContext());*/        //android.os.Process.killProcess(android.os.Process.myPid());        //结束本进程        // new BaseApplication().finishActivity();        //    }    public boolean onKeyDown(int keyCode, KeyEvent event) {        // TODO Auto-generated method stub        if (keyCode == KeyEvent.KEYCODE_BACK) {            exitBy2Click();        }        return false;    }    private Boolean isExit = false;    private void exitBy2Click() {        // TODO Auto-generated method stub        Timer tExit = null;        if (isExit == false) {            isExit = true; // 准备退出            // Toast.makeText(this, "再次点击退出", Toast.LENGTH_SHORT).show();            tExit = new Timer();            tExit.schedule(new TimerTask() {                public void run() {                    isExit = false; // 取消退出                }            }, 2000); // 如果2秒钟内没有按下返回键，则启动定时器取消掉刚才执行的任务        } else {            killProcess = true;            FileUtils.writeFileToLogFolder("----------------用户退出程序");            destoryMethod();        }    }    private Dialog mSelfCheckDialog;    private boolean mSelfCheckFlag = false;    @Override    public boolean dispatchTouchEvent(MotionEvent ev) {        showAllView();//显示所有隐藏掉的view        FileUtils.writeFileToLogFolder("dispatchTouchEvent " + "showAllView");        boolean self_check = BaseApplication.getInstance().isSelf_check();        if (self_check) {            BaseApplication.getInstance().setSelf_check(false);            if (mMasterIntentServiceBinder != null) {                if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                    UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                    return super.dispatchTouchEvent(ev);                }            } else {                UIUtil.toast(activity, "正在加载中 ! . . .", true);                return super.dispatchTouchEvent(ev);            }            showPasswordDialog();      //显示密码对话框弹窗 :        }        //  BaseApplication.getInstance().setSelf_check(false);        return super.dispatchTouchEvent(ev);    }    private Dialog mPasswordDialog;    //显示密码对话框 :    private void showPasswordDialog() {        if (mPasswordDialog != null) {            mPasswordDialog.dismiss();            mPasswordDialog = null;        }        // 初始化对话框        mPasswordDialog = new Dialog(activity, R.style.Dialog_Radio);        mPasswordDialog.setContentView(R.layout.dialog_password_toast);        mPasswordDialog.setCancelable(true);        mPasswordDialog.setCanceledOnTouchOutside(true);        final Button loginButton = (Button) mPasswordDialog.findViewById(R.id.login_btn);        final EditText passwordEditText = (EditText) mPasswordDialog.findViewById(R.id.et_password);        loginButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String password = passwordEditText.getText().toString().trim();                if (password != null) {                    final Calendar c = Calendar.getInstance();                    c.setTimeZone(TimeZone.getTimeZone("GMT+8:00"));                    String week = String.valueOf(c.get(Calendar.DAY_OF_WEEK));                    if (week.equals(password)) {                        showSelfCheckDialog();                        mPasswordDialog.dismiss();                        mPasswordDialog = null;                    } else                        UIUtil.toast(getApplicationContext(), "输入错误 !", false);                } else                    UIUtil.toast(getApplicationContext(), "输入不能为空!", false);            }        });        mPasswordDialog.show();    }    //显示自检程序对话框弹窗 :    public void showSelfCheckDialog() {        if (mSelfCheckDialog != null) {            mSelfCheckDialog.dismiss();            mSelfCheckDialog = null;        }        // 初始化对话框        mSelfCheckDialog = new Dialog(activity, R.style.Dialog_Radio);        mSelfCheckDialog.setContentView(R.layout.dialog_self_check_toast);        mSelfCheckDialog.setCancelable(false);        mSelfCheckDialog.setCanceledOnTouchOutside(false);        final Button positiveButton = (Button) mSelfCheckDialog.findViewById(R.id.self_check_ok_btn);        Button negativeButton = (Button) mSelfCheckDialog.findViewById(R.id.self_check_cancel_btn);        Button settingButton = (Button) mSelfCheckDialog.findViewById(R.id.setting_btn);        final ProgressBar selfCheckProgressbar = (ProgressBar) mSelfCheckDialog.findViewById(R.id.self_check_progressbar);        positiveButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                mSelfCheckFlag = !mSelfCheckFlag;                //                    mMasterIntentServiceBinder.selfCheckMethod();                if (mSelfCheckFlag) {                    ConstantUtil.isSelefCheck = true;                    positiveButton.setText("停止");                    selfCheckProgressbar.setVisibility(View.VISIBLE);                    mMasterIntentServiceBinder.startSelfCheck();                } else {                    ConstantUtil.isSelefCheck = false;                    positiveButton.setText("开始");                    selfCheckProgressbar.setVisibility(View.GONE);                    mMasterIntentServiceBinder.stopSelfCheck();                }            }        });        negativeButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                mSelfCheckDialog.dismiss();                if (mSelfCheckFlag) {                    ConstantUtil.isSelefCheck = false;                    mMasterIntentServiceBinder.stopSelfCheck();                }                mSelfCheckDialog = null;            }        });        settingButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //2017.01.11 弹出内部参数配置窗口 :                SystemConfigUtil.showSystemConfigDialog(activity);            }        });        mSelfCheckDialog.show();    }    //2016.09.28 : 新增 : 允许识别的最大触控点数 :    private final int MAX_TOUCHPOINTS = 3;    private int mCurrentTouchPoints = 1;    @Override    public boolean onTouchEvent(MotionEvent event) {        //        Toast.makeText(getApplicationContext() , "屏幕被点击了 ! ..." , Toast.LENGTH_SHORT).show();        //2016.09.28 : 修改调焦速度控制方式 :        // 获得屏幕触点数量        mCurrentTouchPoints = event.getPointerCount();        if (mCurrentTouchPoints > MAX_TOUCHPOINTS) {            mCurrentTouchPoints = MAX_TOUCHPOINTS;        }        //        Log.w("test_MasterActi", "onTouchEvent mCurrentTouchPoints = " + mCurrentTouchPoints + " === ");        if (mGestureDetector.onTouchEvent(event))            return true;        // 处理手势结束        switch (event.getAction() & MotionEvent.ACTION_MASK) {            case MotionEvent.ACTION_UP:                //                Log.v("test", "onTouchEvent ACTION_UP");                mStartScroll = false;                //endGesture();                break;            case MotionEvent.ACTION_CANCEL:                //                Log.v("test", "onTouchEvent ACTION_CANCEL");                break;            case MotionEvent.ACTION_DOWN:                //                Log.v("test", "onTouchEvent ACTION_DOWN");                //endGesture();                mStartScroll = true;                break;        }       /* if (mMasterIntentServiceBinder != null) {            if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                return true;            }        } else {            UIUtil.toast(activity, "正在加载中 ! . . .", true);            return true;        }*/        if (mShowFocus.getText().toString().trim().equals("AUTO FOCUS->>")) {            if (ConstantUtil.isFastDoubleClick())                return true;            if (ConstantUtil.isStartAutofocus) {                UIUtil.toast(activity, "操作过于频繁，请稍等。。。", false);            } else {                FileUtils.writeFileToLogFolder("用户停止了自动对焦");                mMasterIntentServiceBinder.stopAutoFocus();            }        }        //        mMasterIntentServiceBinder.stopAutoFocus();        //将状态的显示放在这里 , 可避免滑动或双击的时候触发 相应单击        //检测到触摸就显示当前设置状态值 :        /*if (mMasterIntentServiceBinder.isCameraClientNotNull()) {            mShowIOSValue.setText("" + mISO);            mShowGamaValue.setText("" + mGamma);            mShowBrigthnessValue.setText("" + mBrightness);            //            mShowIOSValue.setText("" + mMasterIntentServiceBinder.getGain());            //            mShowGamaValue.setText("" + mMasterIntentServiceBinder.getGamma());            //            mShowBrigthnessValue.setText("" + mMasterIntentServiceBinder.getBrightness());        }*/        //2016.09.23 : 成品发布注释 :      /*  if (ISSUANCE_PRODUCT_SWITCH) {            mShowStateValues.setVisibility(View.VISIBLE);        }*/        //        return super.onTouchEvent(event);        return true;    }    /**     * 手势结束     */    private void endGesture() {        Runnable thread = new Runnable() {            @Override            public void run() {                //  mISO = mCameraClient.getGain();                //    mBrightness = mCameraClient.getBrightness();                //    mGamma =mCameraClient.getGamma();                mISO = -1;                mBrightness = -1;                mGamma = -1;                // 隐藏                // mDismissHandler.sendEmptyMessageDelayed(0, 500);                //2016.05.24 修改 :                //                mMyHanlder.sendEmptyMessageDelayed(DISMISS_HANDLER, 500);                if (mShowStateValues.getVisibility() == View.VISIBLE) {                    //                    mMasterIntentServiceBinder.allowStopManualAutoFocus(false);                    mMyHanlder.sendEmptyMessageDelayed(DISMISS_HANDLER, 500);  //延时500ms后 , 隐藏显示                }                //                //2016.08.05 : 修改 , 将单击暂停快速对焦放在这里 , 用于与自动快速对焦暂停兼容 :                //                else {                //                    mMasterIntentServiceBinder.allowStopManualAutoFocus(true);                //                }            }        };        runOnUiThread(thread);    }    /**     * 定时隐藏     */    private final static int SHOW_ISO_BUTTON = 0x232;    private final static int DISMISS_ISO_BUTTON = 0x233;    private final static int SHOW_BRIGTHNESS_BUTTON = 0x234;    private final static int DISMISS_BRIGTHNESS_BUTTON = 0x235;    public int mBrightness = -1;    private int mMaxGamma = 5000;    public final static int UPDATE_AUTO_SELF_CHECK = 0x165;//    //更新自动拍照时显示页面图标    public final static int UPDATE_AUTO_DISPLAY = 0x166;    //定义一个处理显示清晰度 和 Gama数值的Handle :    public final static int UPDATE_SATURATIONSTATE = 0x266;    public final static int SHOW_CLARITY = 0x123;    public final static int SHOW_GAMA = 0x456;    public final static int DISMISS_HANDLER = 0x789;    public final static int SHOW_AUTO_FOCUS_DATA = 0x148;    public final static int SHOW_CAPTURE_VIEW = 0x149;    public final static int SHOW_AOTO_CAPTURE_VIEW = 0x23;    public final static int SHOW_RECORD_VIEW = 0x150;    public final static int SHOW_CLARITY_NUMBER = 0x151;    public final static int SHOW_AUTOPHOTO_PROCESS = 0x152;    //2016.07.08 : 新增 : 用于定时录像设置 :    // public final static int SELF_CHECK_RECORDING = 0x152;    public final static int SHOW_AUTO_PHONE_TIMER = 0x153;    public final static int SHOW_MAUTO_PHONE_TIMER = 0x183;    //2016.08.01 : 新增 : 用于显示激发块灯光选择 :    public final static int SHOW_STATE_SATURATION = 0x154;    public final static int SHOW_STATE_CONTRAST = 0x155;    //2016.08.02 : 新增 : 用于显示自动对焦的动画图标 :    public final static int SHOW_AUTO_FOCUS_ANIMATION = 0x156;    //2016.10.08 : 新增 : 用于对焦按钮操作 :    // public final static int FOCUS_ClICK_HANDLE = 0x157;    //2016.10.09 : 新增 : 用于控制显示对焦按钮 :    public final static int SHOW_FOCUS_ClICK_BUTTON = 0x158;    public final static int DISMISS_FOCUS_ClICK_BUTTON = 0x159;    //2016.12.28 : 将对焦的操作命令执行 转移到队列中执行 ;    public final static int EXECUTE_FOCUS_CAMMAND = 0x160;    public final static int EXECUTE_ISO_CAMMAND = 0x161;    public final static int EXECUTE_BRIGHTNESS_CAMMAND = 0x162;    public final static int DISMISS_ALL_VIEW = 0x163;    public final static String GAMA_VALUE = "GamaValue";    public final static String CLARITY_VALUE = "ClarityValue";    public final static String SHOW_GAMA_VALUE = "mShowGamaValue";    public final static String SHOW_FOCUS_VALUE = "mShowFocusValue";    public final static String SHOW_FOCUS = "mShowFocus";    public final static String START_CAPTURE = "startCapture";    public final static String FINISH_CAPTURE = "finishCapture";    public final static String FINISH_AOTO_CAPTURE = "finishAotoCapture";    public final static String START_RECORD = "startRecord";    public final static String FINISH_RECORD = "finishRecord";    public final static String RECORD_SUCCESS = "recordSuccess";    public final static String RECORD_RESULT = "recordResult";    //2016.07.08 新增 : 添加兼容测试功能的对话框判断 :    public final static String IS_SELF_CKECK = "isSelfCheck";    //2016.08.02 新增 : 用于在handle中显示saturation激发块灯光状态 :    public final static String STATE_SATURATION = "stateSaturation";    //2016.08.02 新增 : 用于在handle中显示contrast物镜倍数状态 :    public final static String STATE_CONTRAST = "stateContrast";    //2016.08.02 新增 : 用于在handle中显示的自动对焦动画的xy坐标:    public final static String SHOW_FOCUS_SCALE_X = "showFocusX";    public final static String SHOW_FOCUS_SCALE_Y = "showFocusY";  /*  public final static String HISTORY_MAX_CLARITY = "HistoryMaxClarity";    public final static String CURRENT_MAX_CLARITY = "CurrentMaxClarity";    public final static String CURRENT_MIN_CONTRAST = "CurrentMinContrast";    public final static String CURRENT_MAX_CONTRAST = "CurrentMaxContrast";*/    public final static String SHOW_CLARITY_VALUE = "ShowClarityValue";    //2016.08.02 新增 : 用于在handle中显示saturation激发块灯光状态 :    //public final static String FOCUS_VALUES = "FocusValues";    MyHanlder mMyHanlder = new MyHanlder(this);    static class MyHanlder extends Handler {        WeakReference<MasterActivity> mActivity;        public MyHanlder(MasterActivity masterActivity) {            mActivity = new WeakReference<MasterActivity>(masterActivity);        }        @Override        public void handleMessage(Message msg) {            super.handleMessage(msg);            Bundle bundle = msg.getData();            switch (msg.what) {                case EXECUTE_FOCUS_CAMMAND:                    //2016.12.28 : 将对焦的操作命令执行 转移到队列中执行 ;                    mActivity.get().setGamma(msg.arg1);                    break;                case EXECUTE_ISO_CAMMAND:                    //2016.12.28 : 将调节ISO的操作命令执行 转移到队列中执行 ;                    mActivity.get().setGain(msg.arg1);                    break;                case EXECUTE_BRIGHTNESS_CAMMAND:                    //2016.12.28 : 将调节亮度的操作命令执行 转移到队列中执行 ;                    mActivity.get().setBrightness(msg.arg1);                    break;                case SHOW_CLARITY:                    //显示清晰度值 clarity:                    mActivity.get().mShowFocus.setText("Clarity : ");                    if (msg.getData() != null)                        mActivity.get().mShowFocusValue.setText(msg.getData().getString(CLARITY_VALUE));                    break;                case SHOW_GAMA:                    //显示gama值 :                    mActivity.get().mShowFocus.setText("Gama : ");                    if (msg.getData() != null)                        mActivity.get().mShowFocusValue.setText(msg.getData().getString(GAMA_VALUE));                    break;                case DISMISS_HANDLER:                    //2016.09.28 : 新增 :                    mActivity.get().mCurrentTouchPoints = 1;                    //                    Log.v("test", "隐藏！！！");                    // mActivity.get().mISOBrightnessLayout.setVisibility(View.GONE);                    //TODO                    mActivity.get().mShowStateValues.setVisibility(View.GONE);                    break;                case SHOW_AUTO_FOCUS_DATA:                    //                    Log.v("test", "显示自动对焦的数据值 ！！！");                    if (bundle != null) {                        //显示Focus值 :                        mActivity.get().mShowFocus.setText(bundle.getString(SHOW_FOCUS, ""));                        mActivity.get().mShowFocusValue.setText(bundle.getString(SHOW_FOCUS_VALUE, ""));                        mActivity.get().mShowGamaValue.setText(bundle.getString(SHOW_GAMA_VALUE, ""));                        mActivity.get().mLayoutShowValue.setVisibility(View.VISIBLE);                        // ConstantUtil.isAutoFocusFinish = true;                    } else {                        //取消显示mLayoutShowValue :                        mActivity.get().mShowFocus.setText("");                        mActivity.get().mShowFocusValue.setText("");                        mActivity.get().mShowGamaValue.setText("");                        mActivity.get().mLayoutShowValue.setVisibility(View.GONE);                        ConstantUtil.isAutoFocusFinish = true;                    }                    break;                case SHOW_CAPTURE_VIEW:                    if (bundle != null) {                        //显示拍照时的动作 :                        if (bundle.getBoolean(START_CAPTURE, false)) {                            mActivity.get().captureIconView.setEnabled(false);                            mActivity.get().mStillCaptureButton.setEnabled(false);                        }                        if (bundle.getBoolean(FINISH_CAPTURE, false)) {                            mActivity.get().captureIconView.setEnabled(true);                            mActivity.get().mStillCaptureButton.setEnabled(true);                            mActivity.get().setNewestImage();                            //  mActivity.get().shootSound();                            //170418                            if (mActivity.get().THIS_RENAME_FILE && mActivity.get().isRename_File) {                                mActivity.get().isRename_File = false;                                mActivity.get().showFileRename();//提示是否重命名                            }                        }                    }                    break;                case SHOW_AOTO_CAPTURE_VIEW:                    if (ConstantUtil.isAutoPhotoFinish) {                        if (mActivity.get().lodingDialog != null) {                            mActivity.get().lodingDialog.dismiss();                            mActivity.get().lodingDialog = null;                        }                        if (mActivity.get().mMasterIntentServiceBinder != null && ConstantUtil.isAutoPhotoFinish) {                            mActivity.get().mMasterIntentServiceBinder.sendToBackgroundProgram("stopautophoto", "stop");                        }                    }                    if (bundle != null) {                        if (bundle.getBoolean(FINISH_AOTO_CAPTURE, true)) {                            mActivity.get().captureIconView.setEnabled(true);                            mActivity.get().mStillCaptureButton.setEnabled(true);                            mActivity.get().setNewestImage();                            // mActivity.get().shootSound();                        }                    }                    break;                case SHOW_RECORD_VIEW:                    //                    Log.i("test", "显示录像时的动作和图像 ！！！");                    if (bundle != null) {                        // isCamareRecord = false;                        //显示录像时的动作 :                        if (bundle.getBoolean(START_RECORD, false)) {                            if (mActivity.get().rayMenu.getVisibility() == View.VISIBLE)                                mActivity.get().mRecordView.setVisibility(View.VISIBLE);                            ConstantUtil.is_recoding = true;                            mActivity.get().startTime();                        }                        if (bundle.getBoolean(FINISH_RECORD, false)) {                            mActivity.get().stopTime();                            //2016.08.10 : 修改对话弹窗的界面一致性 :                            // 初始化对话框                            if (mActivity.get().progressDialog != null) {                                mActivity.get().progressDialog.dismiss();                                mActivity.get().progressDialog = null;                            }                            mActivity.get().progressDialog = new Dialog(mActivity.get().activity, R.style.Dialog_Radio);                            mActivity.get().progressDialog.setContentView(R.layout.dialog_progress_record);                            mActivity.get().progressDialog.setCancelable(false);                            mActivity.get().progressDialog.setCanceledOnTouchOutside(false);                            mActivity.get().progressDialog.show();                            // mActivity.get().isDismissDialog();                            ConstantUtil.isSaveMovis = true;                            mActivity.get().mRecordView.setVisibility(View.GONE);                        }                        if (bundle.getBoolean(RECORD_SUCCESS, false)) {                            //Toast.makeText(mActivity.get().activity, bundle.getString(RECORD_RESULT, ""), Toast.LENGTH_SHORT).show();                            UIUtil.toast(mActivity.get().activity, bundle.getString(RECORD_RESULT, ""), false);                            if (mActivity.get().progressDialog != null && mActivity.get().progressDialog.isShowing()) {                                mActivity.get().progressDialog.dismiss();                                mActivity.get().progressDialog = null;                                ConstantUtil.is_recoding = false;                                mActivity.get().setNewestImage();//更新文件显示数                                ConstantUtil.isSaveMovis = false;                            }                        }                    }                    break;                case SHOW_CLARITY_NUMBER:                    //                    Log.i("test", "实时显示清晰度数值  ！！！");                    if (bundle != null) {                        //2016.09.23 : 成品发布注释 :                        if (ISSUANCE_PRODUCT_SWITCH) {                            mActivity.get().mShowClarityValue.setText(bundle.getString(SHOW_CLARITY_VALUE, ""));                        }                    }                    break;                case SHOW_AUTO_PHONE_TIMER:     //定时拍照 定时结束 : 取消显示定时拍照红圈 :                    if (!ConstantUtil.isAutoPhotoFinish && !ConstantUtil.isUVCClose && ConstantUtil.AUTO_CAPUTER_CLOSEUVC) {                        mActivity.get().showLodingDialog("正在完成自动拍照");                        if (mActivity.get().mMasterIntentServiceBinder != null) {                            mActivity.get().mMasterIntentServiceBinder.sendToBackgroundProgram("stopautophoto", "istostop");                        }                    }                    mActivity.get().mButtonCaptureButton.setVisibility(View.GONE);                    mActivity.get().auto_photo_SeekBar.setVisibility(View.GONE);                    mActivity.get().autoPhotoTimer.setVisibility(View.GONE);                    mActivity.get().autoPhotoCNumber.setVisibility(View.GONE);                    if (mActivity.get().mMasterIntentServiceBinder != null) {                        mActivity.get().mMasterIntentServiceBinder.sendToBackgroundProgram("goneseekbar", "gone");                    }                    ConstantUtil.processBarAutoPhoto = 0;                    if (mActivity.get().mMasterIntentServiceBinder != null) {                        mActivity.get().mMasterIntentServiceBinder.sendToBackgroundProgram("autophotoview", "gone");                    }                    // BaseApplication.getInstance().getAutoPhoto_views() = 1;                    BaseApplication.getInstance().setAutoPhoto_views(1);                    break;                case SHOW_MAUTO_PHONE_TIMER://开始定时拍照， 显示定时拍照红圈                    if (mActivity.get().rayMenu.getVisibility() == View.GONE) {                    } else {                        mActivity.get().mButtonCaptureButton.setVisibility(View.VISIBLE);                        mActivity.get().auto_photo_SeekBar.setVisibility(View.VISIBLE);                    }                    mActivity.get().autoPhotoTimer.setVisibility(View.VISIBLE);                    //mActivity.get().autoPhotoCNumber.setVisibility(View.VISIBLE);                    mActivity.get().autoPhotoTimer.setText(ConstantUtil.stopAutoPhotoStr);                    //  mActivity.get().autoPhotoCNumber.setText("设定值："+ConstantUtil.ConvergenceNumber+"   当前值："+mActivity.get().getLastConverGence());                    if (mActivity.get().mMasterIntentServiceBinder != null) {                        mActivity.get().mMasterIntentServiceBinder.sendToBackgroundProgram("autophototimer", ConstantUtil.stopAutoPhotoStr);                        mActivity.get().mMasterIntentServiceBinder.sendToBackgroundProgram("convergence", ConstantUtil.ConvergenceNumber);                    }                    mActivity.get().auto_photo_SeekBar.setMax(ConstantUtil.autoPhotoCount);                    if (mActivity.get().mMasterIntentServiceBinder != null) {                        mActivity.get().mMasterIntentServiceBinder.sendToBackgroundProgram("autophotocount", ConstantUtil.autoPhotoCount + "");                    }                    mActivity.get().auto_photo_SeekBar.setProgress(0);                    ConstantUtil.processBarAutoPhoto = 0;                    if (mActivity.get().mMasterIntentServiceBinder != null) {                        mActivity.get().mMasterIntentServiceBinder.sendToBackgroundProgram("autophotoview", "visible");                    }                    break;                //2016.08.01 : 新增 : 用于显示激发块灯光选择 :                case SHOW_STATE_SATURATION:                    if (bundle != null) {                        //2016.08.01 修改新增 : 设置激发块灯光的颜色状态 :                        mActivity.get().setCurrentSaturationState(bundle.getInt(MasterActivity.STATE_SATURATION, 0));                    }                    int saturation = BaseApplication.getInstance().getSaturation();                    Log.w(TAG, "saturation!=" + saturation);                    if (saturation == 0) {                        if (mActivity.get().grothRateDialog != null) {                            if (mActivity.get().grothRateDialog.isShowing()) {                                mActivity.get().showGrothRate();                            }                        }                        if (mActivity.get().autoPhotoTimer.getVisibility() == View.VISIBLE)                            mActivity.get().autoPhotoCNumber.setVisibility(View.VISIBLE);                        String lastConverGence = mActivity.get().getLastConverGence();                        mActivity.get().autoPhotoCNumber.setText("设定值：" + ConstantUtil.ConvergenceNumber + "   当前值：" + lastConverGence);                        if (!lastConverGence.equals("") && !ConstantUtil.ConvergenceNumber.equals("")) {                            int converGence = Integer.valueOf(lastConverGence);                            if (converGence > Integer.valueOf(ConstantUtil.ConvergenceNumber)) {                                mActivity.get().showNormalDialog("已经到达设定汇合率");                            }                        }                    }                    break;                //2016.08.01 : 新增 : 用于显示物镜倍数选择 :                case SHOW_STATE_CONTRAST:                    if (bundle != null) {                        int multiple = bundle.getInt(MasterActivity.STATE_CONTRAST, 10);                        //2016.07.17 :　修改　：                        BaseApplication.getInstance().setCurrent_contrast(multiple);                        String result = multiple + "X";                        if (mActivity.get().secondSettingMultiple != null)                            mActivity.get().secondSettingMultiple.setText(result);                        mActivity.get().rayMenu.getMasterSettingMultiple().setText(result);                        BaseApplication.getInstance().setCurrentContrast(multiple);                        //2016.06.06 新增 :　根据选择的物镜倍数更新　标尺的单位数值　：                        if (multiple == 5) {     //5x 物镜 : 标尺单位数值100 um                            mActivity.get().mScaleplateValueTextView.setText("100 um");                        }                        if (multiple == 10) {     //10x 物镜 : 标尺单位数值100 um                            mActivity.get().mScaleplateValueTextView.setText("50 um");                        }                        if (multiple == 20) {     //20x 物镜 : 标尺单位数值100 um                            mActivity.get().mScaleplateValueTextView.setText("25 um");                        }                        if (multiple == 50) {     //20x 物镜 : 标尺单位数值100 um                            mActivity.get().mScaleplateValueTextView.setText("1 um");                        }                    }                    break;                //2016.08.01 : 新增 : 用于显示自动对焦的动画图标 :                case SHOW_AUTO_FOCUS_ANIMATION:                    if (bundle != null) {                        mActivity.get().showAutoFocusAnimation(bundle.getFloat(MasterActivity.SHOW_FOCUS_SCALE_X, 0), bundle.getFloat(MasterActivity.SHOW_FOCUS_SCALE_Y, 0));                    }                    break;                //2016.10.09 : 新增 : 用于控制显示对焦按钮 :                case SHOW_FOCUS_ClICK_BUTTON:                    mActivity.get().mOperationBg.setImageResource(R.mipmap.mf_bg);                    mActivity.get().mISOBrightnessLayout.setVisibility(View.VISIBLE);                    int gamma = BaseApplication.getInstance().getGamma();                    mActivity.get().mOperationPercent.setText(gamma + "");                    if (mActivity.get().mISO_SetUp.getVisibility() == View.VISIBLE) {                        mActivity.get().mISO_SetUp.setVisibility(View.GONE);                    }                    if (mActivity.get().mBright_SetUp.getVisibility() == View.VISIBLE) {                        mActivity.get().mBright_SetUp.setVisibility(View.GONE);                    }                    if (mActivity.get().mFocusButtonLayout.getVisibility() != View.VISIBLE) {                        mActivity.get().mFocusButtonLayout.setVisibility(View.VISIBLE);                    }                    break;                case SHOW_ISO_BUTTON:                    if (mActivity.get().mFocusButtonLayout.getVisibility() == View.VISIBLE) {                        mActivity.get().mFocusButtonLayout.setVisibility(View.GONE);                    }                    mActivity.get().mOperationBg.setImageResource(R.mipmap.iso);                    mActivity.get().mISOBrightnessLayout.setVisibility(View.VISIBLE);                    int gain1 = BaseApplication.getInstance().getGain();                    String lable = "";                    switch (gain1) {                        case 0:                            lable = "100";                            break;                        case 16:                            lable = "200";                            break;                        case 32:                            lable = "400";                            break;                        case 48:                            lable = "800";                            break;                        case 64:                            lable = "1600";                            break;                        case 80:                            lable = "3200";                            break;                        case 100:                            lable = "6400";                            break;                    }                    mActivity.get().mOperationPercent.setText(lable);                    if (mActivity.get().mBright_SetUp.getVisibility() == View.VISIBLE) {                        mActivity.get().mBright_SetUp.setVisibility(View.GONE);                    }                    if (mActivity.get().mISO_SetUp.getVisibility() != View.VISIBLE) {                        mActivity.get().mISO_SetUp.setVisibility(View.VISIBLE);                    }                    break;                case DISMISS_ISO_BUTTON:                    if (mActivity.get().mISO_SetUp.getVisibility() == View.VISIBLE) {                        mActivity.get().mISO_SetUp.setVisibility(View.GONE);                    }                    mActivity.get().mISOBrightnessLayout.setVisibility(View.GONE);                    break;                case SHOW_BRIGTHNESS_BUTTON:                    mActivity.get().mOperationBg.setImageResource(R.mipmap.brightness_bg);                    mActivity.get().mISOBrightnessLayout.setVisibility(View.VISIBLE);                    int mbrightness = 0;                    mbrightness = BaseApplication.getInstance().getBrightness();                    mActivity.get().mOperationPercent.setText(mbrightness + "");                    if (mActivity.get().mFocusButtonLayout.getVisibility() == View.VISIBLE) {                        mActivity.get().mFocusButtonLayout.setVisibility(View.GONE);                    }                    if (mActivity.get().mISO_SetUp.getVisibility() == View.VISIBLE) {                        mActivity.get().mISO_SetUp.setVisibility(View.GONE);                    }                    if (mActivity.get().mBright_SetUp.getVisibility() != View.VISIBLE) {                        mActivity.get().mBright_SetUp.setVisibility(View.VISIBLE);                    }                    break;                case DISMISS_BRIGTHNESS_BUTTON:                    if (mActivity.get().mBright_SetUp.getVisibility() == View.VISIBLE) {                        mActivity.get().mBright_SetUp.setVisibility(View.GONE);                    }                    mActivity.get().mISOBrightnessLayout.setVisibility(View.GONE);                    break;                case DISMISS_FOCUS_ClICK_BUTTON:                    //2016.10.09 : 新增 : 用于设置对焦按键在滑动时隐藏 ;                    if (mActivity.get().mFocusButtonLayout.getVisibility() == View.VISIBLE) {                        mActivity.get().mFocusButtonLayout.setVisibility(View.GONE);                    }                    mActivity.get().mISOBrightnessLayout.setVisibility(View.GONE);                    mActivity.get().mCurrentTouchPoints = 1;                    mActivity.get().mShowStateValues.setVisibility(View.GONE);                    //取消显示mLayoutShowValue :                    // mActivity.get().mLayoutShowValue.setVisibility(View.INVISIBLE);                    break;                case UPDATE_AUTO_SELF_CHECK:                    //                    mActivity.get().mMasterIntentServiceBinder.mprogramSelfCheck();                    break;                case UPDATE_AUTO_DISPLAY:                    mActivity.get().setCurrentSaturationState(msg.arg1);                    if (msg.arg1 == 0 && ConstantUtil.LIGHTSCOUNT < 4) {                        BaseApplication.getInstance().setSaturation_pos(ConstantUtil.LIGHTSCOUNT);                    }                    break;                case UPDATE_SATURATIONSTATE:                    break;                case SHOW_AUTOPHOTO_PROCESS://更新自动拍照进度                    ConstantUtil.processBarAutoPhoto += 1;                    if (mActivity.get().auto_photo_SeekBar.getVisibility() == View.VISIBLE) {                        mActivity.get().auto_photo_SeekBar.setProgress(ConstantUtil.processBarAutoPhoto);                    }                    if (mActivity.get().mMasterIntentServiceBinder != null) {                        mActivity.get().mMasterIntentServiceBinder.sendToBackgroundProgram("autophotoprocess", ConstantUtil.processBarAutoPhoto + "");                    }                    break;                case DISMISS_ALL_VIEW:                    mActivity.get().rayMenu.setVisibility(View.GONE);                    mActivity.get().mRecordButton.setVisibility(View.GONE);                    mActivity.get().mStillCaptureButton.setVisibility(View.GONE);                    mActivity.get().photoNumberLayout.setVisibility(View.GONE);                    mActivity.get().btn_photo_album.setVisibility(View.GONE);                    mActivity.get().mRockerView.setVisibility(View.GONE);                    mActivity.get().mScaleplateValueTextView.setVisibility(View.GONE);                    //mButtonCaptureButton  mRecordView  auto_photo_SeekBar                    mActivity.get().mRecordView.setVisibility(View.GONE);                    mActivity.get().auto_photo_SeekBar.setVisibility(View.GONE);                    mActivity.get().mButtonCaptureButton.setVisibility(View.GONE);                    if (mActivity.get().popupWindow != null) {                        mActivity.get().popupWindow.dismiss();                    }                    if (mActivity.get().autofocuspopupWindow != null) {                        mActivity.get().autofocuspopupWindow.dismiss();                    }                    if (mActivity.get().objectivepopupWindow != null) {                        mActivity.get().objectivepopupWindow.dismiss();                    }                    if (mActivity.get().popupWindow != null) {                        mActivity.get().popupWindow.dismiss();                    }                    if (mActivity.get().satePop != null) {                        mActivity.get().satePop.dismiss();                    }                    if (mActivity.get().exporFileUserDialog != null) {                        mActivity.get().exporFileUserDialog.dismiss();                    }                    break;            }        }    }    private void isDismissDialog() {        EXECUTOR_SERVICE_SCHEDULED.schedule(new Runnable() {            @Override            public void run() {                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        if (progressDialog != null) {                            if (progressDialog.isShowing()) {                                progressDialog.dismiss();                                progressDialog = null;                                ConstantUtil.isSaveMovis = false;                                setNewestImage();//更新文件显示数                                // UIUtil.toast(activity, "操作过于频繁，请查看是否录制成功！", true);                            }                        }                    }                });            }        }, 9000, TimeUnit.MILLISECONDS);    }    private MediaPlayer shootMP;    /**     * 播放系统拍照声音     */    public void shootSound() {        AudioManager manager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);        int volume = manager.getStreamVolume(AudioManager.STREAM_NOTIFICATION);        if (volume != 0) {            if (shootMP == null)                shootMP = MediaPlayer.create(activity, Uri.parse("file:///system/media/audio/ui/camera_click.ogg"));            if (shootMP != null)                shootMP.start();        }    }    private AlertDialog.Builder normalDialog;    private AlertDialog dialog;    private void showNormalDialog(String string) {        if (dialog != null && dialog.isShowing()) {            dialog.dismiss();            dialog = null;            normalDialog = null;        }        normalDialog = new AlertDialog.Builder(MasterActivity.this);        normalDialog.setIcon(R.drawable.icon);        normalDialog.setTitle("          提示！   ");        normalDialog.setMessage(string);        normalDialog.setPositiveButton("确定",                new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                    }                });        //显示        dialog = normalDialog.show();    }    // 解决用户连续点击造成出现多个相同的多次响应 :    public long lastClickTime = 0;    public boolean isFastDoubleClick() {        long time = System.currentTimeMillis();        long timeD = time - lastClickTime;        if (timeD >= 0 && timeD <= 500) {            lastClickTime = 0;            return true;        } else {            lastClickTime = time;            return false;        }    }    // 解决用户连续点击造成出现多个相同的多次响应 :    public long delayTimeOut = 0;    public boolean isFocusDelayTimeOut() {  //250ms延时;        long time = System.currentTimeMillis();        long timeD = time - delayTimeOut;        if (timeD >= 250) {            delayTimeOut = time;            return true;        } else {            //            delayTimeOut = time;            return false;        }    }    /**     * 主界面双击显示聚焦点 ！     */    private class MyGestureListener extends GestureDetector.SimpleOnGestureListener {        //TODO        @Override        public boolean onDoubleTapEvent(MotionEvent e) {            //禁止多次响应操作 :            if (isFastDoubleClick()) {                float mNewX = e.getX(), mNewY = e.getY();                Display mDisplay = getWindowManager().getDefaultDisplay();                int width = mDisplay.getWidth();                int height = mDisplay.getHeight();                //            mDisplay.getSize();                //判断是否在调节亮度和手动调焦区域                //第一次获取屏幕的最大坐标值 , 赋值 :                if (mMaxX == 0 | mMaxY == 0) {                    int[] location = new int[2];                    //        mLocationPoint.getLocationOnScreen(location);   //getLocationOnScreen()是getLocationInWindow()的一个包装 , 所以直接使用getLocationInWindow()                    mLocationPoint.getLocationInWindow(location);                    mMaxX = location[0] + 2;                    mMaxY = location[1] + 2;                }                //计算双击点坐标 映射 到图像的比例 :                mScaleX = mNewX / mMaxX;                mScaleY = mNewY / mMaxY;                if (mScaleX > 0.75 || mScaleY > 0.75 || mScaleX < 0.18) {                    return true;                }                //2016.08.02 : 修改 :                showAutoFocusAnimation(mNewX, mNewY);                if (mMasterIntentServiceBinder != null) {                    if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                        UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                        return false;                    }                } else {                    UIUtil.toast(activity, "正在加载中 ! . . .", true);                    return false;                }                //设置对焦点的坐标 :                mMasterIntentServiceBinder.setScaleXY(mScaleX, mScaleY);                FileUtils.writeFileToLogFolder("用户点击了自动对焦");                //开启自动对焦 :                if (ConstantUtil.isStartAutofocus) {                    UIUtil.toast(activity, "操作过于频繁，请停止后再试", false);                } else {                    mMasterIntentServiceBinder.startAutoFocus();                }            }            return true;    //返回true , 告诉系统 , 双击操作已经处理 !        }        /**         * 滑动         */        @Override        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {            //  mDismissHandler.removeMessages(0);            // 2016.05.24 修改            //20170830修改            // mMyHanlder.removeMessages(DISMISS_HANDLER);            //mMyHanlder.removeMessages(SHOW_FOCUS_ClICK_BUTTON);            // mMyHanlder.removeMessages(DISMISS_FOCUS_ClICK_BUTTON);            //2016.10.09 : 新增 : 用于设置对焦按键在滑动时隐藏 ;            if (mFocusButtonLayout.getVisibility() == View.VISIBLE) {                mFocusButtonLayout.setVisibility(View.GONE);            }            if (mMasterIntentServiceBinder != null) {                if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                    UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                    return false;                }            } else {                UIUtil.toast(activity, "正在加载中 ! . . .", true);                return false;            }            final float mOldX = e1.getX(), mOldY = e1.getY();            final float mNewX = e2.getX();            final float mNewY = e2.getY();            final int y = (int) e2.getRawY();            final int x = (int) e2.getRawX();            Display disp = getWindowManager().getDefaultDisplay();            final int windowWidth = disp.getWidth();            final int windowHeight = disp.getHeight() - 200;            int isoWindowWidth = windowWidth / 6;            //            int gammaWindowWidthMinimum = windowWidth * 3 / 4;            int gammaWindowWidthMinimum = windowWidth * 2 / 3;            int gammaWindowWidthMaximum = windowWidth * 7 / 8;            int brightnessWindowWidthMinimum = windowWidth / 4;            int brightnessWindowWidthMaximum = windowWidth * 3 / 4;            int brightnessWindowHeight = windowHeight * 99 / 100;            //滑动区域在ISO调节这边 :            if (mOldX < isoWindowWidth & mNewX < isoWindowWidth) {                EXECUTOR_SERVICE.execute(new Runnable() {                    @Override                    public void run() {                        mMyHanlder.sendEmptyMessage(SHOW_ISO_BUTTON);                        mMyHanlder.sendEmptyMessageDelayed(DISMISS_ISO_BUTTON, 3000);                        // onISOSlide((mOldY - y) / windowHeight);                    }                });            }            //滑动区域在Gama调节这边 :            else if (mOldX > gammaWindowWidthMinimum & mNewX > gammaWindowWidthMinimum                    & mOldX < gammaWindowWidthMaximum & mNewX < gammaWindowWidthMaximum) {                EXECUTOR_SERVICE.execute(new Runnable() {                    @Override                    public void run() {                        // onGammaSlide((mOldY - y) / windowHeight);                        //                        Log.i("test_MasterActivity", "oldX = " + mOldX + " , oldY = " + mOldY + "\n" + "newX = " + mNewX + " , newY = " + mNewY);                        //滑动对焦手势结束后显示 按键对焦按钮 :                        mMyHanlder.sendEmptyMessageDelayed(SHOW_FOCUS_ClICK_BUTTON, 250);    //结束250ms后 显示 对焦按钮 ;                        mMyHanlder.sendEmptyMessageDelayed(DISMISS_FOCUS_ClICK_BUTTON, 6000);    //结束6s后 隐藏 对焦按钮 ;                        mMyHanlder.sendEmptyMessageDelayed(DISMISS_HANDLER, 500);                    }                });            }            //滑动区域在亮度调节这边 :            else if (mOldY > brightnessWindowHeight & mNewY > brightnessWindowHeight       //滑动区域由4/5缩小为5/6缩小为7/8缩小为8/9                    & mOldX > brightnessWindowWidthMinimum & mNewX > brightnessWindowWidthMinimum                    & mOldX < brightnessWindowWidthMaximum & mNewX < brightnessWindowWidthMaximum) {                //                Log.w("test_MasterActi", "mOldY = " + mOldY + " mNewY = " + mNewY + " brightnessWindowHeight = " + brightnessWindowHeight);                EXECUTOR_SERVICE.execute(new Runnable() {                    @Override                    public void run() {                        mMyHanlder.sendEmptyMessage(SHOW_BRIGTHNESS_BUTTON);                        mMyHanlder.sendEmptyMessageDelayed(DISMISS_BRIGTHNESS_BUTTON, 3000);                    }                });            }            return super.onScroll(e1, e2, distanceX, distanceY);        }    }    /**     * 最大亮度     */    private int mMaxBrightness = 1024 * 8 - 1;    private int mMaxISO = 0;    private void showAutoFocusAnimation(float mNewX, float mNewY) {        /**         * first u have to stop the animation,or if the animation         * is starting ,u can start it again!         * 双击显示聚焦图标 !         */        //必须在动画结束时候移除动画，然后重新设置位置才会正确        //            exv1.setLocation((int) mNewY - 80, (int) mNewX - 60);        //            exv1.setVisibility(View.INVISIBLE);        exa1.stop();        exv1.setLocation((int) mNewY - 80, (int) mNewX - 60);        exv1.setVisibility(View.VISIBLE);        //            exa1 = (AnimationDrawable) exv1.getBackground();        //            exa1.setOneShot(true);        exa1.start();        //设置mLayoutShowValue可见 :        mLayoutShowValue.setVisibility(View.VISIBLE);    }    private void setBrightness(final int brightness) {        if (mMasterIntentServiceBinder != null) {            if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                return;            }        } else {            UIUtil.toast(activity, "正在加载中 ! . . .", true);            return;        }        EXECUTOR_SERVICE.execute(new Runnable() {            @Override            public void run() {                // 变更亮度                mMasterIntentServiceBinder.setBrightness(brightness);            }        });    }    /**     * 当前gama     *     * @param percent     */    //private int mCameraGamma = 0;    public int mGamma = -1;    private void onGammaSlide(final float percent) {        if (mMasterIntentServiceBinder != null) {            if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                return;            }        } else {            UIUtil.toast(activity, "正在加载中 ! . . .", true);            return;        }        if (mGamma == -1) {            //            Log.v("test", "onGammaSlide: -1!!!!");            mGamma = mMasterIntentServiceBinder.getGamma();            if (mGamma < 0)                mGamma = 0;        }        //20170911       /* runOnUiThread(new Runnable() {            @Override            public void run() {                mMyHanlder.removeMessages(EXECUTE_FOCUS_CAMMAND);   //2016.12.28 移除执行对焦操作命令的事件 ;                mMyHanlder.removeMessages(DISMISS_HANDLER);            }        });*/        runOnUiThread(new Runnable() {            @Override            public void run() {                // 显示                mOperationBg.setImageResource(R.mipmap.mf_bg);                //mISOBrightnessLayout.setVisibility(View.VISIBLE);            }        });        int diff = 0;        //int diffValue = 0;        //2016.10.08 : 修改 : 添加对焦按钮对焦 兼容 :        if (Math.abs(percent) >= 1.0) {            if (CameraServerHandler.USE_USART) {                if (1 == percent) {     //1 一档 低速 正向                    diff = 32;//发送时设置32步为低速,相对于 2步                    //20170414修改                    int gamma = BaseApplication.getInstance().getGamma();                    gamma = gamma + 2;                    if (gamma > ConstantUtil.MAXGAMMA) {                        gamma = ConstantUtil.MAXGAMMA;                    }                    BaseApplication.getInstance().setGamma(gamma);                    mMasterIntentServiceBinder.setAotoFocusGame(diff, true, BaseApplication.getInstance().getGamma(), "00");                    mMasterIntentServiceBinder.setUartGamma(gamma);                } else if (2 == percent) {  //2 二档 中速 正向                    diff = 64;                    //20170414修改                    int gamma = BaseApplication.getInstance().getGamma();                    gamma = gamma + 64;                    if (gamma > ConstantUtil.MAXGAMMA) {                        gamma = ConstantUtil.MAXGAMMA;                    }                    BaseApplication.getInstance().setGamma(gamma);                    mMasterIntentServiceBinder.setAotoFocusGame(diff, true, BaseApplication.getInstance().getGamma(), "08");                    mMasterIntentServiceBinder.setUartGamma(gamma);                } else if (3 == percent) {  //3 三档 高速 正向                    diff = 1024;                    //20170414修改                    int gamma = BaseApplication.getInstance().getGamma();                    gamma = gamma + 1024;                    if (gamma > ConstantUtil.MAXGAMMA) {                        gamma = ConstantUtil.MAXGAMMA;                    }                    BaseApplication.getInstance().setGamma(gamma);                    mMasterIntentServiceBinder.setAotoFocusGame(diff, true, BaseApplication.getInstance().getGamma(), "09");                    mMasterIntentServiceBinder.setUartGamma(gamma);                } else if (-1 == percent) { //1 一档 低速 反向                    diff = 32;//发送时设置32步为低速,相对于 2步                    //20170414修改                    int gamma = BaseApplication.getInstance().getGamma();                    if (gamma >= 2) {                        gamma = gamma - 2;                        BaseApplication.getInstance().setGamma(gamma);                    } else                        BaseApplication.getInstance().setGamma(0);                    mMasterIntentServiceBinder.setAotoFocusGame(diff, false, BaseApplication.getInstance().getGamma(), "00");                    mMasterIntentServiceBinder.setUartGamma(gamma);                } else if (-2 == percent) { //2 二档 中速 反向                    diff = 64;                    //20170414修改                    int gamma = BaseApplication.getInstance().getGamma();                    if (gamma >= 64) {                        gamma = gamma - 64;                        BaseApplication.getInstance().setGamma(gamma);                    } else                        BaseApplication.getInstance().setGamma(0);                    mMasterIntentServiceBinder.setAotoFocusGame(diff, false, BaseApplication.getInstance().getGamma(), "08");                    mMasterIntentServiceBinder.setUartGamma(gamma);                } else if (-3 == percent) { //3 三档 高速 反向                    diff = 1024;                    //20170414修改                    int gamma = BaseApplication.getInstance().getGamma();                    if (gamma >= 1024) {                        gamma = gamma - 1024;                        BaseApplication.getInstance().setGamma(gamma);                    } else                        BaseApplication.getInstance().setGamma(0);                    mMasterIntentServiceBinder.setAotoFocusGame(diff, false, BaseApplication.getInstance().getGamma(), "09");                    mMasterIntentServiceBinder.setUartGamma(gamma);                }                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        int gamma = BaseApplication.getInstance().getGamma();                        mOperationPercent.setText(String.valueOf(gamma));                    }                });                return;            } else {                if (1 == percent) {     //1 一档 低速 正向                    diff = 1;                } else if (2 == percent) {  //2 二档 中速 正向                    diff = 11;                } else if (3 == percent) {  //3 三档 高速 正向                    diff = 21;                } else if (-1 == percent) { //1 一档 低速 反向                    diff = -1;                } else if (-2 == percent) { //2 二档 中速 反向                    diff = -11;                } else if (-3 == percent) { //3 三档 高速 反向                    diff = -21;                }            }        } else {            if (CameraServerHandler.USE_USART) {    //使用串口控制 ;                //2016.07.19 修改                if (Math.abs(percent) < 0.4) {                    //diff = (int) ( 10 * percent + 0.5);                    diff = 32 * (percent > 0 ? 1 : -1);                    //Log.v("test", "0.4！！！！");                } else if (Math.abs(percent) < 0.5) {                    //diff = (int) (20 * percent + 0.5);                    diff = 320 * (percent > 0 ? 1 : -1);                    //Log.v("test", "0.6！！！！");                } else if (Math.abs(percent) < 0.7) {                    //diff = (int) (40 * percent + 0.5);                    diff = 3200 * (percent > 0 ? 1 : -1);                    //Log.v("test", "0.8！！！！");                } else if (Math.abs(percent) < 0.9) {                    //diff = (int) (40 * percent + 0.5);                    diff = 32000 * (percent > 0 ? 1 : -1);                    //Log.v("test", "大0.8！！！！");                } else if (Math.abs(percent) >= 0.9) {                    //diff = (int) (40 * percent + 0.5);                    diff = 320000 * (percent > 0 ? 1 : -1);                    //Log.v("test", "大0.8！！！！");                }            } else {                //2016.07.19 修改                if (Math.abs(percent) < 0.4) {                    //diff = (int) ( 10 * percent + 0.5);                    diff = 1 * (percent > 0 ? 1 : -1);                    //Log.v("test", "0.4！！！！");                } else if (Math.abs(percent) < 0.5) {                    //diff = (int) (20 * percent + 0.5);                    diff = 9 * (percent > 0 ? 1 : -1);                    //Log.v("test", "0.6！！！！");                } else if (Math.abs(percent) < 0.7) {                    //diff = (int) (40 * percent + 0.5);                    diff = 11 * (percent > 0 ? 1 : -1);                    //Log.v("test", "0.8！！！！");                } else if (Math.abs(percent) < 0.9) {                    //diff = (int) (40 * percent + 0.5);                    diff = 21 * (percent > 0 ? 1 : -1);                    //Log.v("test", "大0.8！！！！");                } else if (Math.abs(percent) >= 0.9) {                    //diff = (int) (40 * percent + 0.5);                    diff = 100 * (percent > 0 ? 1 : -1);                    //Log.v("test", "大0.8！！！！");                }            }        }        //2016.07.28 : 新增 :        //获取上一次保存的对焦位置值 : gamma :        //2016.08.19 : 解决因全局变量mGamma突然变-1而导致的设置gamma数值突然变0的bug : 当判断gamma值为-1时 , 退出当前运算行程 ;        if (mGamma == -1)            return;        int before_index = mGamma;        int newGamma = before_index + diff;        if (newGamma < 0) {            newGamma = 0;        }        //2016.12.28 : 注释掉 , 将操作移到Handle中处理 ;        //        setGamma(newGamma);        final int fnewGamma = newGamma;        mGamma = fnewGamma;        //2016.07.27 新增 : 手动滑动触发快速对焦判断 :        if (Math.abs(diff) > 10) {            //            Log.i("test", "MasterActivity setGamma startManualAutoFocus " + diff + " ==== ");            //            mMasterIntentServiceBinder.startManualAutoFocus(diff); //2016-08-04 屏蔽 pei        }        Runnable thread = new Runnable() {            @Override            public void run() {                //向新线程中的Handler发送消息 ;                mMyHanlder.sendMessageDelayed(mMyHanlder.obtainMessage(EXECUTE_FOCUS_CAMMAND, fnewGamma, 0), 100);                // SPUtils.put(MasterActivity.this, "gamma", fnewGamma);                BaseApplication.getInstance().setGamma(fnewGamma);                mOperationPercent.setText(String.valueOf(fnewGamma));            }        };        runOnUiThread(thread);    }    private void setGamma(final int gamma) {        if (mMasterIntentServiceBinder != null) {            if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                return;            }        } else {            UIUtil.toast(activity, "正在加载中 ! . . .", true);            return;        }        if (isFocusDelayTimeOut()) {            EXECUTOR_SERVICE.execute(new Runnable() {                @Override                public void run() {                    // 变更gamma                    //Log.v("test", "setgamma:" + gamma);                    mMasterIntentServiceBinder.setGamma(gamma);                    //   int tmp = mMasterIntentServiceBinder.getGamma();//2016-08-04 屏蔽pei                }            });        }    }    /**     * 最大ISO     */    //  private int mMaxISO = 100;    /**     * 当前ISO     */    private int mISO = -1;    public void setGain(final int index) {        if (mMasterIntentServiceBinder != null) {            if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                return;            }        } else {            UIUtil.toast(activity, "正在加载中 ! . . .", true);            return;        }        EXECUTOR_SERVICE.execute(new Runnable() {            @Override            public void run() {                // 变更ISO                mMasterIntentServiceBinder.setGain(index);            }        });    }    private Timer brightness_iso_Timer;    private void startBrightness_Iso_LongClickTimer(boolean isIso, final int value, int delay) {        if (isIso) {            mMyHanlder.removeMessages(DISMISS_ISO_BUTTON);            if (mISO_buttonUp.getVisibility() != View.VISIBLE) {                mISO_buttonUp.setVisibility(View.VISIBLE);            }            if (brightness_iso_Timer == null) {                //控件长按对焦定时器 :                brightness_iso_Timer = new Timer();                brightness_iso_Timer.scheduleAtFixedRate(new TimerTask() {                    @Override                    public void run() {                        int mvalue = 100;                        int mgain = BaseApplication.getInstance().getGain();                        if (value < 0) {                            if (mgain == 100)                                mvalue = mgain - 20;                            else                                mvalue = mgain - 16;                            if (mvalue < 0) {                                mvalue = 0;                            }                        } else {                            if (mgain == 80) {                                mvalue = mgain + 20;                            } else {                                mvalue = mgain + 16;                            }                            if (mvalue > mMaxISO) {                                mvalue = mMaxISO;                            }                        }                        /*switch (mgain) {                            case 0:                                if (value < 0) {                                    mvalue = 0;                                } else {                                    mvalue = 16;                                }                                break;                            case 16:                                if (value < 0) {                                    mvalue = mgain - 16;                                } else {                                    mvalue = mgain + 16;                                }                                break;                            case 32:                                if (value < 0) {                                    mvalue = mgain - 16;                                } else {                                    mvalue = mgain + 16;                                }                                break;                            case 48:                                if (value < 0) {                                    mvalue = mgain - 16;                                } else {                                    mvalue = mgain + 16;                                }                                break;                            case 64:                                if (value < 0) {                                    mvalue = mgain - 16;                                } else {                                    mvalue = mgain + 16;                                }                                break;                            case 80:                                if (value < 0) {                                    mvalue = mgain - 16;                                } else {                                    mvalue = mgain + 20;                                }                                break;                            case 100:                                if (value < 0) {                                    mvalue = mgain - 20;                                } else {                                    mvalue = mgain + 0;                                }                                break;                        }*/                        mOnISOSlide(mvalue);                    }                }, 0, delay);            }        } else {            mMyHanlder.removeMessages(DISMISS_BRIGTHNESS_BUTTON);            if (mBright_SetUp.getVisibility() != View.VISIBLE) {                mBright_SetUp.setVisibility(View.VISIBLE);            }            if (brightness_iso_Timer == null) {                //控件长按对焦定时器 :                brightness_iso_Timer = new Timer();                brightness_iso_Timer.scheduleAtFixedRate(new TimerTask() {                    @Override                    public void run() {                        int mvalue = 0;                        int mgain1 = BaseApplication.getInstance().getBrightness();                        switch (value) {                            case 2:                                mvalue = mgain1 - 1000;                                if (mvalue < 0) {                                    mvalue = 0;                                }                                break;                            case 3:                                mvalue = mgain1 - 50;                                if (mvalue < 0) {                                    mvalue = 0;                                }                                break;                            case 4:                                mvalue = mgain1 - 1;                                if (mvalue < 0) {                                    mvalue = 0;                                }                                break;                            case 5:                                mvalue = mgain1 + 1000;                                if (mvalue > mMaxBrightness) {                                    mvalue = mMaxBrightness;                                }                                break;                            case 6:                                mvalue = mgain1 + 50;                                if (mvalue > mMaxBrightness) {                                    mvalue = mMaxBrightness;                                }                                break;                            case 7:                                mvalue = mgain1 + 1;                                if (mvalue > mMaxBrightness) {                                    mvalue = mMaxBrightness;                                }                                break;                        }                        mOnBrightnessSlide(mvalue);                    }                }, 0, delay);            }        }    }    private void mOnISOSlide(final int value) {        if (mMasterIntentServiceBinder != null) {            if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                return;            }        } else {            UIUtil.toast(activity, "正在加载中 ! . . .", true);            return;        }        if (mISO == -1) {            mISO = mMasterIntentServiceBinder.getGain();            if (mISO < 0)                mISO = 0;        }        runOnUiThread(new Runnable() {            @Override            public void run() {                // 显示                mOperationBg.setImageResource(R.mipmap.iso);                // mISOBrightnessLayout.setVisibility(View.VISIBLE);            }        });        runOnUiThread(new Runnable() {            @Override            public void run() {                mMyHanlder.removeMessages(EXECUTE_ISO_CAMMAND);   //2016.12.28 移除执行调节ISO操作命令的事件 ;                String label = "";                int gain = 0;                switch (value) {                    case 0:                        label = "100";                        gain = 0;                        break;                    case 16:                        label = "200";                        gain = 16;                        break;                    case 32:                        label = "400";                        gain = 32;                        break;                    case 48:                        label = "800";                        gain = 48;                        break;                    case 64:                        label = "1600";                        gain = 64;                        break;                    case 80:                        label = "3200";                        gain = 80;                        break;                    case 100:                        label = "6400";                        gain = 100;                        break;                }                int mresult = Integer.valueOf(gain);                BaseApplication.getInstance().setGain(mresult);                //向新线程中的Handler发送消息 ;                mMyHanlder.sendMessageDelayed(mMyHanlder.obtainMessage(EXECUTE_ISO_CAMMAND, gain, 0), 100);                // 变更进度条                mOperationPercent.setText(label);            }        });    }    private void mOnBrightnessSlide(int value) {        if (mMasterIntentServiceBinder != null) {            if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                return;            }        } else {            UIUtil.toast(activity, "正在加载中 ! . . .", true);            return;        }        if (mBrightness == -1) {            mBrightness = mMasterIntentServiceBinder.getBrightness();            if (mBrightness < 0)                mBrightness = 0;        }        runOnUiThread(new Runnable() {            @Override            public void run() {                mOperationBg.setImageResource(R.mipmap.brightness_bg);                // mISOBrightnessLayout.setVisibility(View.VISIBLE);            }        });        runOnUiThread(new Runnable() {            @Override            public void run() {                mMyHanlder.removeMessages(EXECUTE_BRIGHTNESS_CAMMAND);   //2016.12.28 移除执行调节亮度操作命令的事件 ;            }        });        final int result = value;        runOnUiThread(new Runnable() {            @Override            public void run() {                //向新线程中的Handler发送消息 ;                mMyHanlder.sendMessageDelayed(mMyHanlder.obtainMessage(EXECUTE_BRIGHTNESS_CAMMAND, result, 0), 100);                BaseApplication.getInstance().setBrightness(result);                // 变更进度条                mOperationPercent.setText(String.valueOf(result));            }        });    }    private void stopBrightness_Iso_LongClieckTimer(boolean isIso) {        if (isIso) {            mMyHanlder.sendEmptyMessageDelayed(SHOW_ISO_BUTTON, 250);    //结束250ms后 显示 对焦按钮 ;            mMyHanlder.sendEmptyMessageDelayed(DISMISS_ISO_BUTTON, 3000);    //结束4s后 隐藏 对焦按钮 ;        } else {            mMyHanlder.sendEmptyMessageDelayed(SHOW_BRIGTHNESS_BUTTON, 250);    //结束250ms后 显示 对焦按钮 ;            mMyHanlder.sendEmptyMessageDelayed(DISMISS_BRIGTHNESS_BUTTON, 3000);    //结束4s后 隐藏 对焦按钮 ;        }        if (brightness_iso_Timer != null) {            brightness_iso_Timer.cancel();            brightness_iso_Timer = null;            mMyHanlder.removeMessages(DISMISS_HANDLER);            mMyHanlder.sendEmptyMessageDelayed(DISMISS_HANDLER, 1000);  //延时500ms后        }    }    //控件长按对焦定时器 :    private Timer focusTimer;    private boolean longClicked = false;    //private View currentView = null;    private void startLongClickTimer(final int value, final int delay) {        if (mMasterIntentServiceBinder.getObjectiveSwithState(true)) {            // UIUtil.toast(activity, "机器正忙，请稍等 ! ", true);            return;        }        mMyHanlder.removeMessages(DISMISS_HANDLER);        mMyHanlder.removeMessages(DISMISS_FOCUS_ClICK_BUTTON);        if (mFocusButtonLayout.getVisibility() != View.VISIBLE) {            mFocusButtonLayout.setVisibility(View.VISIBLE);        }        longClicked = true;        if (focusTimer == null) {            //控件长按对焦定时器 :            focusTimer = new Timer();            focusTimer.scheduleAtFixedRate(new TimerTask() {                @Override                public void run() {                    if (!longClicked) {                        if (focusTimer != null) {                            //物镜切换控制耐久测试 :                            focusTimer.cancel();                        }                    }                    onGammaSlide(value);                }            }, 0, delay);        }    }    private void stopLongClickTimer() {        //滑动对焦手势结束后显示 按键对焦按钮 :        mMyHanlder.sendEmptyMessageDelayed(SHOW_FOCUS_ClICK_BUTTON, 250);    //结束250ms后 显示 对焦按钮 ;        mMyHanlder.sendEmptyMessageDelayed(DISMISS_FOCUS_ClICK_BUTTON, 5000);    //结束4s后 隐藏 对焦按钮 ;        longClicked = false;        if (focusTimer != null) {            //物镜切换控制耐久测试 :            focusTimer.cancel();            focusTimer = null;            mMyHanlder.sendEmptyMessageDelayed(DISMISS_HANDLER, 250);  //延时500ms后 , 隐藏显示        }    }    private Button reNameDetermine;    private EditText reNameEt;    private Button reNameCancel;    private TextView oldReName;    private int showcount = 0;    private void showFileRename() {        showcount++;        final String scaledPath = FileUtils.getNewestPicture(getApplicationContext(), Environment.DIRECTORY_DCIM, ConstantUtil.currentCaptureName);//获得第一张图片        String ps[] = scaledPath.split("/");        final String p[] = ps[ps.length - 1].split("-");        if (scaledPath == null) {            return;        }        int i = scaledPath.indexOf(".");        final String path = scaledPath.substring(0, i) + ".bmp";        final String oldname = scaledPath.substring(scaledPath.lastIndexOf("/"), i);        String substring = path.substring(0, path.lastIndexOf("/"));        String dir = substring.substring(0, substring.lastIndexOf("/"));        final String bigdir = dir + "/big";        final String requestdir = dir + "/request";        if (!path.equals(ConstantUtil.currentCaptureName) && showcount < 10) {            showFileRename();            return;        }        showcount = 0;        final Dialog renameDialog = new Dialog(activity, R.style.Dialog_Radio);        renameDialog.setContentView(R.layout.dialog_filerename);        renameDialog.setCancelable(false);        renameDialog.setCanceledOnTouchOutside(false);        oldReName = ((TextView) renameDialog.findViewById(R.id.oldReName));        reNameEt = ((EditText) renameDialog.findViewById(R.id.reFileNameEt));        reNameDetermine = ((Button) renameDialog.findViewById(R.id.reNameDetermine));        reNameCancel = ((Button) renameDialog.findViewById(R.id.reNameCancel));        String[] oldPaths = path.split("/");        String oldPath = oldPaths[oldPaths.length - 1];        String displayFileName = oldPath;        oldReName.setText(FileUtils.replaceFileName(displayFileName));        reNameDetermine.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String newpathName = reNameEt.getText().toString().trim();                if (newpathName.contains("/") || newpathName.contains("#") || newpathName.contains("%") || newpathName.contains("?")) {                    UIUtil.toast(activity, "文件名中不能包含 # % ? / 等符号", false);                    return;                }                String newScaledName = newpathName + ".scaled.bmp";                String[] fileNames = path.split("/");                String[] scaledFileNames = scaledPath.split("/");                String fileDir = new String();                String scaledFileDir = new String();                for (int i = 0; i < scaledFileNames.length - 1; i++) {                    scaledFileDir = scaledFileDir + scaledFileNames[i] + "/";                }                for (int i = 0; i < fileNames.length - 1; i++) {                    fileDir = fileDir + fileNames[i] + "/";                }                List<File> pngFiles = PictureUtils.getPictures(getApplicationContext());                for (int i1 = 0; i1 < pngFiles.size(); i1++) {                    String mfilename = pngFiles.get(i1).getName().trim();                    if ((newpathName.trim() + ".bmp").equals(mfilename.substring(7))) {                        runOnUiThread(new Runnable() {                            @Override                            public void run() {                                UIUtil.toast(MasterActivity.this, "该文件已经存在,请重新输入!", false);                            }                        });                        return;                    }                }                if (newpathName == null || newpathName.equals("")) {                    runOnUiThread(new Runnable() {                        @Override                        public void run() {                            UIUtil.toast(MasterActivity.this, "文件名不能为空!", false);                        }                    });                    return;                } else {                    runOnUiThread(new Runnable() {                        @Override                        public void run() {                            UIUtil.toast(MasterActivity.this, "重命名成功!", false);                        }                    });                    String oldScaledjpgpath = requestdir + oldname + ".scaled.jpg";                    String newScalejpgpat = requestdir + "/" + p[0] + "-" + newpathName + ".scaled.jpg";                    FileUtils.fileRemane(bigdir + oldname + ".bmp", scaledPath, bigdir + "/" + p[0] + "-" + newpathName + ".bmp", scaledFileDir + p[0] + "-" + newScaledName, oldScaledjpgpath, newScalejpgpat);                    renameDialog.dismiss();                }            }        });        reNameCancel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                renameDialog.dismiss();            }        });        renameDialog.show();    }    private boolean isStartSendMessage = true;    private String currentsDirection;    private static ScheduledExecutorService mService = Executors.newScheduledThreadPool(1);    private void rockerDirection(String direction, float x, float y) {        if (direction == null)            return;        if (direction.equals("上")) {            sendBluetoothUartMessage(false, true, (int) y);        } else if (direction.equals("下")) {            sendBluetoothUartMessage(false, false, (int) y);        } else if (direction.equals("左")) {            sendBluetoothUartMessage(true, false, (int) x);        } else if (direction.equals("右")) {            sendBluetoothUartMessage(true, true, (int) x);        }    }    private String lastSpeed;    private void sendBluetoothUartMessage(boolean isx_or_y, boolean isup_or_domn, int step) {        String sendstr = "4A504C59";        String speed = "";        String mstep = "64";        step = Math.abs(step);        if (step > 70) {            speed = "0a";            //mstep = "20";        } else if (step > 30) {            speed = "08";            //mstep = "09";        } else {            speed = "01";            //mstep = "02";        }        //如果档位更换，则停止再重新运行        if (lastSpeed != speed) {            String closeAllstr = "4A504C59" + "15" + "00000000000000";            if (ConstantUtil.CONNECT_BLUE_NAME == "" || ConstantUtil.CONNECT_BLUE_NAME == null)                return;            blueUtil.sendMessageHandle(closeAllstr);            lastSpeed = speed;        }        Log.w("MasterActivity", "mstep=" + mstep + "  step=" + step);        lastSpeed = speed;        //如果是左右 X轴 电机5        if (isx_or_y) {            //如果向右 正转            if (isup_or_domn) {                sendstr = sendstr + "03" + "aa" + "00" + mstep + "55" + speed + "0000";            } else {                sendstr = sendstr + "03" + "55" + "00" + mstep + "55" + speed + "0000";            }        } else {            //如果向上 Y轴  反转            if (isup_or_domn) {                sendstr = sendstr + "04" + "aa" + "00" + mstep + "55" + speed + "0000";            } else {                sendstr = sendstr + "04" + "55" + "00" + mstep + "55" + speed + "0000";            }        }        if (ConstantUtil.CONNECT_BLUE_NAME == "" || ConstantUtil.CONNECT_BLUE_NAME == null)            return;        blueUtil.sendMessageHandle(sendstr);    }    private int timerStep = 50;    private void initListener() {        //2017.01.07 : 添加摇杆控件的监听 :        //        if (mRockerView != null) {        //        mRockerView.setCallBackMode(RockerView.CallBackMode.CALL_BACK_MODE_STATE_CHANGE);   // 只有状态变化的时候才回调        mRockerView.setCallBackMode(RockerView.CallBackMode.CALL_BACK_MODE_MOVE);       // 有移动就立刻回调        mRockerView.setOnShakeListener(RockerView.DirectionMode.DIRECTION_4_ROTATE_45, new RockerView.OnShakeListener() {            @Override            public void onStart() {            }            @Override            public void direction(RockerView.Direction direction) {                //                    mLogLeft.setText("摇动方向 : " + getDirection(direction));                Log.w(TAG, "摇动方向 : " + getDirection(direction));                showAllView();                currentsDirection = getDirection(direction);            }            @Override            public void onFinish() {            }        });        mRockerView.setOnAngleChangeListener(new RockerView.OnAngleChangeListener() {            @Override            public void onStart() {            }            @Override            public void angle(double angle, float lenXY, final float lenX, final float lenY) {                //                    mLogRight.setText("摇动角度 : " + angle);                // Log.w(TAG, "摇动角度 : " + angle + " 比例力度 : " + lenXY + " X轴力度 : " + lenX + " Y轴力度 : " + lenY);                //sendBluetoothUartMessage(currentsDirection,lenX,lenY);                rockerDirection(currentsDirection, lenX, lenY);               /* if (isStartSendMessage) {                    isStartSendMessage = false;                    mService.schedule(new Runnable() {                        @Override                        public void run() {                            isStartSendMessage = true;                           *//* if(Math.abs(lenX)>50||Math.abs(lenY)>50){                                timerStep  = 10;                            }else if(Math.abs(lenX)>30||Math.abs(lenY)>30) {                                timerStep = 10;                            }else {                                timerStep = 500;                            }*//*                        }                    }, timerStep, TimeUnit.MILLISECONDS);                }*/            }            @Override            public void onFinish() {                Log.w(TAG, "摇动 : onFinish");                //关闭所有摇杆电机                String closeAllstr = "4A504C59" + "15" + "00000000000000";                blueUtil.sendMessageHandle(closeAllstr);                FileUtils.writeFileToLogFolder("用户使用了摇杆");            }        });        mFocusButtonDownMax.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                // 处理长按、单击、双击按键                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    if (!ConstantUtil.isAutoFocusFinish) {                        UIUtil.toast(activity, "请停止自动对焦后再操作 ! ", true);                    } else                        startLongClickTimer(-3, 1000);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongClickTimer();                    FileUtils.writeFileToLogFolder("用户调节对焦按键：DownMax");                    if (mMasterIntentServiceBinder != null)                        mMasterIntentServiceBinder.PutConfigurationParameter();                }                return false;            }        });        mFocusButtonDownMid.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                // 处理长按、单击、双击按键                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    if (!ConstantUtil.isAutoFocusFinish) {                        UIUtil.toast(activity, "请停止自动对焦后再操作 ! ", true);                    } else                        startLongClickTimer(-2, 500);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongClickTimer();                    FileUtils.writeFileToLogFolder("用户调节对焦按键：DownMid");                    if (mMasterIntentServiceBinder != null)                        mMasterIntentServiceBinder.PutConfigurationParameter();                }                return false;            }        });        mFocusButtonDownMin.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                // 处理长按、单击、双击按键                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    if (!ConstantUtil.isAutoFocusFinish) {                        UIUtil.toast(activity, "请停止自动对焦后再操作 ! ", true);                    } else                        startLongClickTimer(-1, 250);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongClickTimer();                    FileUtils.writeFileToLogFolder("用户调节对焦按键：DownMin");                    if (mMasterIntentServiceBinder != null)                        mMasterIntentServiceBinder.PutConfigurationParameter();                }                return false;            }        });        mFocusButtonUpMax.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                // 处理长按、单击、双击按键                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    if (!ConstantUtil.isAutoFocusFinish) {                        UIUtil.toast(activity, "请停止自动对焦后再操作 ! ", true);                    } else                        startLongClickTimer(3, 1000);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongClickTimer();                    FileUtils.writeFileToLogFolder("用户调节对焦按键：DownUpMax");                    if (mMasterIntentServiceBinder != null)                        mMasterIntentServiceBinder.PutConfigurationParameter();                }                return false;            }        });        mFocusButtonUpMid.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                // 处理长按、单击、双击按键                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    if (!ConstantUtil.isAutoFocusFinish) {                        UIUtil.toast(activity, "请停止自动对焦后再操作 ! ", true);                    } else                        startLongClickTimer(2, 500);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongClickTimer();                    FileUtils.writeFileToLogFolder("用户调节对焦按键：DownUpMid");                    if (mMasterIntentServiceBinder != null)                        mMasterIntentServiceBinder.PutConfigurationParameter();                }                return false;            }        });        mFocusButtonUpMin.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                // 处理长按、单击、双击按键                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    if (!ConstantUtil.isAutoFocusFinish) {                        UIUtil.toast(activity, "请停止自动对焦后再操作 ! ", true);                    } else                        startLongClickTimer(1, 250);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopLongClickTimer();                    FileUtils.writeFileToLogFolder("用户调节对焦按键：DownUpMin");                    if (mMasterIntentServiceBinder != null)                        mMasterIntentServiceBinder.PutConfigurationParameter();                }                return false;            }        });        //ISO按键监听        mISO_buttonDown.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                // 处理长按、单击、双击按键                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startBrightness_Iso_LongClickTimer(true, -1, 250);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopBrightness_Iso_LongClieckTimer(true);                    FileUtils.writeFileToLogFolder("用户调节ISO按键：Down");                    if (mMasterIntentServiceBinder != null)                        mMasterIntentServiceBinder.PutConfigurationParameter();                }                return true;            }        });        mISO_buttonUp.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                // 处理长按、单击、双击按键                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startBrightness_Iso_LongClickTimer(true, 1, 250);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopBrightness_Iso_LongClieckTimer(true);                    FileUtils.writeFileToLogFolder("用户调节ISO按键：Up");                    if (mMasterIntentServiceBinder != null)                        mMasterIntentServiceBinder.PutConfigurationParameter();                }                return true;            }        });        //亮度按键监听        mBrightness_Down_max.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                // 处理长按、单击、双击按键                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startBrightness_Iso_LongClickTimer(false, 2, 250);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopBrightness_Iso_LongClieckTimer(false);                    FileUtils.writeFileToLogFolder("用户调节亮度按键：DownMax");                    if (mMasterIntentServiceBinder != null)                        mMasterIntentServiceBinder.PutConfigurationParameter();                }                return true;            }        });        mBrightness_Down_mid.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                // 处理长按、单击、双击按键                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startBrightness_Iso_LongClickTimer(false, 3, 250);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopBrightness_Iso_LongClieckTimer(false);                    FileUtils.writeFileToLogFolder("用户调节亮度按键：DownMid");                    if (mMasterIntentServiceBinder != null)                        mMasterIntentServiceBinder.PutConfigurationParameter();                }                return true;            }        });        mBrightness_Down_min.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                // 处理长按、单击、双击按键                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startBrightness_Iso_LongClickTimer(false, 4, 250);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopBrightness_Iso_LongClieckTimer(false);                    FileUtils.writeFileToLogFolder("用户调节亮度按键：DownMin");                    if (mMasterIntentServiceBinder != null)                        mMasterIntentServiceBinder.PutConfigurationParameter();                }                return true;            }        });        mBrightness_Up_max.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                // 处理长按、单击、双击按键                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startBrightness_Iso_LongClickTimer(false, 5, 250);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopBrightness_Iso_LongClieckTimer(false);                    FileUtils.writeFileToLogFolder("用户调节亮度按键：UpMax");                    if (mMasterIntentServiceBinder != null)                        mMasterIntentServiceBinder.PutConfigurationParameter();                }                return true;            }        });        mBrightness_Up_mid.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                // 处理长按、单击、双击按键                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startBrightness_Iso_LongClickTimer(false, 6, 250);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopBrightness_Iso_LongClieckTimer(false);                    FileUtils.writeFileToLogFolder("用户调节亮度按键：UpMid");                    if (mMasterIntentServiceBinder != null)                        mMasterIntentServiceBinder.PutConfigurationParameter();                }                return true;            }        });        mBrightness_Up_min.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                // 处理长按、单击、双击按键                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    startBrightness_Iso_LongClickTimer(false, 7, 250);                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    stopBrightness_Iso_LongClieckTimer(false);                    FileUtils.writeFileToLogFolder("用户调节亮度按键：UpMin");                    if (mMasterIntentServiceBinder != null)                        mMasterIntentServiceBinder.PutConfigurationParameter();                }                return true;            }        });        mRecordButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (!ConstantUtil.isAutoPhotoFinish) {                    UIUtil.toast(activity, "请停止自动拍照后再录制视频 ! ", true);                    return;                }                //禁止短时间操作                if (ConstantUtil.isFastDoubleClick()) {                    return;                }                if (mMasterIntentServiceBinder != null) {                    if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                        UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                        return;                    }                } else {                    UIUtil.toast(activity, "正在加载中 ! . . .", true);                    return;                }                float sdSize = FileUtil.externalSDSize(getApplicationContext());                if (sdSize < 0.5) {                    UIUtil.toast(activity, "内存不够，请导出后在操作！", true);                    if (!mMasterIntentServiceBinder.isRecording()) {                        return;                    }                }                FileUtils.writeFileToLogFolder("用户点击了录制按键");                mMasterIntentServiceBinder.record();            }        });        recordIconView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (!ConstantUtil.isAutoPhotoFinish) {                    UIUtil.toast(activity, "请停止自动拍照后再录制视频 ! ", true);                    return;                }                if (mMasterIntentServiceBinder != null) {                    if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                        UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                        return;                    }                } else {                    UIUtil.toast(activity, "正在加载中 ! . . .", true);                    return;                }                if (ConstantUtil.isFastDoubleClick()) {                    return;                }                float sdSize = FileUtil.externalSDSize(getApplicationContext());                if (sdSize < 0.5) {                    UIUtil.toast(activity, "内存不够，请导出后在操作！", true);                    if (!mMasterIntentServiceBinder.isRecording()) {                        return;                    }                }                FileUtils.writeFileToLogFolder("用户点击了录制按键");                mMasterIntentServiceBinder.record();            }        });        mStillCaptureButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (mMasterIntentServiceBinder != null) {                    if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                        UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                        return;                    }                } else {                    UIUtil.toast(activity, "正在加载中 ! . . .", true);                    return;                }                if (mMasterIntentServiceBinder.isCameraClientNotNull() && mMasterIntentServiceBinder.isRecording()) {                    runOnUiThread(new Runnable() {                        @Override                        public void run() {                            UIUtil.toast(activity, "请先停止录像再进行拍照操作", false);                        }                    });                    return;                }                if (ConstantUtil.isFastDoubleClick()) {                    return;                }                startAutoPhoto();                if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                    UIUtil.toast(activity, "请连接相机!!!", true);                }            }        });        captureIconView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                startAutoTakePhoto();            }        });        btn_photo_album.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //UIUtil.toast(activity, "图片预览", false);                System.gc();                if (mMasterIntentServiceBinder != null) {                    if (mMasterIntentServiceBinder.isCameraClientNotNull()) {                        if (mMasterIntentServiceBinder.isRecording()) {                            UIUtil.toast(activity, "请先停止录像再进行相册操作", false);                            return;                        } else {                            mMasterIntentServiceBinder.clientControl(CameraClient.CLIENT_STOP);                        }                    }                }                // List<String> pictures = FileUtils.getPictures(getApplicationContext(), Environment.DIRECTORY_DCIM, 1);                // List<String> videos = FileUtils.getMovies(getApplicationContext(), 1);                if (ConstantUtil.filenumber > 0) {                    FileUtils.writeFileToLogFolder("用户点击了预览相册");                    mMasterIntentServiceBinder.getObjectiveSwithState(false);//关闭串口动作完成限制                    Intent intent = new Intent(activity, PhotoAlbumActivity.class);                    startActivity(intent);                    //  Bitmap bitmap = mCameraView.captureStillImage();                    //  Log.w(TAG,"mbitmap="+bitmap.getHeight());                } else {                    UIUtil.toast(activity, "暂无任何资源可以访问", false);                }            }        });    }    private void startAutoTakePhoto() {        if (mMasterIntentServiceBinder != null) {            if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                return;            }        } else {            UIUtil.toast(activity, "正在加载中 ! . . .", true);            return;        }        if (mMasterIntentServiceBinder.isCameraClientNotNull() && mMasterIntentServiceBinder.isRecording()) {            runOnUiThread(new Runnable() {                @Override                public void run() {                    UIUtil.toast(activity, "请先停止录像再进行拍照操作", true);                }            });            return;        }        if (ConstantUtil.isFastDoubleClick()) {            return;        }        if (mMasterIntentServiceBinder.isCameraClientNotNull() && !mMasterIntentServiceBinder.isRecording()) {            EXECUTOR_SERVICE.execute(new Runnable() {                @Override                public void run() {                    if (BaseApplication.getInstance().getAutoPhoto_views() == 2) {                        isSartAutoCamare = true;                        runOnUiThread(new Runnable() {                            @Override                            public void run() {                                if (mMasterIntentServiceBinder != null) {                                    mMasterIntentServiceBinder.sendToBackgroundProgram("autophotoview", "visible");                                }                                mButtonCaptureButton.setVisibility(View.VISIBLE);                                autoPhotoTimer.setVisibility(View.VISIBLE);                                // autoPhotoCNumber.setVisibility(View.VISIBLE);                                autoPhotoTimer.setText(ConstantUtil.stopAutoPhotoStr);                                //  autoPhotoCNumber.setText("设定值："+ConstantUtil.ConvergenceNumber+"   当前值："+getLastConverGence());                                if (mMasterIntentServiceBinder != null) {                                    mMasterIntentServiceBinder.sendToBackgroundProgram("autophototimer", ConstantUtil.stopAutoPhotoStr);                                    mMasterIntentServiceBinder.sendToBackgroundProgram("convergence", ConstantUtil.ConvergenceNumber);                                }                                auto_photo_SeekBar.setVisibility(View.VISIBLE);                                auto_photo_SeekBar.setMax(ConstantUtil.autoPhotoCount);                                if (mMasterIntentServiceBinder != null) {                                    mMasterIntentServiceBinder.sendToBackgroundProgram("autophotocount", ConstantUtil.autoPhotoCount + "");                                }                                auto_photo_SeekBar.setProgress(0);                                ConstantUtil.processBarAutoPhoto = 0;                            }                        });                        if (mMasterIntentServiceBinder != null) {                            if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                                UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                                return;                            }                        } else {                            UIUtil.toast(activity, "正在加载中 ! . . .", true);                            return;                        }                        mMasterIntentServiceBinder.startAutoPhoneTimer();                    } else if (BaseApplication.getInstance().getAutoPhoto_views() == 3) {                        isSartAutoCamare = false;                        runOnUiThread(new Runnable() {                            @Override                            public void run() {                                mButtonCaptureButton.setVisibility(View.GONE);                                autoPhotoTimer.setVisibility(View.GONE);                                autoPhotoCNumber.setVisibility(View.GONE);                                auto_photo_SeekBar.setVisibility(View.GONE);                                ConstantUtil.processBarAutoPhoto = 0;                                if (mMasterIntentServiceBinder != null) {                                    mMasterIntentServiceBinder.sendToBackgroundProgram("autophotoview", "gone");                                }                            }                        });                        UIUtil.toast(activity, "已经停止自动拍照", false);                       /* if(BaseApplication.getInstance().getSaturation()==0){                            ConstantUtil.isAutoPhotoFinish = true;                        }*/                        if (mMasterIntentServiceBinder != null) {                            if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                                UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                                return;                            }                        } else {                            UIUtil.toast(activity, "正在加载中 ! . . .", true);                            return;                        }                        if (!ConstantUtil.isAutoPhotoFinish && !ConstantUtil.isUVCClose && ConstantUtil.AUTO_CAPUTER_CLOSEUVC) {                            runOnUiThread(new Runnable() {                                @Override                                public void run() {                                    showLodingDialog("正在完成自动拍照");                                }                            });                            if (mMasterIntentServiceBinder != null) {                                mMasterIntentServiceBinder.sendToBackgroundProgram("stopautophoto", "istostop");                            }                        }                        mMasterIntentServiceBinder.stopAutoPhoneTimer();                    } else {                        isRename_File = true;                        float sdSize = FileUtil.externalSDSize(getApplicationContext());                        if (sdSize < 0.5) {                            UIUtil.toast(activity, "内存不够，请导出后再操作！", true);                            return;                        }                        Log.w("process", "mMasterIntentServiceBinder.capture");                        mMasterIntentServiceBinder.capture();                    }                }            });        }        if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {            UIUtil.toast(activity, "请连接相机!!!", true);        }    }    private void startAutoPhoto() {        if (mMasterIntentServiceBinder.isCameraClientNotNull() && !mMasterIntentServiceBinder.isRecording()) {            EXECUTOR_SERVICE.execute(new Runnable() {                @Override                public void run() {                    final int autoPhoto_views = BaseApplication.getInstance().getAutoPhoto_views();                    // photoFlag = 2 为开始自动拍照 ;                    if (autoPhoto_views == 2) {                        FileUtils.writeFileToLogFolder("用户点击了开始自动拍照");                        runOnUiThread(new Runnable() {                            @Override                            public void run() {                                mButtonCaptureButton.setVisibility(View.VISIBLE);                                autoPhotoTimer.setVisibility(View.VISIBLE);                                // autoPhotoCNumber.setVisibility(View.VISIBLE);                                autoPhotoTimer.setText(ConstantUtil.stopAutoPhotoStr);                                // autoPhotoCNumber.setText("设定值："+ConstantUtil.ConvergenceNumber+"   当前值："+getLastConverGence());                                if (mMasterIntentServiceBinder != null) {                                    mMasterIntentServiceBinder.sendToBackgroundProgram("autophototimer", ConstantUtil.stopAutoPhotoStr);                                    mMasterIntentServiceBinder.sendToBackgroundProgram("convergence", ConstantUtil.ConvergenceNumber);                                }                                auto_photo_SeekBar.setVisibility(View.VISIBLE);                                auto_photo_SeekBar.setMax(ConstantUtil.autoPhotoCount);                                if (mMasterIntentServiceBinder != null) {                                    mMasterIntentServiceBinder.sendToBackgroundProgram("autophotocount", ConstantUtil.autoPhotoCount + "");                                }                                auto_photo_SeekBar.setProgress(0);                                ConstantUtil.processBarAutoPhoto = 0;                                if (mMasterIntentServiceBinder != null) {                                    mMasterIntentServiceBinder.sendToBackgroundProgram("autophotoview", "visible");                                }                            }                        });                        if (mMasterIntentServiceBinder != null) {                            if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                                UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                                return;                            }                        } else {                            UIUtil.toast(activity, "正在加载中 ! . . .", true);                            return;                        }                        mMasterIntentServiceBinder.startAutoPhoneTimer();                    }                    // photoFlag = 3 为结束自动拍照 ;                    else if (autoPhoto_views == 3) {                        FileUtils.writeFileToLogFolder("用户点击了停止自动拍照");                        runOnUiThread(new Runnable() {                            @Override                            public void run() {                                mButtonCaptureButton.setVisibility(View.GONE);                                autoPhotoTimer.setVisibility(View.GONE);                                autoPhotoCNumber.setVisibility(View.GONE);                                auto_photo_SeekBar.setVisibility(View.GONE);                                ConstantUtil.processBarAutoPhoto = 0;                                if (mMasterIntentServiceBinder != null) {                                    mMasterIntentServiceBinder.sendToBackgroundProgram("autophotoview", "gone");                                }                            }                        });                        UIUtil.toast(activity, "已经停止自动拍照", false);                        if (mMasterIntentServiceBinder != null) {                            if (!mMasterIntentServiceBinder.isCameraClientNotNull()) {                                UIUtil.toast(activity, "暂未检查到连接任何摄像头，请先连接", true);                                return;                            }                        } else {                            UIUtil.toast(activity, "正在加载中 ! . . .", true);                            return;                        }                        if (!ConstantUtil.isAutoPhotoFinish && !ConstantUtil.isUVCClose && ConstantUtil.AUTO_CAPUTER_CLOSEUVC) {                            runOnUiThread(new Runnable() {                                @Override                                public void run() {                                    showLodingDialog("正在完成自动拍照");                                }                            });                            if (mMasterIntentServiceBinder != null) {                                mMasterIntentServiceBinder.sendToBackgroundProgram("stopautophoto", "istostop");                            }                        }                        mMasterIntentServiceBinder.stopAutoPhoneTimer();                    } else {                        isRename_File = true;                        float sdSize = FileUtil.externalSDSize(getApplicationContext());                        if (sdSize < 0.5) {                            UIUtil.toast(activity, "内存不够，请导出后再操作！", true);                            return;                        }                        FileUtils.writeFileToLogFolder("用户点击了拍照");                        mMasterIntentServiceBinder.capture();                    }                }            });        }    }    //private boolean isgray=false;    private Dialog progressDialog;    //2016.09.26 : 新增 : 用于弹出拍照数量超过300的警告 !    private Dialog mWarmLimitDialog;    /**     * 读取文件创建时间     */    public class FileComparator implements Comparator<File> {        /* public int compare(File file1, File file2) {             if (file1.lastModified() > file2.lastModified()) {                 return -1;             } else {                 return 1;             }         }*/        public int compare(File file1, File file2) {            //            String x[] = file1.getPath().split("/");            String y[] = file2.getPath().split("/");            //String path = x[x.length-1];            // String path1 = y[y.length-1];            String p1[] = x[x.length - 1].split("-");            String p2[] = y[y.length - 1].split("-");            int f1 = Integer.valueOf(p1[0].substring(2, 6));            int y1 = Integer.valueOf(p2[0].substring(2, 6));            if (f1 > y1) {                return -1;            } else {                return 1;            }        }    }    public ArrayList<File> allFile = new ArrayList<>();    //更新下面图片    private void setNewestImage() {//        EXECUTOR_SERVICE_SCHEDULED.schedule(new Runnable() {//            @Override//            public void run() {//////            }//        },1500,TimeUnit.MILLISECONDS);        EXECUTOR_SERVICE.execute(new Runnable() {            @Override            public void run() {                refreshImage();            }        });    }    private void refreshImage() {        final List<File> pngFiles = PictureUtils.getPicturesScaled(getApplicationContext());        final List<File> moviesFiles = PictureUtils.getMovies(getApplicationContext());        allFile.clear();        allFile.addAll(pngFiles);        allFile.addAll(moviesFiles);        Collections.sort(allFile, new FileComparator());        if (allFile.size() > 0) {            String path[] = allFile.get(0).getPath().split("/");            String p[] = path[path.length - 1].split("-");            ConstantUtil.filenumber = Integer.valueOf(p[0].substring(2, 6));        } else {            ConstantUtil.filenumber = 0;        }        allFile.clear();        if (pngFiles.size() < 1) {            runOnUiThread(new Runnable() {                @Override                public void run() {                    if (moviesFiles.size() < 0) {                        mPhotoCountValueTextView.setText("0");                        btn_photo_album.setBackgroundColor(getResources().getColor(R.color.BLACK));                        //btn_photo_album.setImageBitmap();                        // btn_photo_album.setImageDrawable(getResources().getDrawable(R.drawable.icon_bg_btn_light_black));                    } else {                        mPhotoCountValueTextView.setText(moviesFiles.size() + "P");                        mPhotoCountValueTextView.setTextColor(getResources().getColor(R.color.BLUE));                        //btn_photo_album.setBackgroundColor(getResources().getColor(R.color.BLACK));                        btn_photo_album.setImageDrawable(getResources().getDrawable(R.drawable.icon_bg_btn_light_black));                    }                    mPhotoCountValueColor.setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_green));                    btn_photo_album.setImageURI(null);                }            });            return;        }        Collections.reverse(pngFiles);      //Collections.reverse()反转集合中元素的顺序        Collections.sort(pngFiles, new FileComparator());        //long timer = System.currentTimeMillis() - l;        //  Log.w("MasterActivity","timer="+timer);        final String picture = pngFiles.get(0).getPath();        try {            FileInputStream inputStream = new FileInputStream(picture);            final Bitmap bitmap = BitmapFactory.decodeFileDescriptor(inputStream.getFD());            if (mMasterIntentServiceBinder != null)                mMasterIntentServiceBinder.uadateTPicterFileName(picture);            runOnUiThread(new Runnable() {                @Override                public void run() {                    if (picture != null) {                        if (DEBUG) {                            Logger.v(TAG, picture);                        }                        btn_photo_album.setImageBitmap(bitmap);                        //FrescoTool.displayImage("file://" + picture, btn_photo_album);                    } else {                        //            imageView.setBackgroundResource(R.mipmap.ic_launcher);                        btn_photo_album.setBackgroundColor(getResources().getColor(R.color.BLACK));                        btn_photo_album.setImageURI(null);                        //imageView.setBackgroundColor(R.color.BLACK);                    }                }            });        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }        //2016.09.26 : 新增 : 用于显示当前拍照数量 :        final int pictureCount = pngFiles.size() + moviesFiles.size();        pngFiles.clear();        moviesFiles.clear();        // final int pictureCount = PictureUtils.getPictures(getApplicationContext()).size() + PictureUtils.getMovies(getApplicationContext()).size();        runOnUiThread(new Runnable() {            @Override            public void run() {                mPhotoCountValueTextView.setText(pictureCount + "P");                if (pictureCount <= 800) {                    mPhotoCountValueTextView.setTextColor(getResources().getColor(R.color.BLACK));                    mPhotoCountValueColor.setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_green));                } else if (pictureCount <= 1200) {                    mPhotoCountValueTextView.setTextColor(getResources().getColor(R.color.BLACK));                    mPhotoCountValueColor.setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_orange));                } else if (pictureCount <= 1600) {                    mPhotoCountValueTextView.setTextColor(getResources().getColor(R.color.BLACK));                    mPhotoCountValueColor.setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_red));                } else {                    mPhotoCountValueTextView.setTextColor(getResources().getColor(R.color.BLACK));                    mPhotoCountValueColor.setBackground(getResources().getDrawable(R.drawable.icon_bg_setting_light_red));                    if (!ConstantUtil.isExport)                        showWarmLimitDialog();                }            }        });    }    private void showWarmLimitDialog() {        if (lodingDialog != null) {            if (lodingDialog.isShowing())                return;        }        if (mWarmLimitDialog != null) {            mWarmLimitDialog.dismiss();            mWarmLimitDialog = null;        }        // 初始化对话框        mWarmLimitDialog = new Dialog(activity, R.style.Dialog_Radio);        mWarmLimitDialog.setContentView(R.layout.dialog_warn_limit_toast);        mWarmLimitDialog.setCancelable(true);        mWarmLimitDialog.setCanceledOnTouchOutside(true);        final Button positiveButton = (Button) mWarmLimitDialog.findViewById(R.id.self_check_ok_btn);        if (!ConstantUtil.isAutoPhotoFinish) {            positiveButton.setText("停止");        }        Button negativeButton = (Button) mWarmLimitDialog.findViewById(R.id.self_check_cancel_btn);        positiveButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                // TODO: 2016/9/26                if (mMasterIntentServiceBinder != null) {                    if (!ConstantUtil.isAutoPhotoFinish) {                        if (mMasterIntentServiceBinder != null) {                            mMasterIntentServiceBinder.stopAutoPhoneTimer();                            mMasterIntentServiceBinder.sendToBackgroundProgram("autophotoview", "gone");                            mMyHanlder.sendEmptyMessage(MasterActivity.SHOW_AUTO_PHONE_TIMER);                        }                    } else {                        mMasterIntentServiceBinder.addExportFilesItem();                    }                    mWarmLimitDialog.dismiss();                    mWarmLimitDialog = null;                } else {                    UIUtil.toast(activity, "正在加载中 ! . . .", true);                }            }        });        negativeButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                mWarmLimitDialog.dismiss();                mWarmLimitDialog = null;            }        });        mWarmLimitDialog.show();    }    private String getDirection(RockerView.Direction direction) {        String message = null;        switch (direction) {            case DIRECTION_LEFT:                message = "左";                break;            case DIRECTION_RIGHT:                message = "右";                break;            case DIRECTION_UP:                message = "上";                break;            case DIRECTION_DOWN:                message = "下";                break;            case DIRECTION_UP_LEFT:                message = "左上";                break;            case DIRECTION_UP_RIGHT:                message = "右上";                break;            case DIRECTION_DOWN_LEFT:                message = "左下";                break;            case DIRECTION_DOWN_RIGHT:                message = "右下";                break;            default:                break;        }        return message;    }    private Handler stepTimeHandler;    private Runnable mTicker;    long startTime = 0;    private int seconde = 120;//两分钟倒计时    private int recordingLongTimer = 10800;//最长录制时间 3个小时    public void startTime() {        // 清零 开始计时        seconde = 0;        recordingLongTimer = 10800;        stepTimeTV.setText("00:00:01");        stepTimeHandler = new Handler();        startTime = System.currentTimeMillis();        mTicker = new Runnable() {            public void run() {                seconde--;                recordingLongTimer--;                //两分钟检查一次内存                if (seconde == 0) {                    seconde = 120;                    float sdSize = FileUtil.externalSDSize(getApplicationContext());                    if (sdSize < 0.5) {                        // UIUtil.toast(activity, "内存不够，已停止录制视频！", true);                        if (mMasterIntentServiceBinder != null) {                            mMasterIntentServiceBinder.record();                        }                    }                }                if (recordingLongTimer == 0) {                    if (mMasterIntentServiceBinder != null) {                        mMasterIntentServiceBinder.record();                    }                }                String content = showTimeCount(System.currentTimeMillis() - startTime);                stepTimeTV.setText(content);                if (mMasterIntentServiceBinder != null) {                    mMasterIntentServiceBinder.sendToBackgroundProgram("recodingtime", content);                }                long now = SystemClock.uptimeMillis();                long next = now + (1000 - now % 1000);                stepTimeHandler.postAtTime(mTicker, next);            }        };        //启动计时线程，定时更新        mTicker.run();        timeView.setVisibility(View.VISIBLE);    }    public void stopTime() {        //停止计时 Remove any pending posts of Runnable r that are in the message queue.        if (stepTimeHandler != null)            stepTimeHandler.removeCallbacks(mTicker);        try {            timeView.setVisibility(View.GONE);        } catch (Exception e) {            e.printStackTrace();        }    }    public String showTimeCount(long time) {        if (time >= 360000000) {            return "00:00:00";        }        String timeCount = "";        long hourc = time / 3600000;        String hour = "0" + hourc;        hour = hour.substring(hour.length() - 2, hour.length());        long minuec = (time - hourc * 3600000) / (60000);        String minue = "0" + minuec;        minue = minue.substring(minue.length() - 2, minue.length());        long secc = (time - hourc * 3600000 - minuec * 60000) / 1000;        String sec = "0" + secc;        sec = sec.substring(sec.length() - 2, sec.length());        timeCount = hour + ":" + minue + ":" + sec;        return timeCount;    }    private Dialog Electricdialog;    private boolean isOpen = false;    private boolean isShowLevel = true;    private void minitElectricityAlert(Context context, int electrity) {        if (Electricdialog != null) {            Electricdialog.dismiss();            Electricdialog = null;        }        Electricdialog = new Dialog(MasterActivity.this, R.style.Dialog_Radio);        Electricdialog.setContentView(R.layout.dialog_electric_toast);        Electricdialog.setCancelable(false);        Electricdialog.setCanceledOnTouchOutside(false);        Button button = (Button) Electricdialog.findViewById(R.id.electricity_ok_btn);        TextView electTextView = (TextView) Electricdialog.findViewById(R.id.toast_elect);        TextView msgTextView = (TextView) Electricdialog.findViewById(R.id.toast_msg);        if (electrity <= 30 && electrity > 10) {            msgTextView.setText("电量低\n(请充电)");        } else if (electrity <= 20) {            msgTextView.setText("准备关机\n(请充电)");        }        electTextView.setText("电池只剩" + electrity + "%");        button.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (Electricdialog.isShowing())                    Electricdialog.dismiss();                isOpen = false;                Electricdialog = null;            }        });        Electricdialog.show();        isOpen = true;    }    private BroadcastReceiver batteryLevelReceiver;    @Override    protected void getBatteryPercentage() {        super.getBatteryPercentage();        batteryLevelReceiver = new BroadcastReceiver() {            public void onReceive(Context context, Intent intent) {                float currentLevel = intent.getFloatExtra(BatteryManager.EXTRA_LEVEL, -1f);                float scale = intent.getFloatExtra(BatteryManager.EXTRA_SCALE, -1f);                String action = intent.getAction();                if (action.equals(Intent.ACTION_MEDIA_EJECT)) {                    //USB设备移除，更新UI                    Toast.makeText(context, "USB设备移除", Toast.LENGTH_SHORT).show();                    ConstantUtil.USB_Path = null;                } else if (action.equals(Intent.ACTION_MEDIA_MOUNTED)) {                    //USB设备挂载，更新UI                    String usbPath = intent.getDataString();//（usb在手机上的路径）                    ConstantUtil.USB_Path = usbPath;                    Log.w("receive", "USBPath=" + usbPath);                    Toast.makeText(context, "USB设备移除插入", Toast.LENGTH_SHORT).show();                }                if (currentLevel >= 0 && scale > 0) {                    final int level = (int) (((currentLevel - 9.6f) * 100) / (12.0 - 9.6f));                    runOnUiThread(new Runnable() {                        @Override                        public void run() {                            ConstantUtil.Level = level;                            //如果电压小于或者等于10%V则关机                            if (ConstantUtil.Level <= 10 && ConstantUtil.Level > 1) {                                try {                                    java.lang.Process process = Runtime.getRuntime().exec("su");                                    DataOutputStream out = new DataOutputStream(                                            process.getOutputStream());                                    out.writeBytes("reboot -p\n");                                    out.writeBytes("exit\n");                                    out.flush();                                } catch (IOException e) {                                    e.printStackTrace();                                }                            }                        }                    });                    if (ConstantUtil.Level <= 30 && ConstantUtil.Level > 1 && isShowLevel) {                        isShowLevel = false;                        EXECUTOR_SERVICE_SCHEDULED.schedule(new Runnable() {                            @Override                            public void run() {                                isShowLevel = true;                            }                        }, 180000, TimeUnit.MILLISECONDS);                        //if(!isOpen)                        minitElectricityAlert(BaseApplication.getContext(), ConstantUtil.Level);                    }                }            }        };    }    private final ClientLoginCallback loginCallback = new ClientLoginCallback() {        @Override        public void loginState(boolean result) {            if (result) {                runOnUiThread(new Runnable() {                    @Override                    public void run() {                        if (selecUserDialog.isShowing()) {                            showAllView();                            FileUtils.writeFileToLogFolder("loginState" + " showAllView");                            BaseApplication.DIR_NAME = mSpinner.getSelectedItem().toString().trim();                            ConstantUtil.savaCurrentUser(getApplicationContext(), BaseApplication.DIR_NAME);                            //20170511                            setNewestImage();                            recolor();//更新图片                            selecUserDialog.dismiss();                            selecUserDialog.dismiss();                        }                    }                });            }        }    };}