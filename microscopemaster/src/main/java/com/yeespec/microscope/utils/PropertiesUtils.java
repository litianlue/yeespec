package com.yeespec.microscope.utils;import android.content.Context;import android.util.Log;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.Properties;/** * Created by Mr.Wen on 2017/1/11. * 读写properties配置文件 工具 : */public class PropertiesUtils {    private static Properties mConfigProperties;    private final static String TAG = "PropertiesUtils";    //    private final static String CONFIG_PROPERTIES = "setting.properties";    private final static String CONFIG_PROPERTIES = "config.properties";    //    static {    //        loadProps();    //    }    synchronized static private void loadProps(Context context) {        Log.i(TAG, "开始加载properties文件内容.......");        mConfigProperties = new Properties();        InputStream in = null;        try {            String absolutePath = context.getFilesDir().getAbsolutePath();            File fil = new File(absolutePath + CONFIG_PROPERTIES);            if (!fil.exists()) {                //　 第一种，通过类加载器进行获取properties文件流                //  in = PropertiesUtils.class.getClassLoader().getResourceAsStream("jdbc.properties");                //　  第二种，通过类进行获取properties文件流                in = PropertiesUtils.class.getResourceAsStream("/assets/" + CONFIG_PROPERTIES);                OutputStream output = new FileOutputStream(absolutePath + CONFIG_PROPERTIES);                byte[] buffer = new byte[1024];                int length = in.read(buffer);                while (length > 0) {                    output.write(buffer, 0, length);                    length = in.read(buffer);                }                output.flush();                in.close();                output.close();                in = new FileInputStream(fil);                Log.i(TAG, " getResourceAsStream ...........");            } else {                //                in = context.openFileInput(absolutePath + CONFIG_PROPERTIES);                in = new FileInputStream(fil);                Log.i(TAG, " FileInputStream ...........");            }            mConfigProperties.load(in);        } catch (Exception e) {            saveProperties(mConfigProperties, context);            in = PropertiesUtils.class.getResourceAsStream("/assets/" + CONFIG_PROPERTIES);            try {                mConfigProperties.load(in);            } catch (IOException e1) {                e1.printStackTrace();                Log.e(TAG, "jdbc.properties文件未找到");            }        } finally {            try {                if (null != in)                    in.close();            } catch (IOException e) {                Log.e(TAG, "jdbc.properties文件流关闭出现异常");            }        }        Log.i(TAG, "加载properties文件内容完成...........");        Log.i(TAG, "properties文件内容：" + mConfigProperties);    }   /* //读取properties配置文件    public static Properties getProperties() {        Properties props = new Properties();        try {            //方法一：通过activity中的context攻取setting.properties的FileInputStream            //            InputStream in = c.getAssets().open("appConfig.properties");            //方法二：通过class获取setting.properties的FileInputStream            //            InputStream in = PropertiesUtils.class.getResourceAsStream("/assets/" + CONFIG_PROPERTIES);            props.load(PropertiesUtils.class.getResourceAsStream("/assets/" + CONFIG_PROPERTIES));        } catch (Exception e) {            e.printStackTrace();            try {                saveProperties(props);                //                InputStream in = PropertiesUtils.class.getResourceAsStream("/assets/" + CONFIG_PROPERTIES);                props.load(PropertiesUtils.class.getResourceAsStream("/assets/" + CONFIG_PROPERTIES));                props.clear();            } catch (IOException e1) {                e1.printStackTrace();                return null;            }            return props;        }        return props;    }*/    //读取properties配置文件    public static void saveProperties(Properties properties, Context context) {        FileOutputStream os = null;        try {            String absolutePath = context.getFilesDir().getAbsolutePath();            //            String packageResourcePath = context.getPackageResourcePath();            //            String rootDirectory = Environment.getRootDirectory().getCanonicalPath();            //            String dataDirectory = Environment.getDataDirectory().getCanonicalPath();            //            Log.w(TAG, "absolutePath = " + absolutePath + " , packageResourcePath = " + packageResourcePath + " , rootDirectory = " + rootDirectory + " , dataDirectory = " + dataDirectory);            //context.openFileOutput("config.properties" ,Context.MODE_PRIVATE );            //            File fil = new File(dataDirectory + CONFIG_PROPERTIES);            //            File fil = new File("assets://" + CONFIG_PROPERTIES);            File fil = new File(absolutePath + CONFIG_PROPERTIES);            //            File fil = new File("file://android_asset/" + CONFIG_PROPERTIES);            //            File fil = new File("/assets/" + CONFIG_PROPERTIES);            if (!fil.exists())                fil.createNewFile();            os = new FileOutputStream(fil, false);   //true表示追加打开            properties.store(os, "");   //如果comments不为空，保存后的属性文件第一行会是#comments,表示注释信息；如果为空则没有注释信息。 //注释信息后面是属性文件的当前保存时间信息。        } catch (IOException e) {            e.printStackTrace();        } finally {            try {                if (null != os)                    os.close();            } catch (IOException e1) {                e1.printStackTrace();            }        }    }    /* public String getProperty(String key, Context context) {         if (null == mConfigProperties)             loadProps(context);         return mConfigProperties.getProperty(key);     }     public String getProperty(String key, String defaultValue, Context context) {         if (null == mConfigProperties)             loadProps(context);         return mConfigProperties.getProperty(key, defaultValue);     }     public void setProperty(String key, String value, Context context) {         if (null == mConfigProperties)             loadProps(context);         mConfigProperties.setProperty(key, value);         //        mConfigProperties = null;     } */    //保存配置文件    public static void setConfig(String key, String value, Context context) {        if (null == mConfigProperties)            loadProps(context);        mConfigProperties.setProperty(key, value);        mConfigProperties.put(key, value);        saveProperties(mConfigProperties, context);        //        mConfigProperties = null;    }    //获取配置文件    public static String getConfig(String key, String defaultValue, Context context) {        String result = "";        if (null == mConfigProperties)            loadProps(context);        result = mConfigProperties.getProperty(key, defaultValue).trim();        //        mConfigProperties = null;        return result;    }}