package com.yeespec.libuvccamera.uvccamera.serviceclient;/* * UVCCamera * library and sample to access to UVC web camera on non-rooted Android device * * Copyright (c) 2014-2015 Mr_Wen Mr_Wen@yeespec.com * * File name: CameraClient.java * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. *  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * *  Unless required by applicable law or agreed to in writing, software *  distributed under the License is distributed on an "AS IS" BASIS, *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *  See the License for the specific language governing permissions and *  limitations under the License. * * All files in the folder are under this Apache License, Version 2.0. * Files in the jni/libjpeg, jni/libusb, jin/libuvc, jni/rapidjson folder may have a different license, see the respective files.*/import android.app.Activity;import android.app.ActivityManager;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.content.ServiceConnection;import android.hardware.usb.UsbDevice;import android.os.IBinder;import android.os.Process;import android.os.RemoteException;import android.util.Log;import android.view.Surface;import android.widget.Toast;import com.orhanobut.hawk.Hawk;import com.yeespec.libuvccamera.usb.UVCCamera;import com.yeespec.libuvccamera.uvccamera.service.CameraServerHandler;import com.yeespec.libuvccamera.uvccamera.service.IUVCService;import com.yeespec.libuvccamera.uvccamera.service.IUVCServiceCallback;import com.yeespec.libuvccamera.uvccamera.service.RestartUtil;import com.yeespec.libuvccamera.uvccamera.service.UVCService;import com.yeespec.microscope.master.activity.MasterActivity;import com.yeespec.microscope.master.application.BaseApplication;import com.yeespec.microscope.utils.ConstantUtil;import com.yeespec.microscope.utils.FileUtils;import com.yeespec.microscope.utils.SPHelper;import com.yeespec.microscope.utils.SPUtils;import com.yeespec.microscope.utils.log.Logger;import java.lang.ref.SoftReference;import java.lang.ref.WeakReference;import java.util.Timer;import java.util.TimerTask;import java.util.concurrent.Executors;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.TimeUnit;import static com.yeespec.libuvccamera.uvccamera.service.CameraServerHandler.MSG_GAIN_CONTROL;import static com.yeespec.microscope.master.service.MasterIntentService.EXECUTOR_SERVICE_SCHEDULED;/** * 实现com.serenegiant.service的IUVCServiceCallback.aidl远程接口; */public class CameraClient extends IUVCServiceCallback.Stub implements ICameraClient {    private static final boolean DEBUG = false;    private static final String TAG = "CameraClient";    private static final String TAG_CAMERA = "CameraClientThread";    //    private static final boolean USE_USART = true;      //true为使用串口USART ; false为使用libusb    protected final Activity mWeakContext;    protected final WeakReference<CameraHandler> mWeakHandler;    //    protected UsbDevice mUsbDevice;    protected final Object mServiceSync = new Object();    protected IUVCService mService = null;    protected ICameraClientCallback mListener;    private boolean mIsConnected = false;    public int mServiceId = 0;    //    public static UsbManager mUsbManager;    public static final ScheduledExecutorService RESTART_SERVICE_SCHEDULED = Executors.newScheduledThreadPool(3);    public CameraClient(final Activity context, final ICameraClientCallback listener) {        if (DEBUG)            Log.v(TAG, "Constructor:");        mWeakContext = context;        //        mUsbManager = (UsbManager) context.getSystemService(Context.USB_SERVICE);        FileUtils.writeFileToLogFolder("CameraClient：exception_count=false");        Hawk.put("exception_count", false);        Log.w("cameraclient","exception=========2");       // Hawk.put("mytest", true);        mListener = listener;        mWeakHandler = new WeakReference<CameraHandler>(CameraHandler.createHandler(this));        //2016.09.02 : 新增 ://        RESTART_SERVICE_SCHEDULED.schedule(new Runnable() {//            @Override//            public void run() {//                RestartUtil  restartUtil = new RestartUtil();//                restartUtil.killProcess();//                Boolean exception_count = Hawk.get("exception_count", false);//                Log.w("cameraclient","exception="+exception_count);//            }//        },10000,TimeUnit.MILLISECONDS);        doBindService();    }    @Override    protected void finalize() throws Throwable {        if (DEBUG)            Log.v(TAG, "finalize");        doUnBindService();        super.finalize();    }    @Override    public void select(UsbDevice device) {        if (DEBUG)            Log.v(TAG, "select:device=" + (device != null ? device.getDeviceName() : null));        final IUVCService service = getService();        if (DEBUG)            Logger.v(TAG_CAMERA, "handleSelect:(" + String.valueOf(service != null) + ")" + device.toString());        if (service != null) {            try {                mServiceId = service.select(device, this);                //2016.09.02 : 新增 :                mIsConnected = false;                if (DEBUG)                    Logger.e(TAG_CAMERA, "select:" + mServiceId);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================service.select e=" + e + "==================");                e.printStackTrace();                restartApp();                if (DEBUG)                    Logger.e(TAG_CAMERA, "select:", e);                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                //mServiceSync.notifyAll();            } catch (Exception e) {                e.printStackTrace();            }        }        //        }    }    @Override    public void release() {        //        if (DEBUG)        //            Logger.v(TAG_CAMERA, "handleRelease:");        //        if (mParent != null) {        //        }        if (DEBUG)            Log.v(TAG, "release:" + this);        mWeakHandler.get().sendEmptyMessage(CameraHandler.MSG_RELEASE);        //        mWeakHandler.get().removeMessages(CameraHandler.MESSAGE_REFRESH);        //        mUsbDevice = null;        mIsConnected = false;        doUnBindService();        //20170724    }    @Override    public UsbDevice getDevice() {        //        return mUsbDevice ;        return null;    }    @Override    public void resize(final int width, final int height) {        if (DEBUG)            Log.v(TAG, String.format("resize(%d,%d)", width, height));        //        final CameraHandler handler = mWeakHandler.get();        //        handler.sendMessage(handler.obtainMessage(CameraHandler.MSG_RESIZE, width, height));        //        if (DEBUG)        //            Log.v(TAG, String.format("handleResize(%d,%d)", width, height));        final IUVCService service = getService();        if (service != null)            try {                service.resize(width, height);            } catch (final RemoteException e) {                FileUtils.writeFileToLogFolder("================ service.resize e=" + e + "==================");                restartApp();                e.printStackTrace();                if (DEBUG)                    Log.e(TAG_CAMERA, "handleResize:", e);                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                //mServiceSync.notifyAll();            }    }    @Override    public void connect() {        if (DEBUG)            Logger.v(TAG, "connect:" + this);        //        if (DEBUG)        //            Logger.v(TAG_CAMERA, "handleConnectUSART:");        //        if (mParent != null) {        final IUVCService service = getService();        if (service != null)            try {                if (!mIsConnected/**!service.isConnected(mServiceId)**/) {                    service.connect();                } else {                    onConnected();                }            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================service.connect e=" + e + "==================");                restartApp();                e.printStackTrace();                if (DEBUG)                    Logger.e(TAG_CAMERA, "handleConnectUSART:", e);                //2016.11.07 新增 掉线释放对象                mService = null;                //20180130                //release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                //mServiceSync.notifyAll();            }        //        }    }    //2016.09.14 : 新增 : 用于待机唤醒后重新设置并开始预览图像 :    @Override    public void restartPreview() {        if (DEBUG)            Logger.v(TAG, "restartPreview:" + this);        final IUVCService service = getService();        if (service != null)            try {                service.restartPreview();            } catch (final RemoteException e) {                FileUtils.writeFileToLogFolder("================service.restartPreview e=" + e + "==================");                restartApp();                e.printStackTrace();                if (DEBUG)                    Log.e(TAG_CAMERA, "handleRestartPreview:", e);                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                //mServiceSync.notifyAll();            }    }    @Override    public void disconnect() {        if (DEBUG)            Log.v(TAG, "disconnect:" + this);        //        if (USE_USART) {        //            mWeakHandler.get().sendEmptyMessage(CameraHandler.MSG_DISCONNECT);        //        }        //        if (DEBUG)        //            Log.v(TAG_CAMERA, "handleDisconnectUSART:");        //        if (mParent != null) {        final IUVCService service = getService();        if (service != null) {            try {                //                            if (service.isConnected(mServiceId)) {                //                                service.disconnect(mServiceId);                //                            } else                onDisConnected();            } catch (Exception e) {                FileUtils.writeFileToLogFolder("================onDisConnected e=" + e + "==================");                restartApp();                e.printStackTrace();                if (DEBUG)                    Log.e(TAG_CAMERA, "handleDisconnectUSART:", e);            }        }        mIsConnected = false;        //        }    }    /**     * 为SurfaceView添加图像 :     *     * @param surface     * @param isRecordable     */    @Override    public void addSurface(final Surface surface, final boolean isRecordable) {        if (DEBUG)            Log.v(TAG, "addSurface:surface=" + surface + ",hash=" + surface.hashCode());        //  Log.e(TAG, "CameraClient#addSurface():surface=" + surface + ",hash=" + surface.hashCode());        final IUVCService service = getService();        if (service != null)            try {                service.addSurface(surface.hashCode(), surface, isRecordable);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================service.addSurface e=" + e + "==================");                e.printStackTrace();                restartApp();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                //mServiceSync.notifyAll();            }        //        }    }    @Override    public void removeSurface(final Surface surface) {        if (DEBUG)            Log.v(TAG, "removeSurface:surface=" + surface + ",hash=" + surface.hashCode());        // if (surface != null)        //    Log.e(TAG, "CameraClient#removeSurface():surface=" + surface + ",hash=" + surface.hashCode());        final IUVCService service = getService();        if (service != null)            try {                if (surface != null)                    service.removeSurface(surface.hashCode());            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================service.removeSurface e=" + e + "==================");                e.printStackTrace();                restartApp();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                // mServiceSync.notifyAll();            }        //        }    }    @Override    public boolean isRecording() {        //        final CameraHandler handler = mWeakHandler.get();        //        return (handler != null) && handler.isRecording();        final IUVCService service = getService();        if (service != null) {            try {                return service.isRecording();            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================service.isRecording e=" + e + "==================");                restartApp();                e.printStackTrace();                if (DEBUG)                    Log.e(TAG, "isRecording:", e);                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                //mServiceSync.notifyAll();            }        } else {            final Context context = mWeakContext;            if (context != null) {                Toast.makeText(context, " IUVCService == null === ", Toast.LENGTH_LONG).show();            } else {                // Log.w("test_CamClient", "isRecording()#mWeakContext.get() == null && IUVCService == null=== ");            }        }        return false;    }    @Override    public void startRecording(int filenumber) {        // String dirName = BaseApplication.DIR_NAME;        if (!isRecording()) {            if (DEBUG)                Log.v(TAG, "handleStartRecording:");            //            if (mParent != null) {            final IUVCService service = getService();            if (service != null)                try {                    if (!service.isRecording()) {                        service.startRecording(filenumber);                    }                } catch (RemoteException e) {                    FileUtils.writeFileToLogFolder("================service.startRecording e=" + e + "==================");                    restartApp();                    e.printStackTrace();                    if (DEBUG)                        Log.e(TAG_CAMERA, "handleStartRecording:", e);                    //2016.11.07 新增 掉线释放对象                    mService = null;                    //  release();  //2016-12-26 屏蔽 pei                    //20170901屏蔽                    //mServiceSync.notifyAll();                }            //            }        }    }    @Override    public void stopRecording() {        if (isRecording()) {            if (DEBUG)                Log.v(TAG, "handleStopRecording:");            //            if (mParent != null) {            final IUVCService service = getService();            if (service != null)                try {                    if (service.isRecording()) {                        service.stopRecording();                    }                } catch (RemoteException e) {                    FileUtils.writeFileToLogFolder("================service.stopRecording e=" + e + "==================");                    restartApp();                    e.printStackTrace();                    if (DEBUG)                        Log.e(TAG_CAMERA, "handleStopRecording:", e);                    //2016.11.07 新增 掉线释放对象                    mService = null;                    //  release();  //2016-12-26 屏蔽 pei                    //20170901屏蔽                    // mServiceSync.notifyAll();                }            //            }        }    }    @Override    public void captureStill(final String path) {        if (DEBUG)            Log.v(TAG, "handleCaptureStill:" + path);        //        if (mParent != null) {        final IUVCService service = getService();        if (service != null)            try {                service.captureStillImage(path);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================ service.captureStillImage e=" + e + "==================");                restartApp();                e.printStackTrace();                if (DEBUG)                    Log.e(TAG_CAMERA, "handleCaptureStill:", e);                // //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                //mServiceSync.notifyAll();            }        //        }    }    /**     * 设置亮度 :     *     * @param bright_abs     */    @Override    public void setBrightness(int bright_abs) {        if (DEBUG)            Log.v(TAG, "Client-handleBrightness:" + bright_abs);        //        if (mParent != null) {        final IUVCService service = getService();        if (service != null)            try {                service.cameraControl(CameraServerHandler.MSG_BRIGHTNESS_CONTROL, bright_abs);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================setBrightness service.cameraControl e=" + e + "==================");                restartApp();                e.printStackTrace();                //20 //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                //mServiceSync.notifyAll();            }        //        }    }    @Override    public int getBrightness() {        //        final CameraHandler handler = mWeakHandler.get();        //        if (handler != null)        //            return handler.getBrightness();        //        return 0;        final IUVCService service = getService();        if (service != null)            try {                return service.cameraParameter(CameraServerHandler.MSG_BRIGHTNESS_CONTROL);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================getBrightness service.cameraParameter e=" + e + "==================");                restartApp();                e.printStackTrace();                if (DEBUG)                    Log.e(TAG, "isRecording:", e);                //2016 //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                //mServiceSync.notifyAll();            }        return 0;    }    @Override    public void setSaturation(int saturation_abs) {     //设置激发灯光状态控制 :        if (DEBUG)            Log.v(TAG, "Client-handleSaturation:" + saturation_abs);        final IUVCService service = getService();        if (service != null) {            try {                //Log.e("CameraClient","setSaturation>>="+saturation_abs);                service.cameraControl(CameraServerHandler.MSG_SATURATION_CONTROL, saturation_abs);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================setSaturation service.cameraControl e=" + e + "==================");                restartApp();                e.printStackTrace();                //201 //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                //  mServiceSync.notifyAll();            }        }        //}    }    private void restartApp() {        FileUtils.writeFileToLogFolder("Client-串口异常，restartApp");        RestartUtil restartUtil = new RestartUtil();        restartUtil.killProcess();    }    /**     * @return获取饱和度 :     */    @Override    public int getSaturation() {    //获取激发灯光状态信息 :        final IUVCService service = getService();        if (service != null)            try {                return service.cameraParameter(CameraServerHandler.MSG_SATURATION_CONTROL);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================getSaturation service.cameraParameter e=" + e + "==================");                restartApp();                e.printStackTrace();                if (DEBUG)                    Log.e(TAG, "isRecording:", e);                //2016 //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                //mServiceSync.notifyAll();            }        return 0;        //        }    }    @Override    public void setContrast(int contrast_abs) {     //设置物镜状态控制 :        if (DEBUG)            Log.v(TAG, "Client-handleContrast:" + contrast_abs);        //        if (USE_USART) {        //            final CameraHandler handler = mWeakHandler.get();        //            if (handler != null) {        //                handler.sendMessage(handler.obtainMessage(CameraHandler.MSG_CONTRAST_CONTROL, contrast_abs));        //            }        //        } else {        //        if (mParent != null) {        final IUVCService service = getService();        if (service != null) {            try {                service.cameraControl(CameraServerHandler.MSG_CONTRAST_CONTROL, contrast_abs);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================setContrast service.cameraControl e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016. //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                // mServiceSync.notifyAll();            }        }        //        }        //        }    }    //获取对比度 :    @Override    public int getContrast() {      //获取物镜状态信息 :        //        if (USE_USART) {        //            final CameraHandler handler = mWeakHandler.get();        //            if (handler != null)        //                return handler.getContrast();        //            return 0;        //        } else {        final IUVCService service = getService();        if (service != null)            try {                return service.cameraParameter(CameraServerHandler.MSG_CONTRAST_CONTROL);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================getContrast service.cameraParameter e=" + e + "==================");                restartApp();                e.printStackTrace();                if (DEBUG)                    Log.e(TAG, "isRecording:", e);                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                // mServiceSync.notifyAll();            }        return 0;        //        }    }    //设置增益 :    @Override    public void setGain(int gain_abs) {        //===================================================        //        if (mParent != null) {        final IUVCService service = getService();        if (service != null) {            try {                // Log.w(TAG, "CameraClient#setGain() :" + gain_abs);                service.cameraControl(MSG_GAIN_CONTROL, gain_abs);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================setGain service.cameraControl e=" + e + "==================");                e.printStackTrace();                // Log.w(TAG, "CameraClient#setGain()#catch :" + gain_abs);                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                //mServiceSync.notifyAll();            }        }        //        }    }    @Override    public int getGain() {        final IUVCService service = getService();        if (service != null)            try {                return service.cameraParameter(MSG_GAIN_CONTROL);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================getGain service.cameraParameter e=" + e + "==================");                restartApp();                e.printStackTrace();                if (DEBUG)                    Log.e(TAG, "isRecording:", e);                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                //mServiceSync.notifyAll();            }        return 0;    }    //设置伽马值 :    @Override    public void setGamma(int focus_abs) {   //gamma改成focus_abs      //设置物镜对焦位置控制 :        if (DEBUG)            Log.v(TAG, "Client-handleFocus:" + focus_abs);        final IUVCService service = getService();        if (service != null) {            try {                service.cameraControl(CameraServerHandler.MSG_GAMMA_CONTROL, focus_abs);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================setGamma service.cameraControl e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                // mServiceSync.notifyAll();            }        }    }    @Override    public int getGamma() {      //设置物镜对焦位置控制 :        //        if (USE_USART) {        //            final CameraHandler handler = mWeakHandler.get();        //            if (handler != null)        //                return handler.getGamma();        //            return 0;        //        } else {        final IUVCService service = getService();        int gamma = -1;// 2016-08-04 改pei        if (service != null) {            try {                gamma = service.cameraParameter(CameraServerHandler.MSG_GAMMA_CONTROL);                return gamma;            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================getGamma service.cameraParameter e=" + e + "==================");                e.printStackTrace();                restartApp();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                // mServiceSync.notifyAll();            }        }        return gamma;        //        }    }    //20170408    public void mSetGamma(int focus, boolean isForward, int currentstep, String speed) {        final IUVCService service = getService();        if (service != null) {            try {                service.mSetGamma(focus, isForward, currentstep, speed);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================mSetGamma service.mSetGamma e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                // mServiceSync.notifyAll();            }        }    }    public int getReStartState() {        final IUVCService service = getService();        int result = 1;        if (service != null) {            try {                int appRestartState = service.getAppRestartState();                return appRestartState;            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================mReleadFocus service.releadFocus e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;            }        }        return result;    }    public void mReleadFocus() {        final IUVCService service = getService();        if (service != null) {            try {                service.releadFocus();            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================mReleadFocus service.releadFocus e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;            }        }    }    public int getMaxNuberType(int type) {        final IUVCService service = getService();        if (service != null) {            try {                return service.getMaxNuberType(type);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================getMaxNuberType service.getMaxNuberType e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;            }        }        return 100;    }    public void updateMessageToPhoneMethod(String type, String number) {        final IUVCService service = getService();        if (service != null) {            try {                service.updateMessagePhoneMethod(type, number);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================updateMessageToPhoneMethod service.updateMessagePhoneMethod e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;            }        }    }    public void uadateTPicterFileName(String filename) {        final IUVCService service = getService();        if (service != null) {            try {                service.uadateTPicterFileName(filename);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================uadateTPicterFileName service.uadateTPicterFileName e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;            }        }    }    public int getPicPercentage(int temp) {        int percentage = 0;        final IUVCService service = getService();        if (service != null) {            try {                int picPercentage = service.getPicPercentage(temp);                return picPercentage;            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================getPicPercentage service.getPicPercentage e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;            }        }        return percentage;    }    public void sendAutoFocusMessege(int count, int x, int y, boolean isstop, int movestep) {        final IUVCService service = getService();        if (service != null) {            try {                service.sendAutoFocusMessege(count, x, y, isstop, movestep);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================sendAutoFocusMessege service.sendAutoFocusMessege e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                // mServiceSync.notifyAll();            }        }    }    public void sendToBackgroundProgram(String type, String message) {        final IUVCService service = getService();        if (service != null) {            try {                service.sendToBackgroundProgram(type, message);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================sendToBackgroundProgram service.sendToBackgroundProgram e=" + e + "==================");                restartApp();                e.printStackTrace();                mService = null;            }        }    }    public int getUartGamma(int uartgamma) {        int mGamma = 0;        final IUVCService service = getService();        if (service != null) {            try {                int uartGamma = service.getUartGamma(uartgamma);                mGamma = uartGamma;            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================getUartGamma service.getUartGamma e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                // mServiceSync.notifyAll();            }        }        return mGamma;    }    public void setUartGamma(int uartgamma) {        final IUVCService service = getService();        if (service != null) {            try {                service.setUartGamma(uartgamma);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================setUartGamma service.setUartGamma e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                // mServiceSync.notifyAll();            }        }    }    public boolean getAutoFocusResult() {        boolean result = false;        final IUVCService service = getService();        if (service != null) {            try {                result = service.getAutoFocusResult();                return result;            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================getAutoFocusResult service.getAutoFocusResult e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                // mServiceSync.notifyAll();            }        }        return result;    }    public float getOperationBrignes() {        float result = 0;        final IUVCService service = getService();        if (service != null) {            try {                result = service.getOperationBrignes();                return result;            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================getOperationBrignes service.getOperationBrignes e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                // mServiceSync.notifyAll();            }        }        return result;    }    public float getFreshnes() {        float result = 0;        final IUVCService service = getService();        if (service != null) {            try {                result = service.getFreshnes();                return result;            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================getFreshnes service.getFreshnes e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                // mServiceSync.notifyAll();            }        }        return result;    }    public int getMaxBrightness() {        int result = 0;        final IUVCService service = getService();        if (service != null) {            try {                result = service.getMaxBrightness();                return result;            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================getMaxBrightness service.getMaxBrightness e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;            }        }        return result;    }    public void setRocKerState(String state) {        int result = 0;        final IUVCService service = getService();        if (service != null) {            try {                service.setRockerState(state);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================getMaxBrightness service.getMaxBrightness e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;            }        }    }    //CameraClient 相机客户端的拍照 方法 , 供MasterAtivity调用 !    public void capture(String path, String pathrequest, String pathscale) {        final IUVCService service = getService();        if (service != null) {            try {                service.capture(path, pathrequest, pathscale);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================capture service.capture e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                //mServiceSync.notifyAll();            }        }    }    /* public void stopCamera(){         final IUVCService service = getService();         if (service != null) {             try {                 service.stopCamer();             } catch (RemoteException e) {                 e.printStackTrace();                 mService = null;             }         }     }*/    public void sendStrToUART(String str) {        final IUVCService service = getService();        if (service != null) {            try {                service.sendStringToUart(str);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================sendStringToUart service.sendStringToUart e=" + e + "==================");                restartApp();                e.printStackTrace();                mService = null;            }        }    }    //物镜是否在切换状态    public boolean getObjectiveSwithState(boolean isOn) {        final IUVCService service = getService();        if (service != null) {            try {                return service.getObjectiveIsSwith(isOn);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================getObjectiveSwithState service.getObjectiveSwithState e=" + e + "==================");                restartApp();                e.printStackTrace();                mService = null;            }        }        return false;    }    public void reStartCamera() {        final IUVCService service = getService();        if (service != null) {            try {                service.reStartCamera();            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================reStartCamera service.reStartCamera e=" + e + "==================");                restartApp();                e.printStackTrace();                mService = null;            }        }    }    public void stopBackProcess() {        final IUVCService service = getService();        if (service != null) {            try {                service.sotpProcess();            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================stopBackProcess service.stopBackProcess e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                // mServiceSync.notifyAll();            }        } else {        }    }    public void rCloseUVC() {        final IUVCService service = getService();        if (service != null) {            try {                service.closeUVC();            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================rCloseUVC service.rCloseUVC e=" + e + "==================");                restartApp();                e.printStackTrace();                mService = null;            }        } else {        }    }    public void correctionPictureXY(int x, int y) {        final IUVCService service = getService();        if (service != null) {            try {                service.correctionPictureXY(x, y);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================correctionPictureXY service.correctionPictureXY e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                // mServiceSync.notifyAll();            }        }    }    public int getSaturationState() {        final IUVCService service = getService();        if (service != null) {            try {                int saturation = service.getSaturationState();                return saturation;            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================getSaturationState service.getSaturationState e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                // mServiceSync.notifyAll();            }        }        return 0;    }    public void setResponeModel(boolean remote) {        final IUVCService service = getService();        if (service != null) {            try {                service.setResponeModel(remote);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================setResponeModel service.setResponeModel e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                // mServiceSync.notifyAll();            }        }    }    public void rOpenUVC() {        final IUVCService service = getService();        if (service != null) {            try {                service.openUVC();            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================rOpenUVC service.rOpenUVC e=" + e + "==================");                restartApp();                e.printStackTrace();                mService = null;            }        } else {        }    }    public boolean isConnectCamera(int constant, int gamma) {        boolean connected = false;        final IUVCService service = getService();        if (service != null) {            try {                connected = service.isConnected(constant, gamma);                return connected;            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================isConnectCamera service.isConnectCamera e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                // mServiceSync.notifyAll();            }        }        return connected;    }    public boolean isConnectUSB() {        boolean connected = false;        final IUVCService service = getService();        if (service != null) {            try {                connected = service.isConnectUSB();                return connected;            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================isConnectUSB service.isConnectUSB e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                // mServiceSync.notifyAll();            }        }        return connected;    } /*   public int getBackProcessPid(){        final IUVCService service = getService();        int backProcessPid = 0;        if (service != null) {            try {                backProcessPid = service.getBackProcessPid();            } catch (RemoteException e) {                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                mServiceSync.notifyAll();            }        }        return backProcessPid;    }   */    /**     * 设置自动对焦 :     *     * @param autoFocus     */    public void setAutoFocus(boolean autoFocus) {        if (DEBUG)            Log.v(TAG, "Client-handleAutoFocus:" + autoFocus);        //        if (mParent != null) {        final IUVCService service = getService();        if (service != null) {            try {                service.setCameraAutoFocus(autoFocus);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================setAutoFocus service.setCameraAutoFocus e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                // mServiceSync.notifyAll();            }        }        //        }    }    /**     * @param focus_abs     */    public void setFocus(int focus_abs) {        if (DEBUG)            Log.v(TAG, "Client-handleFocus:" + focus_abs);        //        if (mParent != null) {        final IUVCService service = getService();        if (service != null) {            try {                service.cameraControl(CameraServerHandler.MSG_FOCUS_CONTROL, focus_abs);            } catch (RemoteException e) {                restartApp();                FileUtils.writeFileToLogFolder("================setFocus service.cameraControl e=" + e + "==================");                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                //mServiceSync.notifyAll();            }        }        //        }    }    public int getFocus() {        final IUVCService service = getService();        if (service != null)            try {                return service.cameraParameter(CameraServerHandler.MSG_FOCUS_CONTROL);            } catch (RemoteException e) {                FileUtils.writeFileToLogFolder("================getFocus service.cameraParameter e=" + e + "==================");                e.printStackTrace();                restartApp();                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                // mServiceSync.notifyAll();            }        return 0;    }    //以下标志用于发送给手机端,用于手机端判断平板端是否成功连接上相机 ;    public static final boolean CLIENT_STOP = false;    public static final boolean CLIENT_NORMAL = true;    public void clientControl(boolean status) {        if (DEBUG)            Log.v(TAG, String.format("handleClientStatus(%d", status ? 1 : 0));        final IUVCService service = getService();        if (service != null) {            try {                service.clientControl(status);            } catch (final RemoteException e) {                FileUtils.writeFileToLogFolder("================clientControl service.clientControl e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                // mServiceSync.notifyAll();            }        }    }    public void setRecolorString(String string) {        final IUVCService service = getService();        if (service != null) {            try {                service.sendRecolorString(string);            } catch (final RemoteException e) {                FileUtils.writeFileToLogFolder("================sendRecolorString service.sendRecolorString e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                //mServiceSync.notifyAll();            }        }    }    public void clientColor(int color) {        if (DEBUG)            Log.v(TAG, String.format("handleClientColor(%s)", color));        final IUVCService service = getService();        if (service != null)            try {                service.setColor(color);            } catch (final RemoteException e) {                FileUtils.writeFileToLogFolder("================clientColor service.setColor e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                //20170901屏蔽                //mServiceSync.notifyAll();            }    }    public void mSetGamma(int gray) {        final IUVCService service = getService();        if (service != null)            try {                service.setGray(gray);            } catch (final RemoteException e) {                FileUtils.writeFileToLogFolder("================mSetGamma service.setGray e=" + e + "==================");                restartApp();                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;            }    }    public boolean doBindService() {        if (DEBUG)            Log.v(TAG, "doBindService:");        synchronized (mServiceSync) {            if (mService == null) {                final Context context = mWeakContext;                if (context != null) {                    final Intent intent = new Intent(IUVCService.class.getName());                    // 复制代码时候注意一定要改这里，改成AndroidManifest.xml中applicationId一致                    //                    intent.setPackage("com.yeespec");                    intent.setPackage("com.yeespec.microscope.master");                    intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);                    context.bindService(intent, mServiceConnection, Context.BIND_AUTO_CREATE);                } else {                    return true;                }            }        }        return false;    }    public void doUnBindService() {        if (mService != null) {            final Context context = mWeakContext;            if (context != null) {                try {                    context.unbindService(mServiceConnection);                } catch (Exception e) {                    e.printStackTrace();                }            }            mService = null;        }    }    private final ServiceConnection mServiceConnection = new ServiceConnection() {        @Override        public void onServiceConnected(ComponentName name, IBinder service) {            synchronized (mServiceSync) {                if (DEBUG)                    Logger.v(TAG, "onServiceConnected:name=" + name);                mService = IUVCService.Stub.asInterface(service);                mServiceSync.notifyAll();                mListener.isConnect(true);                FileUtils.writeFileToLogFolder("ServiceConnection onServiceConnected");            }        }        @Override        public void onServiceDisconnected(ComponentName name) {            synchronized (mServiceSync) {                if (DEBUG)                    Logger.v(TAG, "onServiceDisconnected:name=" + name);                mService = null;                //2016.11.07 : 新增 usb掉线时 清除控制对象；                // release();  //2016-12-26 屏蔽 pei                mServiceSync.notifyAll();                if (mListener != null) {                    System.gc();                    mListener.isConnect(false);                    doUnBindService();                    doBindService();                }                FileUtils.writeFileToLogFolder("ServiceConnection onServiceDisconnected");            }        }    };    /**     * get reference to instance of IUVCService     * you should not call this from UI thread, this method block until the service is available     *     * @return     */    public IUVCService getService() {        synchronized (mServiceSync) {            try {                if (mService == null) {                    mServiceSync.wait();                }            } catch (Exception e) {                e.printStackTrace();                //2016.11.07 新增 掉线释放对象                mService = null;                //  release();  //2016-12-26 屏蔽 pei                mServiceSync.notifyAll();            }        }        return mService;    }    //================================================================================    // callbacks from service    @Override    public void onConnected() {        if (DEBUG)            Log.v(TAG_CAMERA, "onConnected:");        mIsConnected = true;        if (mListener != null) {            mListener.onConnect();        }    }    @Override    public void onDisConnected() {        if (DEBUG)            Log.v(TAG_CAMERA, "onDisConnected:");        mIsConnected = false;        if (mListener != null) {            mListener.onDisconnect();        }    }}//===========================================================